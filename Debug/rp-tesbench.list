
rp-tesbench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f940  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000910  0800fad0  0800fad0  00010ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103e0  080103e0  00012328  2**0
                  CONTENTS
  4 .ARM          00000008  080103e0  080103e0  000113e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103e8  080103e8  00012328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103e8  080103e8  000113e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080103ec  080103ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000328  20000000  080103f0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e48  20000328  08010718  00012328  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003170  08010718  00013170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012328  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017943  00000000  00000000  00012358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048ed  00000000  00000000  00029c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  0002e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fff  00000000  00000000  0002fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b20e  00000000  00000000  00030aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb83  00000000  00000000  0005bcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecf27  00000000  00000000  00078840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a74  00000000  00000000  001657ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0016c220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000328 	.word	0x20000328
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fab8 	.word	0x0800fab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000032c 	.word	0x2000032c
 80001cc:	0800fab8 	.word	0x0800fab8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2lz>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	460d      	mov	r5, r1
 8000c62:	f7ff ff4b 	bl	8000afc <__aeabi_dcmplt>
 8000c66:	b928      	cbnz	r0, 8000c74 <__aeabi_d2lz+0x1c>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	4629      	mov	r1, r5
 8000c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c70:	f000 b80a 	b.w	8000c88 <__aeabi_d2ulz>
 8000c74:	4620      	mov	r0, r4
 8000c76:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c7a:	f000 f805 	bl	8000c88 <__aeabi_d2ulz>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <__aeabi_d2ulz+0x34>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4606      	mov	r6, r0
 8000c90:	460f      	mov	r7, r1
 8000c92:	f7ff fcc1 	bl	8000618 <__aeabi_dmul>
 8000c96:	f7ff ff6f 	bl	8000b78 <__aeabi_d2uiz>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	f7ff fc42 	bl	8000524 <__aeabi_ui2d>
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <__aeabi_d2ulz+0x38>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f7ff fcb8 	bl	8000618 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4630      	mov	r0, r6
 8000cae:	4639      	mov	r1, r7
 8000cb0:	f7ff fafa 	bl	80002a8 <__aeabi_dsub>
 8000cb4:	f7ff ff60 	bl	8000b78 <__aeabi_d2uiz>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbc:	3df00000 	.word	0x3df00000
 8000cc0:	41f00000 	.word	0x41f00000

08000cc4 <run_console>:
#include "usbd_cdc_if.h"


uint32_t ReadFill(char* buf, uint32_t capacity);

_Noreturn void run_console() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	f5ad 7d7c 	sub.w	sp, sp, #1008	@ 0x3f0
 8000cca:	af00      	add	r7, sp, #0
#define MAIN_MENU 0
#define FLASH_MENU 1
#define HAL_MENU 2
#define LCD_MENU 3
	uint8_t current_menu = MAIN_MENU;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 33ef 	strb.w	r3, [r7, #1007]	@ 0x3ef

	uint32_t program_address = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
	uint8_t* program_buf = malloc(256);
 8000cd8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000cdc:	f00a fffc 	bl	800bcd8 <malloc>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
	char command[100] = { 0 };
 8000ce6:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000cea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	3304      	adds	r3, #4
 8000cf4:	2260      	movs	r2, #96	@ 0x60
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00b fd10 	bl	800c71e <memset>

	while (1) {

		int size;
		do {
			size = Read(command, 100);
 8000cfe:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000d02:	2164      	movs	r1, #100	@ 0x64
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 f955 	bl	8001fb4 <Read>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
		} while (size == 0);
 8000d10:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f2      	beq.n	8000cfe <run_console+0x3a>

		//unsigned char temp[50] = { 0 };
		//sprintf(temp, "\r\nsize: %d\r\n", size);
		//CDC_Transmit_FS(temp, sizeof(temp));

		command[size - 1] = '\0';
 8000d18:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	f507 727c 	add.w	r2, r7, #1008	@ 0x3f0
 8000d22:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8000d26:	2100      	movs	r1, #0
 8000d28:	54d1      	strb	r1, [r2, r3]

		if (current_menu == MAIN_MENU) {
 8000d2a:	f897 33ef 	ldrb.w	r3, [r7, #1007]	@ 0x3ef
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 81ce 	bne.w	80010d0 <run_console+0x40c>
			if (strcmp("clear", command) == 0) {
 8000d34:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000d38:	4619      	mov	r1, r3
 8000d3a:	48c8      	ldr	r0, [pc, #800]	@ (800105c <run_console+0x398>)
 8000d3c:	f7ff fa48 	bl	80001d0 <strcmp>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d103      	bne.n	8000d4e <run_console+0x8a>
				WriteString("\033[2J\033[H>");
 8000d46:	48c6      	ldr	r0, [pc, #792]	@ (8001060 <run_console+0x39c>)
 8000d48:	f001 f9e9 	bl	800211e <WriteString>
 8000d4c:	e7d7      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp("whoami", command) == 0) {
 8000d4e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000d52:	4619      	mov	r1, r3
 8000d54:	48c3      	ldr	r0, [pc, #780]	@ (8001064 <run_console+0x3a0>)
 8000d56:	f7ff fa3b 	bl	80001d0 <strcmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d103      	bne.n	8000d68 <run_console+0xa4>
				WriteString("RP42 0.0.0.4-b\n>");
 8000d60:	48c1      	ldr	r0, [pc, #772]	@ (8001068 <run_console+0x3a4>)
 8000d62:	f001 f9dc 	bl	800211e <WriteString>
 8000d66:	e7ca      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp("lscpu", command) == 0) {
 8000d68:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	48bf      	ldr	r0, [pc, #764]	@ (800106c <run_console+0x3a8>)
 8000d70:	f7ff fa2e 	bl	80001d0 <strcmp>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d103      	bne.n	8000d82 <run_console+0xbe>
				WriteString("RP42 0.0.0.4-b\n\tMCU: STM32L475RCT6\n\tCPU: ARM M4 Cortex\n\tMax Clock Speed: 80MHZ\n\tRAM: 128KB\n\tFLASH: 256KB\n>");
 8000d7a:	48bd      	ldr	r0, [pc, #756]	@ (8001070 <run_console+0x3ac>)
 8000d7c:	f001 f9cf 	bl	800211e <WriteString>
 8000d80:	e7bd      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp("lsblk", command) == 0) {
 8000d82:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000d86:	4619      	mov	r1, r3
 8000d88:	48ba      	ldr	r0, [pc, #744]	@ (8001074 <run_console+0x3b0>)
 8000d8a:	f7ff fa21 	bl	80001d0 <strcmp>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d103      	bne.n	8000d9c <run_console+0xd8>
				WriteString("NAME\tRM\tSIZE\tRO\tTYPE\tMOUNTPOINTS\nsda\t0\t256K\t1\tFLASH\nsdb\t0\t8M\t0\tFLASH\n>");
 8000d94:	48b8      	ldr	r0, [pc, #736]	@ (8001078 <run_console+0x3b4>)
 8000d96:	f001 f9c2 	bl	800211e <WriteString>
 8000d9a:	e7b0      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp("frw", command) == 0) {
 8000d9c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000da0:	4619      	mov	r1, r3
 8000da2:	48b6      	ldr	r0, [pc, #728]	@ (800107c <run_console+0x3b8>)
 8000da4:	f7ff fa14 	bl	80001d0 <strcmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d106      	bne.n	8000dbc <run_console+0xf8>
				WriteString("\033[32mFlash Read/Write Tool\033[0m\nfrw>");
 8000dae:	48b4      	ldr	r0, [pc, #720]	@ (8001080 <run_console+0x3bc>)
 8000db0:	f001 f9b5 	bl	800211e <WriteString>
				current_menu = FLASH_MENU;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f887 33ef 	strb.w	r3, [r7, #1007]	@ 0x3ef
 8000dba:	e7a0      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp("echo off", command) == 0) {
 8000dbc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	48b0      	ldr	r0, [pc, #704]	@ (8001084 <run_console+0x3c0>)
 8000dc4:	f7ff fa04 	bl	80001d0 <strcmp>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d107      	bne.n	8000dde <run_console+0x11a>
				COM_STATUS &= ~ECHO;
 8000dce:	4bae      	ldr	r3, [pc, #696]	@ (8001088 <run_console+0x3c4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4bab      	ldr	r3, [pc, #684]	@ (8001088 <run_console+0x3c4>)
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e78f      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp("echo on", command) == 0) {
 8000dde:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000de2:	4619      	mov	r1, r3
 8000de4:	48a9      	ldr	r0, [pc, #676]	@ (800108c <run_console+0x3c8>)
 8000de6:	f7ff f9f3 	bl	80001d0 <strcmp>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d107      	bne.n	8000e00 <run_console+0x13c>
				COM_STATUS |= ECHO;
 8000df0:	4ba5      	ldr	r3, [pc, #660]	@ (8001088 <run_console+0x3c4>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4ba3      	ldr	r3, [pc, #652]	@ (8001088 <run_console+0x3c4>)
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e77e      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp("sudo hal-config", command) == 0) {
 8000e00:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000e04:	4619      	mov	r1, r3
 8000e06:	48a2      	ldr	r0, [pc, #648]	@ (8001090 <run_console+0x3cc>)
 8000e08:	f7ff f9e2 	bl	80001d0 <strcmp>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d103      	bne.n	8000e1a <run_console+0x156>
				current_menu = HAL_MENU;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f887 33ef 	strb.w	r3, [r7, #1007]	@ 0x3ef
 8000e18:	e771      	b.n	8000cfe <run_console+0x3a>
			//} else if (strcmp("whereami", command) == 0) {
			//	_WriteString("Running from FLASH!!!!", 1);
			}
			else if (strcmp("mount", command) == 0) {
 8000e1a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	489c      	ldr	r0, [pc, #624]	@ (8001094 <run_console+0x3d0>)
 8000e22:	f7ff f9d5 	bl	80001d0 <strcmp>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10b      	bne.n	8000e44 <run_console+0x180>

				if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000e2c:	f001 fff8 	bl	8002e20 <CSP_QSPI_EnableMemoryMappedMode>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d002      	beq.n	8000e3c <run_console+0x178>
					WriteString("\033[31mFailed to mount\033[0m");
 8000e36:	4898      	ldr	r0, [pc, #608]	@ (8001098 <run_console+0x3d4>)
 8000e38:	f001 f971 	bl	800211e <WriteString>
				}
				WriteString("\n>");
 8000e3c:	4897      	ldr	r0, [pc, #604]	@ (800109c <run_console+0x3d8>)
 8000e3e:	f001 f96e 	bl	800211e <WriteString>
 8000e42:	e75c      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp("run", command) == 0) {
 8000e44:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4895      	ldr	r0, [pc, #596]	@ (80010a0 <run_console+0x3dc>)
 8000e4c:	f7ff f9c0 	bl	80001d0 <strcmp>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d11f      	bne.n	8000e96 <run_console+0x1d2>
				  CSP_QSPI_EnableMemoryMappedMode();
 8000e56:	f001 ffe3 	bl	8002e20 <CSP_QSPI_EnableMemoryMappedMode>

					uint32_t initial_sp = *(__IO uint32_t*)   0x90000000;
 8000e5a:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
					uint32_t reset_vector = *(__IO uint32_t*) 0x90000004;
 8000e64:	4b8f      	ldr	r3, [pc, #572]	@ (80010a4 <run_console+0x3e0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c

					SCB->VTOR = 0x90000000;
 8000e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80010a8 <run_console+0x3e4>)
 8000e6e:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 8000e72:	609a      	str	r2, [r3, #8]

					typedef void (*free42App)(void);
					free42App jumpToApp = (free42App) reset_vector;
 8000e74:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8000e78:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8000e7c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8000e80:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000e84:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 8000e88:	f383 8808 	msr	MSP, r3
}
 8000e8c:	bf00      	nop

					__set_MSP(initial_sp);
					jumpToApp();
 8000e8e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8000e92:	4798      	blx	r3
 8000e94:	e733      	b.n	8000cfe <run_console+0x3a>
			}
			else if (strcmp("version", command) == 0) {
 8000e96:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4883      	ldr	r0, [pc, #524]	@ (80010ac <run_console+0x3e8>)
 8000e9e:	f7ff f997 	bl	80001d0 <strcmp>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d103      	bne.n	8000eb0 <run_console+0x1ec>
				WriteString("Version 0.0.5b\n>");
 8000ea8:	4881      	ldr	r0, [pc, #516]	@ (80010b0 <run_console+0x3ec>)
 8000eaa:	f001 f938 	bl	800211e <WriteString>
 8000eae:	e726      	b.n	8000cfe <run_console+0x3a>
			}
			else if (strcmp("RDF", command) == 0) {
 8000eb0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	487f      	ldr	r0, [pc, #508]	@ (80010b4 <run_console+0x3f0>)
 8000eb8:	f7ff f98a 	bl	80001d0 <strcmp>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 80c7 	bne.w	8001052 <run_console+0x38e>
				char* buf = malloc(20);
 8000ec4:	2014      	movs	r0, #20
 8000ec6:	f00a ff07 	bl	800bcd8 <malloc>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
				uint8_t size;

				if (buf == NULL) continue;
 8000ed0:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 87e1 	beq.w	8001e9c <run_console+0x11d8>

				do {
					HAL_Delay(1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f002 fbb8 	bl	8003650 <HAL_Delay>
					size = Read(buf, 20);
 8000ee0:	2114      	movs	r1, #20
 8000ee2:	f8d7 0340 	ldr.w	r0, [r7, #832]	@ 0x340
 8000ee6:	f001 f865 	bl	8001fb4 <Read>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f887 333f 	strb.w	r3, [r7, #831]	@ 0x33f
				} while (size == 0);
 8000ef0:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f0      	beq.n	8000eda <run_console+0x216>

				buf[size - 1] = '\0';
 8000ef8:	f897 333f 	ldrb.w	r3, [r7, #831]	@ 0x33f
 8000efc:	3b01      	subs	r3, #1
 8000efe:	f8d7 2340 	ldr.w	r2, [r7, #832]	@ 0x340
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

				char* end;
				uint32_t num = 0;
 8000f08:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000f0c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
				sscanf(buf, "%16lu", &num);
 8000f14:	f507 732f 	add.w	r3, r7, #700	@ 0x2bc
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4967      	ldr	r1, [pc, #412]	@ (80010b8 <run_console+0x3f4>)
 8000f1c:	f8d7 0340 	ldr.w	r0, [r7, #832]	@ 0x340
 8000f20:	f00b fb8e 	bl	800c640 <siscanf>

				char* print_buf = malloc(20);
 8000f24:	2014      	movs	r0, #20
 8000f26:	f00a fed7 	bl	800bcd8 <malloc>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
				for (unsigned int i = 0; i < 20; i++) print_buf[i] = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 8000f36:	e00b      	b.n	8000f50 <run_console+0x28c>
 8000f38:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8000f3c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000f40:	4413      	add	r3, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 8000f50:	f8d7 33e4 	ldr.w	r3, [r7, #996]	@ 0x3e4
 8000f54:	2b13      	cmp	r3, #19
 8000f56:	d9ef      	bls.n	8000f38 <run_console+0x274>
				sprintf(print_buf, "%lu\n", num);
 8000f58:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000f5c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4955      	ldr	r1, [pc, #340]	@ (80010bc <run_console+0x3f8>)
 8000f66:	f8d7 0338 	ldr.w	r0, [r7, #824]	@ 0x338
 8000f6a:	f00b fb49 	bl	800c600 <siprintf>
				WriteString(print_buf);
 8000f6e:	f8d7 0338 	ldr.w	r0, [r7, #824]	@ 0x338
 8000f72:	f001 f8d4 	bl	800211e <WriteString>
				free(print_buf);
 8000f76:	f8d7 0338 	ldr.w	r0, [r7, #824]	@ 0x338
 8000f7a:	f00a feb5 	bl	800bce8 <free>

				for (long i = 0; i < 100; i++) {
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 8000f84:	e059      	b.n	800103a <run_console+0x376>
					{
						char value = ((char*) num)[i];
 8000f86:	f8d7 23e0 	ldr.w	r2, [r7, #992]	@ 0x3e0
 8000f8a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000f8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
						char buf2[5] = {
								value / 100 + '0', value / 10 % 10 + '0', value % 10 + '0', ' ', '\0'
 8000f9c:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8000fa0:	4a47      	ldr	r2, [pc, #284]	@ (80010c0 <run_console+0x3fc>)
 8000fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	3330      	adds	r3, #48	@ 0x30
 8000fac:	b2da      	uxtb	r2, r3
						char buf2[5] = {
 8000fae:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000fb2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000fb6:	701a      	strb	r2, [r3, #0]
								value / 100 + '0', value / 10 % 10 + '0', value % 10 + '0', ' ', '\0'
 8000fb8:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8000fbc:	4a41      	ldr	r2, [pc, #260]	@ (80010c4 <run_console+0x400>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	08db      	lsrs	r3, r3, #3
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <run_console+0x400>)
 8000fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fcc:	08d9      	lsrs	r1, r3, #3
 8000fce:	460b      	mov	r3, r1
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	3330      	adds	r3, #48	@ 0x30
 8000fdc:	b2da      	uxtb	r2, r3
						char buf2[5] = {
 8000fde:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000fe2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000fe6:	705a      	strb	r2, [r3, #1]
								value / 100 + '0', value / 10 % 10 + '0', value % 10 + '0', ' ', '\0'
 8000fe8:	f897 2337 	ldrb.w	r2, [r7, #823]	@ 0x337
 8000fec:	4b35      	ldr	r3, [pc, #212]	@ (80010c4 <run_console+0x400>)
 8000fee:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff2:	08d9      	lsrs	r1, r3, #3
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	3330      	adds	r3, #48	@ 0x30
 8001002:	b2da      	uxtb	r2, r3
						char buf2[5] = {
 8001004:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001008:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800100c:	709a      	strb	r2, [r3, #2]
 800100e:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001012:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001016:	2220      	movs	r2, #32
 8001018:	70da      	strb	r2, [r3, #3]
 800101a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800101e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001022:	2200      	movs	r2, #0
 8001024:	711a      	strb	r2, [r3, #4]
						};

						WriteString(buf2);
 8001026:	f507 732d 	add.w	r3, r7, #692	@ 0x2b4
 800102a:	4618      	mov	r0, r3
 800102c:	f001 f877 	bl	800211e <WriteString>
				for (long i = 0; i < 100; i++) {
 8001030:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 8001034:	3301      	adds	r3, #1
 8001036:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 800103a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	@ 0x3e0
 800103e:	2b63      	cmp	r3, #99	@ 0x63
 8001040:	dda1      	ble.n	8000f86 <run_console+0x2c2>
					}
				}
				free(buf);
 8001042:	f8d7 0340 	ldr.w	r0, [r7, #832]	@ 0x340
 8001046:	f00a fe4f 	bl	800bce8 <free>
				WriteString(">");
 800104a:	481f      	ldr	r0, [pc, #124]	@ (80010c8 <run_console+0x404>)
 800104c:	f001 f867 	bl	800211e <WriteString>
 8001050:	e655      	b.n	8000cfe <run_console+0x3a>
			}
			else {
				WriteString("\033[31mCommand not found\033[0m\n>");
 8001052:	481e      	ldr	r0, [pc, #120]	@ (80010cc <run_console+0x408>)
 8001054:	f001 f863 	bl	800211e <WriteString>
 8001058:	e651      	b.n	8000cfe <run_console+0x3a>
 800105a:	bf00      	nop
 800105c:	0800fad0 	.word	0x0800fad0
 8001060:	0800fad8 	.word	0x0800fad8
 8001064:	0800fae4 	.word	0x0800fae4
 8001068:	0800faec 	.word	0x0800faec
 800106c:	0800fb00 	.word	0x0800fb00
 8001070:	0800fb08 	.word	0x0800fb08
 8001074:	0800fb74 	.word	0x0800fb74
 8001078:	0800fb7c 	.word	0x0800fb7c
 800107c:	0800fbc4 	.word	0x0800fbc4
 8001080:	0800fbc8 	.word	0x0800fbc8
 8001084:	0800fbec 	.word	0x0800fbec
 8001088:	200000e8 	.word	0x200000e8
 800108c:	0800fbf8 	.word	0x0800fbf8
 8001090:	0800fc00 	.word	0x0800fc00
 8001094:	0800fc10 	.word	0x0800fc10
 8001098:	0800fc18 	.word	0x0800fc18
 800109c:	0800fc34 	.word	0x0800fc34
 80010a0:	0800fc38 	.word	0x0800fc38
 80010a4:	90000004 	.word	0x90000004
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	0800fc3c 	.word	0x0800fc3c
 80010b0:	0800fc44 	.word	0x0800fc44
 80010b4:	0800fc58 	.word	0x0800fc58
 80010b8:	0800fc5c 	.word	0x0800fc5c
 80010bc:	0800fc64 	.word	0x0800fc64
 80010c0:	51eb851f 	.word	0x51eb851f
 80010c4:	cccccccd 	.word	0xcccccccd
 80010c8:	0800fc6c 	.word	0x0800fc6c
 80010cc:	0800fc70 	.word	0x0800fc70
			}
		} else if (current_menu == FLASH_MENU) {
 80010d0:	f897 33ef 	ldrb.w	r3, [r7, #1007]	@ 0x3ef
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	f040 864b 	bne.w	8001d70 <run_console+0x10ac>
			if (strcmp(command, "exit") == 0) {
 80010da:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80010de:	49ca      	ldr	r1, [pc, #808]	@ (8001408 <run_console+0x744>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f875 	bl	80001d0 <strcmp>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d106      	bne.n	80010fa <run_console+0x436>
				current_menu = MAIN_MENU;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f887 33ef 	strb.w	r3, [r7, #1007]	@ 0x3ef
				WriteString("\n>");
 80010f2:	48c6      	ldr	r0, [pc, #792]	@ (800140c <run_console+0x748>)
 80010f4:	f001 f813 	bl	800211e <WriteString>
 80010f8:	e601      	b.n	8000cfe <run_console+0x3a>
			} else if(strcmp(command, "status1") == 0) {
 80010fa:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80010fe:	49c4      	ldr	r1, [pc, #784]	@ (8001410 <run_console+0x74c>)
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f865 	bl	80001d0 <strcmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d112      	bne.n	8001132 <run_console+0x46e>
				uint8_t status = CSP_QSPI_Read_StatusRegister1();
 800110c:	f001 fe4e 	bl	8002dac <CSP_QSPI_Read_StatusRegister1>
 8001110:	4603      	mov	r3, r0
 8001112:	f887 3344 	strb.w	r3, [r7, #836]	@ 0x344
				char buf[20];
				sprintf(buf, "%d\nfrw>", (int) status);
 8001116:	f897 2344 	ldrb.w	r2, [r7, #836]	@ 0x344
 800111a:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 800111e:	49bd      	ldr	r1, [pc, #756]	@ (8001414 <run_console+0x750>)
 8001120:	4618      	mov	r0, r3
 8001122:	f00b fa6d 	bl	800c600 <siprintf>
				WriteString(buf);
 8001126:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fff7 	bl	800211e <WriteString>
 8001130:	e5e5      	b.n	8000cfe <run_console+0x3a>
			} else if(strcmp(command, "status2") == 0) {
 8001132:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001136:	49b8      	ldr	r1, [pc, #736]	@ (8001418 <run_console+0x754>)
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f849 	bl	80001d0 <strcmp>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d112      	bne.n	800116a <run_console+0x4a6>
				uint8_t status = CSP_QSPI_Read_StatusRegister2();
 8001144:	f001 fdf8 	bl	8002d38 <CSP_QSPI_Read_StatusRegister2>
 8001148:	4603      	mov	r3, r0
 800114a:	f887 3345 	strb.w	r3, [r7, #837]	@ 0x345
				char buf[20];
				sprintf(buf, "%d\nfrw>", (int) status);
 800114e:	f897 2345 	ldrb.w	r2, [r7, #837]	@ 0x345
 8001152:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001156:	49af      	ldr	r1, [pc, #700]	@ (8001414 <run_console+0x750>)
 8001158:	4618      	mov	r0, r3
 800115a:	f00b fa51 	bl	800c600 <siprintf>
				WriteString(buf);
 800115e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001162:	4618      	mov	r0, r3
 8001164:	f000 ffdb 	bl	800211e <WriteString>
 8001168:	e5c9      	b.n	8000cfe <run_console+0x3a>
			} else if(strcmp(command, "status3") == 0) {
 800116a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800116e:	49ab      	ldr	r1, [pc, #684]	@ (800141c <run_console+0x758>)
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f82d 	bl	80001d0 <strcmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d112      	bne.n	80011a2 <run_console+0x4de>
				uint8_t status = CSP_QSPI_Read_StatusRegister3();
 800117c:	f001 fda2 	bl	8002cc4 <CSP_QSPI_Read_StatusRegister3>
 8001180:	4603      	mov	r3, r0
 8001182:	f887 3346 	strb.w	r3, [r7, #838]	@ 0x346
				char buf[20];
				sprintf(buf, "%d\nfrw>", (int) status);
 8001186:	f897 2346 	ldrb.w	r2, [r7, #838]	@ 0x346
 800118a:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 800118e:	49a1      	ldr	r1, [pc, #644]	@ (8001414 <run_console+0x750>)
 8001190:	4618      	mov	r0, r3
 8001192:	f00b fa35 	bl	800c600 <siprintf>
				WriteString(buf);
 8001196:	f507 731e 	add.w	r3, r7, #632	@ 0x278
 800119a:	4618      	mov	r0, r3
 800119c:	f000 ffbf 	bl	800211e <WriteString>
 80011a0:	e5ad      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp(command, "P") == 0) {
 80011a2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80011a6:	499e      	ldr	r1, [pc, #632]	@ (8001420 <run_console+0x75c>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f811 	bl	80001d0 <strcmp>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f43f ada4 	beq.w	8000cfe <run_console+0x3a>

			} else if (strcmp(command, "PWR ON") == 0) {
 80011b6:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80011ba:	499a      	ldr	r1, [pc, #616]	@ (8001424 <run_console+0x760>)
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f807 	bl	80001d0 <strcmp>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <run_console+0x518>
				HAL_GPIO_WritePin(PWR_PERPH_GPIO_Port, PWR_PERPH_Pin, SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ce:	4896      	ldr	r0, [pc, #600]	@ (8001428 <run_console+0x764>)
 80011d0:	f002 fd74 	bl	8003cbc <HAL_GPIO_WritePin>
				WriteString("\nfrw>");
 80011d4:	4895      	ldr	r0, [pc, #596]	@ (800142c <run_console+0x768>)
 80011d6:	f000 ffa2 	bl	800211e <WriteString>
 80011da:	e590      	b.n	8000cfe <run_console+0x3a>
			} else if (strcmp(command, "PWR OFF") == 0) {
 80011dc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80011e0:	4993      	ldr	r1, [pc, #588]	@ (8001430 <run_console+0x76c>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7fe fff4 	bl	80001d0 <strcmp>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <run_console+0x53e>
				HAL_GPIO_WritePin(PWR_PERPH_GPIO_Port, PWR_PERPH_Pin, RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011f4:	488c      	ldr	r0, [pc, #560]	@ (8001428 <run_console+0x764>)
 80011f6:	f002 fd61 	bl	8003cbc <HAL_GPIO_WritePin>
				WriteString("\nfrw>");
 80011fa:	488c      	ldr	r0, [pc, #560]	@ (800142c <run_console+0x768>)
 80011fc:	f000 ff8f 	bl	800211e <WriteString>
 8001200:	e57d      	b.n	8000cfe <run_console+0x3a>
			}
			else if (size >= 2 && command[0] == 'R' && command[1] == 'S') {
 8001202:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001206:	2b01      	cmp	r3, #1
 8001208:	f340 8126 	ble.w	8001458 <run_console+0x794>
 800120c:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001210:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b52      	cmp	r3, #82	@ 0x52
 8001218:	f040 811e 	bne.w	8001458 <run_console+0x794>
 800121c:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001220:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001224:	785b      	ldrb	r3, [r3, #1]
 8001226:	2b53      	cmp	r3, #83	@ 0x53
 8001228:	f040 8116 	bne.w	8001458 <run_console+0x794>
				if (strcmp(strtok(command, " "), "RS") != 0) {
 800122c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001230:	4980      	ldr	r1, [pc, #512]	@ (8001434 <run_console+0x770>)
 8001232:	4618      	mov	r0, r3
 8001234:	f00b fa7c 	bl	800c730 <strtok>
 8001238:	4603      	mov	r3, r0
 800123a:	497f      	ldr	r1, [pc, #508]	@ (8001438 <run_console+0x774>)
 800123c:	4618      	mov	r0, r3
 800123e:	f7fe ffc7 	bl	80001d0 <strcmp>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <run_console+0x58e>
					WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 8001248:	487c      	ldr	r0, [pc, #496]	@ (800143c <run_console+0x778>)
 800124a:	f000 ff68 	bl	800211e <WriteString>
					continue;
 800124e:	f000 be50 	b.w	8001ef2 <run_console+0x122e>
				}
				char* token = strtok(NULL, " ");
 8001252:	4978      	ldr	r1, [pc, #480]	@ (8001434 <run_console+0x770>)
 8001254:	2000      	movs	r0, #0
 8001256:	f00b fa6b 	bl	800c730 <strtok>
 800125a:	f8c7 03a0 	str.w	r0, [r7, #928]	@ 0x3a0
				char* parse_end;
				long read_start = strtol(token, &parse_end, 10);
 800125e:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8001262:	220a      	movs	r2, #10
 8001264:	4619      	mov	r1, r3
 8001266:	f8d7 03a0 	ldr.w	r0, [r7, #928]	@ 0x3a0
 800126a:	f00a fe6f 	bl	800bf4c <strtol>
 800126e:	f8c7 039c 	str.w	r0, [r7, #924]	@ 0x39c
				if (*parse_end != '\0') {
 8001272:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001276:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <run_console+0x5c8>
					WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 8001282:	486e      	ldr	r0, [pc, #440]	@ (800143c <run_console+0x778>)
 8001284:	f000 ff4b 	bl	800211e <WriteString>
					continue;
 8001288:	f000 be33 	b.w	8001ef2 <run_console+0x122e>
				}

				token = strtok(NULL, " ");
 800128c:	4969      	ldr	r1, [pc, #420]	@ (8001434 <run_console+0x770>)
 800128e:	2000      	movs	r0, #0
 8001290:	f00b fa4e 	bl	800c730 <strtok>
 8001294:	f8c7 03a0 	str.w	r0, [r7, #928]	@ 0x3a0
				long read_size = strtol(token, &parse_end, 10);
 8001298:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 800129c:	220a      	movs	r2, #10
 800129e:	4619      	mov	r1, r3
 80012a0:	f8d7 03a0 	ldr.w	r0, [r7, #928]	@ 0x3a0
 80012a4:	f00a fe52 	bl	800bf4c <strtol>
 80012a8:	f8c7 0398 	str.w	r0, [r7, #920]	@ 0x398
				if (*parse_end != '\0') {
 80012ac:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80012b0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <run_console+0x602>
					WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 80012bc:	485f      	ldr	r0, [pc, #380]	@ (800143c <run_console+0x778>)
 80012be:	f000 ff2e 	bl	800211e <WriteString>
					continue;
 80012c2:	f000 be16 	b.w	8001ef2 <run_console+0x122e>
				}

				//uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)

				if (read_start < 0 || read_start >= N25Q128A_FLASH_SIZE) {
 80012c6:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db04      	blt.n	80012d8 <run_console+0x614>
 80012ce:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80012d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80012d6:	db04      	blt.n	80012e2 <run_console+0x61e>
					WriteString("\033[31mInvalid Start\033[0m\nfrw>");
 80012d8:	4859      	ldr	r0, [pc, #356]	@ (8001440 <run_console+0x77c>)
 80012da:	f000 ff20 	bl	800211e <WriteString>
					continue;
 80012de:	f000 be08 	b.w	8001ef2 <run_console+0x122e>
				}

				if (read_size < 0 || read_start + read_size >= N25Q128A_FLASH_SIZE) {
 80012e2:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db07      	blt.n	80012fa <run_console+0x636>
 80012ea:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 80012ee:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80012f2:	4413      	add	r3, r2
 80012f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80012f8:	db04      	blt.n	8001304 <run_console+0x640>
					WriteString("\033[31mInvalid Size\033[0m\nfrw>");
 80012fa:	4852      	ldr	r0, [pc, #328]	@ (8001444 <run_console+0x780>)
 80012fc:	f000 ff0f 	bl	800211e <WriteString>
					continue;
 8001300:	f000 bdf7 	b.w	8001ef2 <run_console+0x122e>
				}

				char* buf = (char*) malloc(read_size);
 8001304:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001308:	4618      	mov	r0, r3
 800130a:	f00a fce5 	bl	800bcd8 <malloc>
 800130e:	4603      	mov	r3, r0
 8001310:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
				if (buf == NULL) {
 8001314:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8001318:	2b00      	cmp	r3, #0
 800131a:	d104      	bne.n	8001326 <run_console+0x662>
					WriteString("\033[31mOut of Memory\033[0m\nfrw>");
 800131c:	484a      	ldr	r0, [pc, #296]	@ (8001448 <run_console+0x784>)
 800131e:	f000 fefe 	bl	800211e <WriteString>
					continue;
 8001322:	f000 bde6 	b.w	8001ef2 <run_console+0x122e>
				}

				for (size_t i = 0; i < read_size; i++) buf[i] = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800132c:	e00b      	b.n	8001346 <run_console+0x682>
 800132e:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8001332:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8001336:	4413      	add	r3, r2
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8001340:	3301      	adds	r3, #1
 8001342:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8001346:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 800134a:	f8d7 23dc 	ldr.w	r2, [r7, #988]	@ 0x3dc
 800134e:	429a      	cmp	r2, r3
 8001350:	d3ed      	bcc.n	800132e <run_console+0x66a>

				uint8_t status = CSP_QSPI_Read(buf, read_start, read_size);
 8001352:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001356:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 800135a:	4619      	mov	r1, r3
 800135c:	f8d7 0394 	ldr.w	r0, [r7, #916]	@ 0x394
 8001360:	f001 fe0c 	bl	8002f7c <CSP_QSPI_Read>
 8001364:	4603      	mov	r3, r0
 8001366:	f887 3393 	strb.w	r3, [r7, #915]	@ 0x393

				if (status != HAL_OK) {
 800136a:	f897 3393 	ldrb.w	r3, [r7, #915]	@ 0x393
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00d      	beq.n	800138e <run_console+0x6ca>
					char num_parse[10];
					sprintf(num_parse, "%d", (int) status);
 8001372:	f897 2393 	ldrb.w	r2, [r7, #915]	@ 0x393
 8001376:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800137a:	4934      	ldr	r1, [pc, #208]	@ (800144c <run_console+0x788>)
 800137c:	4618      	mov	r0, r3
 800137e:	f00b f93f 	bl	800c600 <siprintf>
					WriteString(num_parse);
 8001382:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fec9 	bl	800211e <WriteString>
 800138c:	e032      	b.n	80013f4 <run_console+0x730>
				} else {
					for (size_t i = 0; i < read_size; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
 8001394:	e028      	b.n	80013e8 <run_console+0x724>
						char num_parse[20] = {0};
 8001396:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800139a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	3304      	adds	r3, #4
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
						sprintf(num_parse, "%d: %d\n", (int) (read_start + i), (int) buf[i]);
 80013ae:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 80013b2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80013b6:	4413      	add	r3, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 80013be:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	f507 7015 	add.w	r0, r7, #596	@ 0x254
 80013ca:	460a      	mov	r2, r1
 80013cc:	4920      	ldr	r1, [pc, #128]	@ (8001450 <run_console+0x78c>)
 80013ce:	f00b f917 	bl	800c600 <siprintf>
						_WriteString(num_parse, 1);
 80013d2:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 80013d6:	2101      	movs	r1, #1
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 fe8d 	bl	80020f8 <_WriteString>
					for (size_t i = 0; i < read_size; i++) {
 80013de:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80013e2:	3301      	adds	r3, #1
 80013e4:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
 80013e8:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80013ec:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3d0      	bcc.n	8001396 <run_console+0x6d2>
					}
				}
				WriteString("frw>");
 80013f4:	4817      	ldr	r0, [pc, #92]	@ (8001454 <run_console+0x790>)
 80013f6:	f000 fe92 	bl	800211e <WriteString>

				free(buf);
 80013fa:	f8d7 0394 	ldr.w	r0, [r7, #916]	@ 0x394
 80013fe:	f00a fc73 	bl	800bce8 <free>
			else if (size >= 2 && command[0] == 'R' && command[1] == 'S') {
 8001402:	f000 bd76 	b.w	8001ef2 <run_console+0x122e>
 8001406:	bf00      	nop
 8001408:	0800fc90 	.word	0x0800fc90
 800140c:	0800fc34 	.word	0x0800fc34
 8001410:	0800fc98 	.word	0x0800fc98
 8001414:	0800fca0 	.word	0x0800fca0
 8001418:	0800fca8 	.word	0x0800fca8
 800141c:	0800fcb0 	.word	0x0800fcb0
 8001420:	0800fcb8 	.word	0x0800fcb8
 8001424:	0800fcbc 	.word	0x0800fcbc
 8001428:	48000400 	.word	0x48000400
 800142c:	0800fcc4 	.word	0x0800fcc4
 8001430:	0800fccc 	.word	0x0800fccc
 8001434:	0800fcd4 	.word	0x0800fcd4
 8001438:	0800fcd8 	.word	0x0800fcd8
 800143c:	0800fcdc 	.word	0x0800fcdc
 8001440:	0800fcfc 	.word	0x0800fcfc
 8001444:	0800fd18 	.word	0x0800fd18
 8001448:	0800fd34 	.word	0x0800fd34
 800144c:	0800fd50 	.word	0x0800fd50
 8001450:	0800fd54 	.word	0x0800fd54
 8001454:	0800fd5c 	.word	0x0800fd5c
			} else if (command[0] == 'R') {
 8001458:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 800145c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b52      	cmp	r3, #82	@ 0x52
 8001464:	f040 80b3 	bne.w	80015ce <run_console+0x90a>
				if (strcmp(strtok(command, " "), "R") != 0) {
 8001468:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800146c:	49c6      	ldr	r1, [pc, #792]	@ (8001788 <run_console+0xac4>)
 800146e:	4618      	mov	r0, r3
 8001470:	f00b f95e 	bl	800c730 <strtok>
 8001474:	4603      	mov	r3, r0
 8001476:	49c5      	ldr	r1, [pc, #788]	@ (800178c <run_console+0xac8>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe fea9 	bl	80001d0 <strcmp>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <run_console+0x7cc>
					_WriteString("\033[31mInvalid Format\033[0m\nfrw>", 1);
 8001484:	2101      	movs	r1, #1
 8001486:	48c2      	ldr	r0, [pc, #776]	@ (8001790 <run_console+0xacc>)
 8001488:	f000 fe36 	bl	80020f8 <_WriteString>
					continue;
 800148c:	f000 bd31 	b.w	8001ef2 <run_console+0x122e>
				}
				char* token = strtok(NULL, " ");
 8001490:	49bd      	ldr	r1, [pc, #756]	@ (8001788 <run_console+0xac4>)
 8001492:	2000      	movs	r0, #0
 8001494:	f00b f94c 	bl	800c730 <strtok>
 8001498:	f8c7 0354 	str.w	r0, [r7, #852]	@ 0x354
				char* parse_end;
				long read_start = strtol(token, &parse_end, 10);
 800149c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80014a0:	220a      	movs	r2, #10
 80014a2:	4619      	mov	r1, r3
 80014a4:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 80014a8:	f00a fd50 	bl	800bf4c <strtol>
 80014ac:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350
				if (*parse_end != '\0') {
 80014b0:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80014b4:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <run_console+0x808>
					_WriteString("\033[31mInvalid Format\033[0m\nfrw>", 1);
 80014c0:	2101      	movs	r1, #1
 80014c2:	48b3      	ldr	r0, [pc, #716]	@ (8001790 <run_console+0xacc>)
 80014c4:	f000 fe18 	bl	80020f8 <_WriteString>
					continue;
 80014c8:	f000 bd13 	b.w	8001ef2 <run_console+0x122e>
				}

				token = strtok(NULL, " ");
 80014cc:	49ae      	ldr	r1, [pc, #696]	@ (8001788 <run_console+0xac4>)
 80014ce:	2000      	movs	r0, #0
 80014d0:	f00b f92e 	bl	800c730 <strtok>
 80014d4:	f8c7 0354 	str.w	r0, [r7, #852]	@ 0x354
				long read_size = strtol(token, &parse_end, 10);
 80014d8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80014dc:	220a      	movs	r2, #10
 80014de:	4619      	mov	r1, r3
 80014e0:	f8d7 0354 	ldr.w	r0, [r7, #852]	@ 0x354
 80014e4:	f00a fd32 	bl	800bf4c <strtol>
 80014e8:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c
				if (*parse_end != '\0') {
 80014ec:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80014f0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <run_console+0x844>
					_WriteString("\033[31mInvalid Format\033[0m\nfrw>", 1);
 80014fc:	2101      	movs	r1, #1
 80014fe:	48a4      	ldr	r0, [pc, #656]	@ (8001790 <run_console+0xacc>)
 8001500:	f000 fdfa 	bl	80020f8 <_WriteString>
					continue;
 8001504:	f000 bcf5 	b.w	8001ef2 <run_console+0x122e>
				}

				//uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)

				if (read_start < 0 || read_start >= N25Q128A_FLASH_SIZE) {
 8001508:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800150c:	2b00      	cmp	r3, #0
 800150e:	db04      	blt.n	800151a <run_console+0x856>
 8001510:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001514:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001518:	db05      	blt.n	8001526 <run_console+0x862>
					_WriteString("\033[31mInvalid Start\033[0m\nfrw>", 1);
 800151a:	2101      	movs	r1, #1
 800151c:	489d      	ldr	r0, [pc, #628]	@ (8001794 <run_console+0xad0>)
 800151e:	f000 fdeb 	bl	80020f8 <_WriteString>
					continue;
 8001522:	f000 bce6 	b.w	8001ef2 <run_console+0x122e>
				}

				if (read_size < 0 || read_start + read_size >= N25Q128A_FLASH_SIZE) {
 8001526:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800152a:	2b00      	cmp	r3, #0
 800152c:	db07      	blt.n	800153e <run_console+0x87a>
 800152e:	f8d7 2350 	ldr.w	r2, [r7, #848]	@ 0x350
 8001532:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001536:	4413      	add	r3, r2
 8001538:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800153c:	db05      	blt.n	800154a <run_console+0x886>
					_WriteString("\033[31mInvalid Size\033[0m\nfrw>", 1);
 800153e:	2101      	movs	r1, #1
 8001540:	4895      	ldr	r0, [pc, #596]	@ (8001798 <run_console+0xad4>)
 8001542:	f000 fdd9 	bl	80020f8 <_WriteString>
					continue;
 8001546:	f000 bcd4 	b.w	8001ef2 <run_console+0x122e>
				}


				char* buf = (char*) malloc(read_size);
 800154a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800154e:	4618      	mov	r0, r3
 8001550:	f00a fbc2 	bl	800bcd8 <malloc>
 8001554:	4603      	mov	r3, r0
 8001556:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
				if (buf == NULL) {
 800155a:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <run_console+0x8aa>
					_WriteString("\033[31mOut of Memory\033[0m\nfrw>", 1);
 8001562:	2101      	movs	r1, #1
 8001564:	488d      	ldr	r0, [pc, #564]	@ (800179c <run_console+0xad8>)
 8001566:	f000 fdc7 	bl	80020f8 <_WriteString>
					continue;
 800156a:	f000 bcc2 	b.w	8001ef2 <run_console+0x122e>
				}

				uint8_t status = CSP_QSPI_Read(buf, read_start, read_size);
 800156e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001572:	f8d7 234c 	ldr.w	r2, [r7, #844]	@ 0x34c
 8001576:	4619      	mov	r1, r3
 8001578:	f8d7 0348 	ldr.w	r0, [r7, #840]	@ 0x348
 800157c:	f001 fcfe 	bl	8002f7c <CSP_QSPI_Read>
 8001580:	4603      	mov	r3, r0
 8001582:	f887 3347 	strb.w	r3, [r7, #839]	@ 0x347

				if (status != HAL_OK) {
 8001586:	f897 3347 	ldrb.w	r3, [r7, #839]	@ 0x347
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00e      	beq.n	80015ac <run_console+0x8e8>
					char num_parse[10];
					sprintf(num_parse, "%d", (int) status);
 800158e:	f897 2347 	ldrb.w	r2, [r7, #839]	@ 0x347
 8001592:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8001596:	4982      	ldr	r1, [pc, #520]	@ (80017a0 <run_console+0xadc>)
 8001598:	4618      	mov	r0, r3
 800159a:	f00b f831 	bl	800c600 <siprintf>
					_WriteString(num_parse, 1);
 800159e:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80015a2:	2101      	movs	r1, #1
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 fda7 	bl	80020f8 <_WriteString>
 80015aa:	e007      	b.n	80015bc <run_console+0x8f8>
				} else {
					CDC_Transmit_FS(buf, read_size);
 80015ac:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	f8d7 0348 	ldr.w	r0, [r7, #840]	@ 0x348
 80015b8:	f009 fe00 	bl	800b1bc <CDC_Transmit_FS>
				}
				WriteString("\nfrw>");
 80015bc:	4879      	ldr	r0, [pc, #484]	@ (80017a4 <run_console+0xae0>)
 80015be:	f000 fdae 	bl	800211e <WriteString>

				free(buf);
 80015c2:	f8d7 0348 	ldr.w	r0, [r7, #840]	@ 0x348
 80015c6:	f00a fb8f 	bl	800bce8 <free>
 80015ca:	f7ff bb98 	b.w	8000cfe <run_console+0x3a>
			}
			else if (size >= 2 && command[0] == 'W' && command[1] == 'S') {
 80015ce:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	f340 8140 	ble.w	8001858 <run_console+0xb94>
 80015d8:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80015dc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b57      	cmp	r3, #87	@ 0x57
 80015e4:	f040 8138 	bne.w	8001858 <run_console+0xb94>
 80015e8:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80015ec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	2b53      	cmp	r3, #83	@ 0x53
 80015f4:	f040 8130 	bne.w	8001858 <run_console+0xb94>
//uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
				if (strcmp(strtok(command, " "), "WS") != 0) {
 80015f8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80015fc:	4962      	ldr	r1, [pc, #392]	@ (8001788 <run_console+0xac4>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f00b f896 	bl	800c730 <strtok>
 8001604:	4603      	mov	r3, r0
 8001606:	4968      	ldr	r1, [pc, #416]	@ (80017a8 <run_console+0xae4>)
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe fde1 	bl	80001d0 <strcmp>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d004      	beq.n	800161e <run_console+0x95a>
					WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 8001614:	485e      	ldr	r0, [pc, #376]	@ (8001790 <run_console+0xacc>)
 8001616:	f000 fd82 	bl	800211e <WriteString>
					continue;
 800161a:	f000 bc6a 	b.w	8001ef2 <run_console+0x122e>
				}
				char* token = strtok(NULL, " ");
 800161e:	495a      	ldr	r1, [pc, #360]	@ (8001788 <run_console+0xac4>)
 8001620:	2000      	movs	r0, #0
 8001622:	f00b f885 	bl	800c730 <strtok>
 8001626:	f8c7 038c 	str.w	r0, [r7, #908]	@ 0x38c
				char* parse_end;
				long write_start = strtol(token, &parse_end, 10);
 800162a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800162e:	220a      	movs	r2, #10
 8001630:	4619      	mov	r1, r3
 8001632:	f8d7 038c 	ldr.w	r0, [r7, #908]	@ 0x38c
 8001636:	f00a fc89 	bl	800bf4c <strtol>
 800163a:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388
				if (*parse_end != '\0') {
 800163e:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001642:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d004      	beq.n	8001658 <run_console+0x994>
					WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 800164e:	4850      	ldr	r0, [pc, #320]	@ (8001790 <run_console+0xacc>)
 8001650:	f000 fd65 	bl	800211e <WriteString>
					continue;
 8001654:	f000 bc4d 	b.w	8001ef2 <run_console+0x122e>
				}

				token = strtok(NULL, " ");
 8001658:	494b      	ldr	r1, [pc, #300]	@ (8001788 <run_console+0xac4>)
 800165a:	2000      	movs	r0, #0
 800165c:	f00b f868 	bl	800c730 <strtok>
 8001660:	f8c7 038c 	str.w	r0, [r7, #908]	@ 0x38c
				long write_size = strtol(token, &parse_end, 10);
 8001664:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001668:	220a      	movs	r2, #10
 800166a:	4619      	mov	r1, r3
 800166c:	f8d7 038c 	ldr.w	r0, [r7, #908]	@ 0x38c
 8001670:	f00a fc6c 	bl	800bf4c <strtol>
 8001674:	f8c7 0384 	str.w	r0, [r7, #900]	@ 0x384
				if (token == '\0' || *parse_end != '\0') {
 8001678:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <run_console+0x9cc>
 8001680:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001684:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <run_console+0x9d6>
					WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 8001690:	483f      	ldr	r0, [pc, #252]	@ (8001790 <run_console+0xacc>)
 8001692:	f000 fd44 	bl	800211e <WriteString>
					continue;
 8001696:	f000 bc2c 	b.w	8001ef2 <run_console+0x122e>
				}

				//uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)

				if (write_start < 0 || write_start >= N25Q128A_FLASH_SIZE) {
 800169a:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 800169e:	2b00      	cmp	r3, #0
 80016a0:	db04      	blt.n	80016ac <run_console+0x9e8>
 80016a2:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80016a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80016aa:	db04      	blt.n	80016b6 <run_console+0x9f2>
					WriteString("\033[31mInvalid Start\033[0m\nfrw>");
 80016ac:	4839      	ldr	r0, [pc, #228]	@ (8001794 <run_console+0xad0>)
 80016ae:	f000 fd36 	bl	800211e <WriteString>
					continue;
 80016b2:	f000 bc1e 	b.w	8001ef2 <run_console+0x122e>
				}

				if (write_size < 0 || write_start + write_size >= N25Q128A_FLASH_SIZE) {
 80016b6:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db07      	blt.n	80016ce <run_console+0xa0a>
 80016be:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 80016c2:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80016c6:	4413      	add	r3, r2
 80016c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80016cc:	db04      	blt.n	80016d8 <run_console+0xa14>
					WriteString("\033[31mInvalid Size\033[0m\nfrw>");
 80016ce:	4832      	ldr	r0, [pc, #200]	@ (8001798 <run_console+0xad4>)
 80016d0:	f000 fd25 	bl	800211e <WriteString>
					continue;
 80016d4:	f000 bc0d 	b.w	8001ef2 <run_console+0x122e>
				}

				char* write_buf = (char*) malloc(write_size);
 80016d8:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80016dc:	4618      	mov	r0, r3
 80016de:	f00a fafb 	bl	800bcd8 <malloc>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
				if (write_buf == NULL) {
 80016e8:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <run_console+0xa3a>
					WriteString("\033[31mOut of Memory\033[0m\nfrw>");
 80016f0:	482a      	ldr	r0, [pc, #168]	@ (800179c <run_console+0xad8>)
 80016f2:	f000 fd14 	bl	800211e <WriteString>
					continue;
 80016f6:	e3fc      	b.n	8001ef2 <run_console+0x122e>
				}

				while (Read(write_buf, write_size+1) == 0) HAL_Delay(10);
 80016f8:	200a      	movs	r0, #10
 80016fa:	f001 ffa9 	bl	8003650 <HAL_Delay>
 80016fe:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001702:	3301      	adds	r3, #1
 8001704:	4619      	mov	r1, r3
 8001706:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 800170a:	f000 fc53 	bl	8001fb4 <Read>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f1      	beq.n	80016f8 <run_console+0xa34>

				for (size_t i = 0; i < write_size; i++) {
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 800171a:	e04e      	b.n	80017ba <run_console+0xaf6>
					char* write_value;
					if (i == 0) write_value = strtok(write_buf, " ");
 800171c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d107      	bne.n	8001734 <run_console+0xa70>
 8001724:	4918      	ldr	r1, [pc, #96]	@ (8001788 <run_console+0xac4>)
 8001726:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 800172a:	f00b f801 	bl	800c730 <strtok>
 800172e:	f8c7 03cc 	str.w	r0, [r7, #972]	@ 0x3cc
 8001732:	e005      	b.n	8001740 <run_console+0xa7c>
					else write_value = strtok(NULL, " ");
 8001734:	4914      	ldr	r1, [pc, #80]	@ (8001788 <run_console+0xac4>)
 8001736:	2000      	movs	r0, #0
 8001738:	f00a fffa 	bl	800c730 <strtok>
 800173c:	f8c7 03cc 	str.w	r0, [r7, #972]	@ 0x3cc

					char* end_ptr;
					write_buf[i] = (char) strtol(write_value, &end_ptr, 10);
 8001740:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8001744:	220a      	movs	r2, #10
 8001746:	4619      	mov	r1, r3
 8001748:	f8d7 03cc 	ldr.w	r0, [r7, #972]	@ 0x3cc
 800174c:	f00a fbfe 	bl	800bf4c <strtol>
 8001750:	4601      	mov	r1, r0
 8001752:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 8001756:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 800175a:	4413      	add	r3, r2
 800175c:	b2ca      	uxtb	r2, r1
 800175e:	701a      	strb	r2, [r3, #0]
					if (*end_ptr != '\0') {
 8001760:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001764:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01f      	beq.n	80017b0 <run_console+0xaec>
						WriteString("\033[31mInvalid Value\033[0m\nfrw>");
 8001770:	480e      	ldr	r0, [pc, #56]	@ (80017ac <run_console+0xae8>)
 8001772:	f000 fcd4 	bl	800211e <WriteString>
						free(write_buf);
 8001776:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 800177a:	f00a fab5 	bl	800bce8 <free>
						write_buf = NULL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001784:	e01f      	b.n	80017c6 <run_console+0xb02>
 8001786:	bf00      	nop
 8001788:	0800fcd4 	.word	0x0800fcd4
 800178c:	0800fd64 	.word	0x0800fd64
 8001790:	0800fcdc 	.word	0x0800fcdc
 8001794:	0800fcfc 	.word	0x0800fcfc
 8001798:	0800fd18 	.word	0x0800fd18
 800179c:	0800fd34 	.word	0x0800fd34
 80017a0:	0800fd50 	.word	0x0800fd50
 80017a4:	0800fcc4 	.word	0x0800fcc4
 80017a8:	0800fd68 	.word	0x0800fd68
 80017ac:	0800fd6c 	.word	0x0800fd6c
				for (size_t i = 0; i < write_size; i++) {
 80017b0:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 80017b4:	3301      	adds	r3, #1
 80017b6:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 80017ba:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 80017be:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3aa      	bcc.n	800171c <run_console+0xa58>
						break;
					}
				}

				if (write_buf != NULL) {
 80017c6:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8369 	beq.w	8001ea2 <run_console+0x11de>
					if (CSP_QSPI_WriteMemory(write_buf, write_start, write_size) != HAL_OK) {
 80017d0:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80017d4:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 80017d8:	4619      	mov	r1, r3
 80017da:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80017de:	f001 fb53 	bl	8002e88 <CSP_QSPI_WriteMemory>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <run_console+0xb32>
						WriteString("\033[31mFailed to write to FLASH\033[0m\nfrw>");
 80017e8:	48c8      	ldr	r0, [pc, #800]	@ (8001b0c <run_console+0xe48>)
 80017ea:	f000 fc98 	bl	800211e <WriteString>
						free(write_buf);
 80017ee:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 80017f2:	f00a fa79 	bl	800bce8 <free>
					}
					WriteString("\nWrote\n");
 80017f6:	48c6      	ldr	r0, [pc, #792]	@ (8001b10 <run_console+0xe4c>)
 80017f8:	f000 fc91 	bl	800211e <WriteString>
					for (size_t i = 0; i < write_size; i++) {
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 8001802:	e01b      	b.n	800183c <run_console+0xb78>
						char num_parse[20];
						sprintf(num_parse, "%d: %d\n", (int) (write_start + i), (int) write_buf[i]);
 8001804:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8001808:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 800180c:	4413      	add	r3, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 8001814:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001818:	4413      	add	r3, r2
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f507 700a 	add.w	r0, r7, #552	@ 0x228
 8001820:	460a      	mov	r2, r1
 8001822:	49bc      	ldr	r1, [pc, #752]	@ (8001b14 <run_console+0xe50>)
 8001824:	f00a feec 	bl	800c600 <siprintf>
						WriteString(num_parse);
 8001828:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800182c:	4618      	mov	r0, r3
 800182e:	f000 fc76 	bl	800211e <WriteString>
					for (size_t i = 0; i < write_size; i++) {
 8001832:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001836:	3301      	adds	r3, #1
 8001838:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 800183c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001840:	f8d7 23c8 	ldr.w	r2, [r7, #968]	@ 0x3c8
 8001844:	429a      	cmp	r2, r3
 8001846:	d3dd      	bcc.n	8001804 <run_console+0xb40>
					}

					WriteString("frw>");
 8001848:	48b3      	ldr	r0, [pc, #716]	@ (8001b18 <run_console+0xe54>)
 800184a:	f000 fc68 	bl	800211e <WriteString>
					free(write_buf);
 800184e:	f8d7 03d4 	ldr.w	r0, [r7, #980]	@ 0x3d4
 8001852:	f00a fa49 	bl	800bce8 <free>
			else if (size >= 2 && command[0] == 'W' && command[1] == 'S') {
 8001856:	e324      	b.n	8001ea2 <run_console+0x11de>
				}
			}
			else if (size >= 2 && command[0] == 'W' && command[1] == 'H') {
 8001858:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 800185c:	2b01      	cmp	r3, #1
 800185e:	f340 8103 	ble.w	8001a68 <run_console+0xda4>
 8001862:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001866:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b57      	cmp	r3, #87	@ 0x57
 800186e:	f040 80fb 	bne.w	8001a68 <run_console+0xda4>
 8001872:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001876:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	2b48      	cmp	r3, #72	@ 0x48
 800187e:	f040 80f3 	bne.w	8001a68 <run_console+0xda4>
			//uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
							if (strcmp(strtok(command, " "), "WH") != 0) {
 8001882:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001886:	49a5      	ldr	r1, [pc, #660]	@ (8001b1c <run_console+0xe58>)
 8001888:	4618      	mov	r0, r3
 800188a:	f00a ff51 	bl	800c730 <strtok>
 800188e:	4603      	mov	r3, r0
 8001890:	49a3      	ldr	r1, [pc, #652]	@ (8001b20 <run_console+0xe5c>)
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fc9c 	bl	80001d0 <strcmp>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <run_console+0xbe2>
								WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 800189e:	48a1      	ldr	r0, [pc, #644]	@ (8001b24 <run_console+0xe60>)
 80018a0:	f000 fc3d 	bl	800211e <WriteString>
								continue;
 80018a4:	e325      	b.n	8001ef2 <run_console+0x122e>
							}
							char* token = strtok(NULL, " ");
 80018a6:	499d      	ldr	r1, [pc, #628]	@ (8001b1c <run_console+0xe58>)
 80018a8:	2000      	movs	r0, #0
 80018aa:	f00a ff41 	bl	800c730 <strtok>
 80018ae:	f8c7 0380 	str.w	r0, [r7, #896]	@ 0x380
							char* parse_end;
							long write_start = strtol(token, &parse_end, 10);
 80018b2:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80018b6:	220a      	movs	r2, #10
 80018b8:	4619      	mov	r1, r3
 80018ba:	f8d7 0380 	ldr.w	r0, [r7, #896]	@ 0x380
 80018be:	f00a fb45 	bl	800bf4c <strtol>
 80018c2:	f8c7 037c 	str.w	r0, [r7, #892]	@ 0x37c
							if (*parse_end != '\0') {
 80018c6:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80018ca:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <run_console+0xc1a>
								WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 80018d6:	4893      	ldr	r0, [pc, #588]	@ (8001b24 <run_console+0xe60>)
 80018d8:	f000 fc21 	bl	800211e <WriteString>
								continue;
 80018dc:	e309      	b.n	8001ef2 <run_console+0x122e>
							}

							token = strtok(NULL, " ");
 80018de:	498f      	ldr	r1, [pc, #572]	@ (8001b1c <run_console+0xe58>)
 80018e0:	2000      	movs	r0, #0
 80018e2:	f00a ff25 	bl	800c730 <strtok>
 80018e6:	f8c7 0380 	str.w	r0, [r7, #896]	@ 0x380
							long write_size = strtol(token, &parse_end, 10);
 80018ea:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 80018ee:	220a      	movs	r2, #10
 80018f0:	4619      	mov	r1, r3
 80018f2:	f8d7 0380 	ldr.w	r0, [r7, #896]	@ 0x380
 80018f6:	f00a fb29 	bl	800bf4c <strtol>
 80018fa:	f8c7 0378 	str.w	r0, [r7, #888]	@ 0x378
							if (*parse_end != '\0') {
 80018fe:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001902:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <run_console+0xc52>
								WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 800190e:	4885      	ldr	r0, [pc, #532]	@ (8001b24 <run_console+0xe60>)
 8001910:	f000 fc05 	bl	800211e <WriteString>
								continue;
 8001914:	e2ed      	b.n	8001ef2 <run_console+0x122e>
							}

							//uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)

							if (write_start < 0 || write_start >= N25Q128A_FLASH_SIZE) {
 8001916:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800191a:	2b00      	cmp	r3, #0
 800191c:	db04      	blt.n	8001928 <run_console+0xc64>
 800191e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001922:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001926:	db03      	blt.n	8001930 <run_console+0xc6c>
								WriteString("\033[31mInvalid Start\033[0m\nfrw>");
 8001928:	487f      	ldr	r0, [pc, #508]	@ (8001b28 <run_console+0xe64>)
 800192a:	f000 fbf8 	bl	800211e <WriteString>
								continue;
 800192e:	e2e0      	b.n	8001ef2 <run_console+0x122e>
							}

							if (write_size < 0 || write_start + write_size >= N25Q128A_FLASH_SIZE) {
 8001930:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001934:	2b00      	cmp	r3, #0
 8001936:	db07      	blt.n	8001948 <run_console+0xc84>
 8001938:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 800193c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001940:	4413      	add	r3, r2
 8001942:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001946:	db03      	blt.n	8001950 <run_console+0xc8c>
								WriteString("\033[31mInvalid Size\033[0m\nfrw>");
 8001948:	4878      	ldr	r0, [pc, #480]	@ (8001b2c <run_console+0xe68>)
 800194a:	f000 fbe8 	bl	800211e <WriteString>
								continue;
 800194e:	e2d0      	b.n	8001ef2 <run_console+0x122e>
							}

							char* write_buf = (char*) malloc(write_size*2);
 8001950:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4618      	mov	r0, r3
 8001958:	f00a f9be 	bl	800bcd8 <malloc>
 800195c:	4603      	mov	r3, r0
 800195e:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
							if (write_buf == NULL) {
 8001962:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <run_console+0xcb4>
								WriteString("\033[31mOut of Memory\033[0m\nfrw>");
 800196a:	4871      	ldr	r0, [pc, #452]	@ (8001b30 <run_console+0xe6c>)
 800196c:	f000 fbd7 	bl	800211e <WriteString>
								continue;
 8001970:	e2bf      	b.n	8001ef2 <run_console+0x122e>
							}


							while (ReadFill(write_buf, write_size*2) == 0) HAL_Delay(10);
 8001972:	200a      	movs	r0, #10
 8001974:	f001 fe6c 	bl	8003650 <HAL_Delay>
 8001978:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4619      	mov	r1, r3
 8001980:	f8d7 0374 	ldr.w	r0, [r7, #884]	@ 0x374
 8001984:	f000 fab8 	bl	8001ef8 <ReadFill>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f1      	beq.n	8001972 <run_console+0xcae>

							for (size_t i = 0; i < write_size; i++) {
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001994:	e042      	b.n	8001a1c <run_console+0xd58>
								char copy[] = {write_buf[i*2], write_buf[i*2+1], '\0'};
 8001996:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80019a0:	4413      	add	r3, r2
 80019a2:	781a      	ldrb	r2, [r3, #0]
 80019a4:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80019a8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	3301      	adds	r3, #1
 80019b6:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 80019ba:	4413      	add	r3, r2
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80019c2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80019c6:	705a      	strb	r2, [r3, #1]
 80019c8:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80019cc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80019d0:	2200      	movs	r2, #0
 80019d2:	709a      	strb	r2, [r3, #2]
								char* end;
								long value = strtol(copy, &end, 16);
 80019d4:	f507 7107 	add.w	r1, r7, #540	@ 0x21c
 80019d8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80019dc:	2210      	movs	r2, #16
 80019de:	4618      	mov	r0, r3
 80019e0:	f00a fab4 	bl	800bf4c <strtol>
 80019e4:	f8c7 0370 	str.w	r0, [r7, #880]	@ 0x370
								if (*end != '\0') {
 80019e8:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 80019ec:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <run_console+0xd3c>
									WriteString("\033[31mBad value\033[0m\nfrw>");
 80019f8:	484e      	ldr	r0, [pc, #312]	@ (8001b34 <run_console+0xe70>)
 80019fa:	f000 fb90 	bl	800211e <WriteString>
 80019fe:	e013      	b.n	8001a28 <run_console+0xd64>
									break;
								} else {
									write_buf[i] = value;
 8001a00:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8001a04:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8d7 2370 	ldr.w	r2, [r7, #880]	@ 0x370
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	701a      	strb	r2, [r3, #0]
							for (size_t i = 0; i < write_size; i++) {
 8001a12:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001a16:	3301      	adds	r3, #1
 8001a18:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001a1c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001a20:	f8d7 23c4 	ldr.w	r2, [r7, #964]	@ 0x3c4
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d3b6      	bcc.n	8001996 <run_console+0xcd2>
								}
							}

							if (write_buf != NULL) {
 8001a28:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 825f 	beq.w	8001ef0 <run_console+0x122c>
								if (CSP_QSPI_WriteMemory(write_buf, write_start, write_size) != HAL_OK) {
 8001a32:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001a36:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f8d7 0374 	ldr.w	r0, [r7, #884]	@ 0x374
 8001a40:	f001 fa22 	bl	8002e88 <CSP_QSPI_WriteMemory>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <run_console+0xd94>
									WriteString("\033[31mFailed to write to FLASH\033[0m\nfrw>");
 8001a4a:	4830      	ldr	r0, [pc, #192]	@ (8001b0c <run_console+0xe48>)
 8001a4c:	f000 fb67 	bl	800211e <WriteString>
									free(write_buf);
 8001a50:	f8d7 0374 	ldr.w	r0, [r7, #884]	@ 0x374
 8001a54:	f00a f948 	bl	800bce8 <free>
								}

								WriteString("frw>");
 8001a58:	482f      	ldr	r0, [pc, #188]	@ (8001b18 <run_console+0xe54>)
 8001a5a:	f000 fb60 	bl	800211e <WriteString>
								free(write_buf);
 8001a5e:	f8d7 0374 	ldr.w	r0, [r7, #884]	@ 0x374
 8001a62:	f00a f941 	bl	800bce8 <free>
			else if (size >= 2 && command[0] == 'W' && command[1] == 'H') {
 8001a66:	e243      	b.n	8001ef0 <run_console+0x122c>
							}
						}
			 else if (command[0] == 'W') {
 8001a68:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001a6c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b57      	cmp	r3, #87	@ 0x57
 8001a74:	f040 80bb 	bne.w	8001bee <run_console+0xf2a>
			//uint8_t CSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
							if (strcmp(strtok(command, " "), "W") != 0) {
 8001a78:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001a7c:	4927      	ldr	r1, [pc, #156]	@ (8001b1c <run_console+0xe58>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f00a fe56 	bl	800c730 <strtok>
 8001a84:	4603      	mov	r3, r0
 8001a86:	492c      	ldr	r1, [pc, #176]	@ (8001b38 <run_console+0xe74>)
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fba1 	bl	80001d0 <strcmp>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <run_console+0xdd8>
								WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 8001a94:	4823      	ldr	r0, [pc, #140]	@ (8001b24 <run_console+0xe60>)
 8001a96:	f000 fb42 	bl	800211e <WriteString>
								continue;
 8001a9a:	e22a      	b.n	8001ef2 <run_console+0x122e>
							}
							char* token = strtok(NULL, " ");
 8001a9c:	491f      	ldr	r1, [pc, #124]	@ (8001b1c <run_console+0xe58>)
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f00a fe46 	bl	800c730 <strtok>
 8001aa4:	f8c7 0360 	str.w	r0, [r7, #864]	@ 0x360
							char* parse_end;
							long write_start = strtol(token, &parse_end, 10);
 8001aa8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001aac:	220a      	movs	r2, #10
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f8d7 0360 	ldr.w	r0, [r7, #864]	@ 0x360
 8001ab4:	f00a fa4a 	bl	800bf4c <strtol>
 8001ab8:	f8c7 035c 	str.w	r0, [r7, #860]	@ 0x35c
							if (*parse_end != '\0') {
 8001abc:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001ac0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <run_console+0xe10>
								WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 8001acc:	4815      	ldr	r0, [pc, #84]	@ (8001b24 <run_console+0xe60>)
 8001ace:	f000 fb26 	bl	800211e <WriteString>
								continue;
 8001ad2:	e20e      	b.n	8001ef2 <run_console+0x122e>
							}

							token = strtok(NULL, " ");
 8001ad4:	4911      	ldr	r1, [pc, #68]	@ (8001b1c <run_console+0xe58>)
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f00a fe2a 	bl	800c730 <strtok>
 8001adc:	f8c7 0360 	str.w	r0, [r7, #864]	@ 0x360
							long write_size = strtol(token, &parse_end, 10);
 8001ae0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001ae4:	220a      	movs	r2, #10
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f8d7 0360 	ldr.w	r0, [r7, #864]	@ 0x360
 8001aec:	f00a fa2e 	bl	800bf4c <strtol>
 8001af0:	f8c7 0358 	str.w	r0, [r7, #856]	@ 0x358
							if (*parse_end != '\0') {
 8001af4:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001af8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01b      	beq.n	8001b3c <run_console+0xe78>
								WriteString("\033[31mInvalid Format\033[0m\nfrw>");
 8001b04:	4807      	ldr	r0, [pc, #28]	@ (8001b24 <run_console+0xe60>)
 8001b06:	f000 fb0a 	bl	800211e <WriteString>
								continue;
 8001b0a:	e1f2      	b.n	8001ef2 <run_console+0x122e>
 8001b0c:	0800fd88 	.word	0x0800fd88
 8001b10:	0800fdb0 	.word	0x0800fdb0
 8001b14:	0800fd54 	.word	0x0800fd54
 8001b18:	0800fd5c 	.word	0x0800fd5c
 8001b1c:	0800fcd4 	.word	0x0800fcd4
 8001b20:	0800fdb8 	.word	0x0800fdb8
 8001b24:	0800fcdc 	.word	0x0800fcdc
 8001b28:	0800fcfc 	.word	0x0800fcfc
 8001b2c:	0800fd18 	.word	0x0800fd18
 8001b30:	0800fd34 	.word	0x0800fd34
 8001b34:	0800fdbc 	.word	0x0800fdbc
 8001b38:	0800fdd4 	.word	0x0800fdd4
							}

							//uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)

							if (write_start < 0 || write_start >= N25Q128A_FLASH_SIZE) {
 8001b3c:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db04      	blt.n	8001b4e <run_console+0xe8a>
 8001b44:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8001b48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b4c:	db03      	blt.n	8001b56 <run_console+0xe92>
								WriteString("\033[31mInvalid Start\033[0m\nfrw>");
 8001b4e:	48d6      	ldr	r0, [pc, #856]	@ (8001ea8 <run_console+0x11e4>)
 8001b50:	f000 fae5 	bl	800211e <WriteString>
								continue;
 8001b54:	e1cd      	b.n	8001ef2 <run_console+0x122e>
							}

							if (write_size < 0 || write_start + write_size >= N25Q128A_FLASH_SIZE) {
 8001b56:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db07      	blt.n	8001b6e <run_console+0xeaa>
 8001b5e:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8001b62:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8001b66:	4413      	add	r3, r2
 8001b68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b6c:	db03      	blt.n	8001b76 <run_console+0xeb2>
								WriteString("\033[31mInvalid Size\033[0m\nfrw>");
 8001b6e:	48cf      	ldr	r0, [pc, #828]	@ (8001eac <run_console+0x11e8>)
 8001b70:	f000 fad5 	bl	800211e <WriteString>
								continue;
 8001b74:	e1bd      	b.n	8001ef2 <run_console+0x122e>
							}
							char write_value_buf[256];
							//char* write_value_buf = malloc(write_size+1);
							for (size_t i = 0; i < write_size; i++) write_value_buf[i] = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8001b7c:	e00d      	b.n	8001b9a <run_console+0xed6>
 8001b7e:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001b82:	f5a3 723b 	sub.w	r2, r3, #748	@ 0x2ec
 8001b86:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001b94:	3301      	adds	r3, #1
 8001b96:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8001b9a:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8001b9e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3eb      	bcc.n	8001b7e <run_console+0xeba>
							if (write_value_buf == NULL) {
								WriteString("\033[31mOut of Memory\033[0m\nfrw>");
							}

							while (ReadFill(write_value_buf, write_size) == 0) HAL_Delay(10);
 8001ba6:	e002      	b.n	8001bae <run_console+0xeea>
 8001ba8:	200a      	movs	r0, #10
 8001baa:	f001 fd51 	bl	8003650 <HAL_Delay>
 8001bae:	f8d7 2358 	ldr.w	r2, [r7, #856]	@ 0x358
 8001bb2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f99d 	bl	8001ef8 <ReadFill>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f1      	beq.n	8001ba8 <run_console+0xee4>

							//for (int z = 0; z < write_size; z++) {
							//	CSP_QSPI_WriteMemory(write_value_buf+z, write_starAAAAAAAAt+z, 1);
							//}
							if (CSP_QSPI_WriteMemory(write_value_buf, write_start, write_size) != HAL_OK)
 8001bc4:	f8d7 135c 	ldr.w	r1, [r7, #860]	@ 0x35c
 8001bc8:	f8d7 2358 	ldr.w	r2, [r7, #856]	@ 0x358
 8001bcc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 f959 	bl	8002e88 <CSP_QSPI_WriteMemory>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <run_console+0xf20>
								_WriteString("Error: failed to read", 1);
 8001bdc:	2101      	movs	r1, #1
 8001bde:	48b4      	ldr	r0, [pc, #720]	@ (8001eb0 <run_console+0x11ec>)
 8001be0:	f000 fa8a 	bl	80020f8 <_WriteString>

							WriteString("\nfrw>");
 8001be4:	48b3      	ldr	r0, [pc, #716]	@ (8001eb4 <run_console+0x11f0>)
 8001be6:	f000 fa9a 	bl	800211e <WriteString>
 8001bea:	f7ff b888 	b.w	8000cfe <run_console+0x3a>

							//free(write_value_buf);
						}
			 else if (strcmp(command, "ec") == 0) {
 8001bee:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001bf2:	49b1      	ldr	r1, [pc, #708]	@ (8001eb8 <run_console+0x11f4>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe faeb 	bl	80001d0 <strcmp>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d106      	bne.n	8001c0e <run_console+0xf4a>
				 CSP_QSPI_Erase_Chip();
 8001c00:	f000 ffa2 	bl	8002b48 <CSP_QSPI_Erase_Chip>
				 WriteString("Please wait 100 seconds before running another flash command\nfrw>");
 8001c04:	48ad      	ldr	r0, [pc, #692]	@ (8001ebc <run_console+0x11f8>)
 8001c06:	f000 fa8a 	bl	800211e <WriteString>
 8001c0a:	f7ff b878 	b.w	8000cfe <run_console+0x3a>
			 }
			else if (strcmp(command, "we") == 0) {
 8001c0e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001c12:	49ab      	ldr	r1, [pc, #684]	@ (8001ec0 <run_console+0x11fc>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fadb 	bl	80001d0 <strcmp>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d106      	bne.n	8001c2e <run_console+0xf6a>
				QSPI_WriteEnable();
 8001c20:	f001 f806 	bl	8002c30 <QSPI_WriteEnable>
				WriteString("Write Enable flag set\nfrw>");
 8001c24:	48a7      	ldr	r0, [pc, #668]	@ (8001ec4 <run_console+0x1200>)
 8001c26:	f000 fa7a 	bl	800211e <WriteString>
 8001c2a:	f7ff b868 	b.w	8000cfe <run_console+0x3a>
			}
			else if (strcmp(command, "prg") == 0) {
 8001c2e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001c32:	49a5      	ldr	r1, [pc, #660]	@ (8001ec8 <run_console+0x1204>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe facb 	bl	80001d0 <strcmp>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 808d 	bne.w	8001d5c <run_console+0x1098>
				char buf[256] = {255};
 8001c42:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001c46:	f5a3 737b 	sub.w	r3, r3, #1004	@ 0x3ec
 8001c4a:	22ff      	movs	r2, #255	@ 0xff
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	22fc      	movs	r2, #252	@ 0xfc
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f00a fd62 	bl	800c71e <memset>
                char read_back_buf[256] = {0};
 8001c5a:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001c5e:	f5a3 733b 	sub.w	r3, r3, #748	@ 0x2ec
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	3304      	adds	r3, #4
 8001c68:	22fc      	movs	r2, #252	@ 0xfc
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f00a fd56 	bl	800c71e <memset>

                uint32_t pages = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c

                uint32_t read_size;
                do {
                    read_size = Read(buf, N25Q128A_PAGE_SIZE);
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f998 	bl	8001fb4 <Read>
 8001c84:	f8c7 0368 	str.w	r0, [r7, #872]	@ 0x368
                } while (read_size == 0);
 8001c88:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f3      	beq.n	8001c78 <run_console+0xfb4>

                buf[read_size - 1] = '\0';
 8001c90:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8001c94:	3b01      	subs	r3, #1
 8001c96:	f507 727c 	add.w	r2, r7, #1008	@ 0x3f0
 8001c9a:	f5a2 727b 	sub.w	r2, r2, #1004	@ 0x3ec
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	54d1      	strb	r1, [r2, r3]
                pages = strtoul(buf, NULL, 10);
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	220a      	movs	r2, #10
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00a f9c9 	bl	800c040 <strtoul>
 8001cae:	f8c7 036c 	str.w	r0, [r7, #876]	@ 0x36c

                if (pages == 0 || pages > N25Q128A_FLASH_SIZE / N25Q128A_PAGE_SIZE) {
 8001cb2:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <run_console+0x1000>
 8001cba:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8001cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cc2:	d904      	bls.n	8001cce <run_console+0x100a>
                    WriteString("\033[31mInvalid number of pages\033[0m\nfrw>");
 8001cc4:	4881      	ldr	r0, [pc, #516]	@ (8001ecc <run_console+0x1208>)
 8001cc6:	f000 fa2a 	bl	800211e <WriteString>
 8001cca:	f7ff b818 	b.w	8000cfe <run_console+0x3a>
                    continue;
                }

                for (uint32_t i = 0; i < pages; i++) {
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001cd4:	e03a      	b.n	8001d4c <run_console+0x1088>
                    while (ReadFill(program_buf, N25Q128A_PAGE_SIZE) == 0) continue;
 8001cd6:	bf00      	nop
 8001cd8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cdc:	f8d7 03b0 	ldr.w	r0, [r7, #944]	@ 0x3b0
 8001ce0:	f000 f90a 	bl	8001ef8 <ReadFill>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f5      	beq.n	8001cd6 <run_console+0x1012>
                    uint8_t status = CSP_QSPI_WriteMemory(program_buf, i * N25Q128A_PAGE_SIZE, N25Q128A_PAGE_SIZE);
 8001cea:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f8d7 03b0 	ldr.w	r0, [r7, #944]	@ 0x3b0
 8001cfa:	f001 f8c5 	bl	8002e88 <CSP_QSPI_WriteMemory>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367
                    if (status != HAL_OK) {
 8001d04:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d004      	beq.n	8001d16 <run_console+0x1052>
                        _WriteString("\033[31mFailed to write to FLASH\033[0m\nfrw>", 1);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4870      	ldr	r0, [pc, #448]	@ (8001ed0 <run_console+0x120c>)
 8001d10:	f000 f9f2 	bl	80020f8 <_WriteString>
                        break;
 8001d14:	e0ed      	b.n	8001ef2 <run_console+0x122e>
                    }

                    CSP_QSPI_Read(read_back_buf, i * N25Q128A_PAGE_SIZE, N25Q128A_PAGE_SIZE);
 8001d16:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001d1a:	0219      	lsls	r1, r3, #8
 8001d1c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001d20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 f929 	bl	8002f7c <CSP_QSPI_Read>

                    CDC_Transmit_FS(program_buf, N25Q128A_PAGE_SIZE);
 8001d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d2e:	f8d7 03b0 	ldr.w	r0, [r7, #944]	@ 0x3b0
 8001d32:	f009 fa43 	bl	800b1bc <CDC_Transmit_FS>

                    program_address += N25Q128A_PAGE_SIZE;
 8001d36:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	@ 0x3e8
 8001d3a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001d3e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
                for (uint32_t i = 0; i < pages; i++) {
 8001d42:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001d46:	3301      	adds	r3, #1
 8001d48:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001d4c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8001d50:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d3bf      	bcc.n	8001cd8 <run_console+0x1014>
 8001d58:	f7fe bfd1 	b.w	8000cfe <run_console+0x3a>
                }
			}
			else {
				WriteString(command);
 8001d5c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f9dc 	bl	800211e <WriteString>
				WriteString("\033[31mCommand not found\033[0m\nfrw>");
 8001d66:	485b      	ldr	r0, [pc, #364]	@ (8001ed4 <run_console+0x1210>)
 8001d68:	f000 f9d9 	bl	800211e <WriteString>
 8001d6c:	f7fe bfc7 	b.w	8000cfe <run_console+0x3a>
			}
		} else if (current_menu == HAL_MENU) {
 8001d70:	f897 33ef 	ldrb.w	r3, [r7, #1007]	@ 0x3ef
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f47e afc2 	bne.w	8000cfe <run_console+0x3a>
			if (strcmp(command, "jump") == 0) {
 8001d7a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001d7e:	4956      	ldr	r1, [pc, #344]	@ (8001ed8 <run_console+0x1214>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fa25 	bl	80001d0 <strcmp>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d16c      	bne.n	8001e66 <run_console+0x11a2>
				char* end;
				char* buf = malloc(15);
 8001d8c:	200f      	movs	r0, #15
 8001d8e:	f009 ffa3 	bl	800bcd8 <malloc>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
				while (Read(buf, 15) == 0) HAL_Delay(1);
 8001d98:	e002      	b.n	8001da0 <run_console+0x10dc>
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f001 fc58 	bl	8003650 <HAL_Delay>
 8001da0:	210f      	movs	r1, #15
 8001da2:	f8d7 03a8 	ldr.w	r0, [r7, #936]	@ 0x3a8
 8001da6:	f000 f905 	bl	8001fb4 <Read>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f4      	beq.n	8001d9a <run_console+0x10d6>

				uint8_t found_end = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f887 33bb 	strb.w	r3, [r7, #955]	@ 0x3bb
				for (unsigned int i = 0; i < 15; i++) {
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001dbc:	e01f      	b.n	8001dfe <run_console+0x113a>
					if (buf[i] < '0' || buf[i] > '9') {
 8001dbe:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8001dc2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b2f      	cmp	r3, #47	@ 0x2f
 8001dcc:	d907      	bls.n	8001dde <run_console+0x111a>
 8001dce:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8001dd2:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b39      	cmp	r3, #57	@ 0x39
 8001ddc:	d90a      	bls.n	8001df4 <run_console+0x1130>
						found_end = 1;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 33bb 	strb.w	r3, [r7, #955]	@ 0x3bb
						buf[i] = '\0';
 8001de4:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8001de8:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001dec:	4413      	add	r3, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
						break;
 8001df2:	e008      	b.n	8001e06 <run_console+0x1142>
				for (unsigned int i = 0; i < 15; i++) {
 8001df4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001dfe:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001e02:	2b0e      	cmp	r3, #14
 8001e04:	d9db      	bls.n	8001dbe <run_console+0x10fa>
					}
				}
				if (!found_end) buf[14] = '\0';
 8001e06:	f897 33bb 	ldrb.w	r3, [r7, #955]	@ 0x3bb
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d104      	bne.n	8001e18 <run_console+0x1154>
 8001e0e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8001e12:	330e      	adds	r3, #14
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]

				long num = strtol(buf, &end, 16);
 8001e18:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f8d7 03a8 	ldr.w	r0, [r7, #936]	@ 0x3a8
 8001e24:	f00a f892 	bl	800bf4c <strtol>
 8001e28:	f8c7 03a4 	str.w	r0, [r7, #932]	@ 0x3a4
				if (*end == '\0') {
 8001e2c:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8001e30:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10b      	bne.n	8001e54 <run_console+0x1190>
					char new_buf[15];
					sprintf(new_buf, "%ld\n", num);
 8001e3c:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001e40:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8001e44:	4925      	ldr	r1, [pc, #148]	@ (8001edc <run_console+0x1218>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f00a fbda 	bl	800c600 <siprintf>
					((void(*)(void))num)();
 8001e4c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001e50:	4798      	blx	r3
 8001e52:	e002      	b.n	8001e5a <run_console+0x1196>
				} else {
					WriteString("\033[31mInvalid address\033[0m\nhal>");
 8001e54:	4822      	ldr	r0, [pc, #136]	@ (8001ee0 <run_console+0x121c>)
 8001e56:	f000 f962 	bl	800211e <WriteString>
				}

				free(buf);
 8001e5a:	f8d7 03a8 	ldr.w	r0, [r7, #936]	@ 0x3a8
 8001e5e:	f009 ff43 	bl	800bce8 <free>
 8001e62:	f7fe bf4c 	b.w	8000cfe <run_console+0x3a>
			} else if (strcmp(command, "exit") == 0) {
 8001e66:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001e6a:	491e      	ldr	r1, [pc, #120]	@ (8001ee4 <run_console+0x1220>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe f9af 	bl	80001d0 <strcmp>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <run_console+0x11c4>
				current_menu = MAIN_MENU;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 33ef 	strb.w	r3, [r7, #1007]	@ 0x3ef
				WriteString("\n>");
 8001e7e:	481a      	ldr	r0, [pc, #104]	@ (8001ee8 <run_console+0x1224>)
 8001e80:	f000 f94d 	bl	800211e <WriteString>
 8001e84:	f7fe bf3b 	b.w	8000cfe <run_console+0x3a>
			}
			else {
				WriteString(command);
 8001e88:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 f946 	bl	800211e <WriteString>
				WriteString("\033[31mCommand not found\033[0m\nhal>");
 8001e92:	4816      	ldr	r0, [pc, #88]	@ (8001eec <run_console+0x1228>)
 8001e94:	f000 f943 	bl	800211e <WriteString>
 8001e98:	f7fe bf31 	b.w	8000cfe <run_console+0x3a>
				if (buf == NULL) continue;
 8001e9c:	bf00      	nop
 8001e9e:	f7fe bf2e 	b.w	8000cfe <run_console+0x3a>
			else if (size >= 2 && command[0] == 'W' && command[1] == 'S') {
 8001ea2:	bf00      	nop
 8001ea4:	f7fe bf2b 	b.w	8000cfe <run_console+0x3a>
 8001ea8:	0800fcfc 	.word	0x0800fcfc
 8001eac:	0800fd18 	.word	0x0800fd18
 8001eb0:	0800fdd8 	.word	0x0800fdd8
 8001eb4:	0800fcc4 	.word	0x0800fcc4
 8001eb8:	0800fdf0 	.word	0x0800fdf0
 8001ebc:	0800fdf4 	.word	0x0800fdf4
 8001ec0:	0800fe38 	.word	0x0800fe38
 8001ec4:	0800fe3c 	.word	0x0800fe3c
 8001ec8:	0800fe58 	.word	0x0800fe58
 8001ecc:	0800fe5c 	.word	0x0800fe5c
 8001ed0:	0800fd88 	.word	0x0800fd88
 8001ed4:	0800fe84 	.word	0x0800fe84
 8001ed8:	0800fea4 	.word	0x0800fea4
 8001edc:	0800feac 	.word	0x0800feac
 8001ee0:	0800feb4 	.word	0x0800feb4
 8001ee4:	0800fc90 	.word	0x0800fc90
 8001ee8:	0800fc34 	.word	0x0800fc34
 8001eec:	0800fed4 	.word	0x0800fed4
			else if (size >= 2 && command[0] == 'W' && command[1] == 'H') {
 8001ef0:	bf00      	nop
	while (1) {
 8001ef2:	f7fe bf04 	b.w	8000cfe <run_console+0x3a>
 8001ef6:	bf00      	nop

08001ef8 <ReadFill>:
			}
		}
	}
}

uint32_t ReadFill(char* buf, uint32_t capacity) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
	if (capacity == 0 || com_write_ptr == com_read_ptr) return 0;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <ReadFill+0x1c>
 8001f08:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <ReadFill+0xa8>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <ReadFill+0xac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d101      	bne.n	8001f18 <ReadFill+0x20>
 8001f14:	2300      	movs	r3, #0
 8001f16:	e03d      	b.n	8001f94 <ReadFill+0x9c>

	char* write_ptr = com_write_ptr;
 8001f18:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <ReadFill+0xa8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60bb      	str	r3, [r7, #8]
	char* read_ptr  = com_read_ptr;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	@ (8001fa4 <ReadFill+0xac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	617b      	str	r3, [r7, #20]

	size_t current_size;

	if (write_ptr < com_read_ptr) {
 8001f24:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa4 <ReadFill+0xac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d209      	bcs.n	8001f42 <ReadFill+0x4a>
		current_size = (com_buf + RX_BUFFER_SIZE) - com_read_ptr + (write_ptr - com_buf);
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa8 <ReadFill+0xb0>)
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <ReadFill+0xac>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1ad2      	subs	r2, r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	491c      	ldr	r1, [pc, #112]	@ (8001fac <ReadFill+0xb4>)
 8001f3a:	1a5b      	subs	r3, r3, r1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	e003      	b.n	8001f4a <ReadFill+0x52>
	} else current_size = write_ptr - read_ptr;
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	613b      	str	r3, [r7, #16]

	if (current_size < capacity) return 0;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d201      	bcs.n	8001f56 <ReadFill+0x5e>
 8001f52:	2300      	movs	r3, #0
 8001f54:	e01e      	b.n	8001f94 <ReadFill+0x9c>


	for (uint32_t i = 0; i < capacity; i++) {
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e013      	b.n	8001f84 <ReadFill+0x8c>
		*buf = *read_ptr;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	701a      	strb	r2, [r3, #0]
		buf++;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3301      	adds	r3, #1
 8001f68:	607b      	str	r3, [r7, #4]

		if (read_ptr < com_buf + RX_BUFFER_SIZE - 1) read_ptr++;
 8001f6a:	4a11      	ldr	r2, [pc, #68]	@ (8001fb0 <ReadFill+0xb8>)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d203      	bcs.n	8001f7a <ReadFill+0x82>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	e001      	b.n	8001f7e <ReadFill+0x86>
		else read_ptr = com_buf;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <ReadFill+0xb4>)
 8001f7c:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < capacity; i++) {
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3301      	adds	r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3e7      	bcc.n	8001f5c <ReadFill+0x64>
	}

	com_read_ptr = read_ptr;
 8001f8c:	4a05      	ldr	r2, [pc, #20]	@ (8001fa4 <ReadFill+0xac>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	6013      	str	r3, [r2, #0]

	return capacity;
 8001f92:	683b      	ldr	r3, [r7, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	200000e4 	.word	0x200000e4
 8001fa4:	200000e0 	.word	0x200000e0
 8001fa8:	200026f8 	.word	0x200026f8
 8001fac:	200016f8 	.word	0x200016f8
 8001fb0:	200026f7 	.word	0x200026f7

08001fb4 <Read>:

/**
 * Fills buf with the next string ending with a new line character.
 * A null character will be placed at the end of the string.
 */
uint32_t Read(char* buf, uint32_t capacity) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
    if (capacity == 0) return 0;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <Read+0x14>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e06a      	b.n	800209e <Read+0xea>
    if (com_read_ptr == com_write_ptr) return 0;
 8001fc8:	4b38      	ldr	r3, [pc, #224]	@ (80020ac <Read+0xf8>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b38      	ldr	r3, [pc, #224]	@ (80020b0 <Read+0xfc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d101      	bne.n	8001fd8 <Read+0x24>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e062      	b.n	800209e <Read+0xea>


    char* read_ptr = com_read_ptr;
 8001fd8:	4b34      	ldr	r3, [pc, #208]	@ (80020ac <Read+0xf8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	617b      	str	r3, [r7, #20]
    uint32_t size;
    for (size = 0; size < capacity - 1 && read_ptr != com_write_ptr && *read_ptr != '\n'; size++) {
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	e012      	b.n	800200a <Read+0x56>
        *buf = *read_ptr;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	701a      	strb	r2, [r3, #0]
        buf++;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	607b      	str	r3, [r7, #4]
        read_ptr++;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
        if (read_ptr == com_buf + RX_BUFFER_SIZE) read_ptr = com_buf;
 8001ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80020b4 <Read+0x100>)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <Read+0x50>
 8002000:	4b2d      	ldr	r3, [pc, #180]	@ (80020b8 <Read+0x104>)
 8002002:	617b      	str	r3, [r7, #20]
    for (size = 0; size < capacity - 1 && read_ptr != com_write_ptr && *read_ptr != '\n'; size++) {
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	3301      	adds	r3, #1
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d208      	bcs.n	8002026 <Read+0x72>
 8002014:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <Read+0xfc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	429a      	cmp	r2, r3
 800201c:	d003      	beq.n	8002026 <Read+0x72>
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b0a      	cmp	r3, #10
 8002024:	d1de      	bne.n	8001fe4 <Read+0x30>
    }

    if (size < capacity) {
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d208      	bcs.n	8002040 <Read+0x8c>
    	size++;
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	3301      	adds	r3, #1
 8002032:	613b      	str	r3, [r7, #16]
    	buf[size - 1] = '\0';
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	3b01      	subs	r3, #1
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
    }

    uint8_t is_newline = *read_ptr == '\n' && read_ptr < com_write_ptr;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b0a      	cmp	r3, #10
 8002046:	d106      	bne.n	8002056 <Read+0xa2>
 8002048:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <Read+0xfc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	429a      	cmp	r2, r3
 8002050:	d201      	bcs.n	8002056 <Read+0xa2>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <Read+0xa4>
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]

    if (read_ptr != com_write_ptr) {
 800205a:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <Read+0xfc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	d009      	beq.n	8002078 <Read+0xc4>
        if (read_ptr < com_buf + RX_BUFFER_SIZE - 1) read_ptr++;
 8002064:	4a15      	ldr	r2, [pc, #84]	@ (80020bc <Read+0x108>)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	4293      	cmp	r3, r2
 800206a:	d203      	bcs.n	8002074 <Read+0xc0>
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3301      	adds	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	e001      	b.n	8002078 <Read+0xc4>
        else read_ptr = com_buf;
 8002074:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <Read+0x104>)
 8002076:	617b      	str	r3, [r7, #20]
    }

    if (is_newline || size == capacity - 1) {
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d104      	bne.n	8002088 <Read+0xd4>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d109      	bne.n	800209c <Read+0xe8>
        com_read_ptr = read_ptr;
 8002088:	4a08      	ldr	r2, [pc, #32]	@ (80020ac <Read+0xf8>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6013      	str	r3, [r2, #0]
        buf[size] = '\0';
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
    } else return 0;

    return size;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	e000      	b.n	800209e <Read+0xea>
    } else return 0;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200000e0 	.word	0x200000e0
 80020b0:	200000e4 	.word	0x200000e4
 80020b4:	200026f8 	.word	0x200026f8
 80020b8:	200016f8 	.word	0x200016f8
 80020bc:	200026f7 	.word	0x200026f7

080020c0 <WriteBuf>:
void WriteBuf(char* buf, unsigned int len, uint8_t important) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	71fb      	strb	r3, [r7, #7]
	if (important == 0 && (COM_STATUS&&ECHO) == 0) return;
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d103      	bne.n	80020dc <WriteBuf+0x1c>
 80020d4:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <WriteBuf+0x34>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d006      	beq.n	80020ea <WriteBuf+0x2a>
	CDC_Transmit_FS(buf, len);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4619      	mov	r1, r3
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f009 f86a 	bl	800b1bc <CDC_Transmit_FS>
 80020e8:	e000      	b.n	80020ec <WriteBuf+0x2c>
	if (important == 0 && (COM_STATUS&&ECHO) == 0) return;
 80020ea:	bf00      	nop
}
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200000e8 	.word	0x200000e8

080020f8 <_WriteString>:

void _WriteString(char* buf, uint8_t important) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
	WriteBuf(buf, strlen(buf), important);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7fe f86d 	bl	80001e4 <strlen>
 800210a:	4601      	mov	r1, r0
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	461a      	mov	r2, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ffd5 	bl	80020c0 <WriteBuf>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <WriteString>:

void WriteString(char* buf) {
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
	_WriteString(buf, 0);
 8002126:	2100      	movs	r1, #0
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ffe5 	bl	80020f8 <_WriteString>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	@ 0x28
 800213c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
 800214c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214e:	4b51      	ldr	r3, [pc, #324]	@ (8002294 <MX_GPIO_Init+0x15c>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	4a50      	ldr	r2, [pc, #320]	@ (8002294 <MX_GPIO_Init+0x15c>)
 8002154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002158:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800215a:	4b4e      	ldr	r3, [pc, #312]	@ (8002294 <MX_GPIO_Init+0x15c>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002166:	4b4b      	ldr	r3, [pc, #300]	@ (8002294 <MX_GPIO_Init+0x15c>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	4a4a      	ldr	r2, [pc, #296]	@ (8002294 <MX_GPIO_Init+0x15c>)
 800216c:	f043 0304 	orr.w	r3, r3, #4
 8002170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002172:	4b48      	ldr	r3, [pc, #288]	@ (8002294 <MX_GPIO_Init+0x15c>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	4b45      	ldr	r3, [pc, #276]	@ (8002294 <MX_GPIO_Init+0x15c>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	4a44      	ldr	r2, [pc, #272]	@ (8002294 <MX_GPIO_Init+0x15c>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800218a:	4b42      	ldr	r3, [pc, #264]	@ (8002294 <MX_GPIO_Init+0x15c>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	4b3f      	ldr	r3, [pc, #252]	@ (8002294 <MX_GPIO_Init+0x15c>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219a:	4a3e      	ldr	r2, [pc, #248]	@ (8002294 <MX_GPIO_Init+0x15c>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002294 <MX_GPIO_Init+0x15c>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 80021ae:	2200      	movs	r2, #0
 80021b0:	f240 511f 	movw	r1, #1311	@ 0x51f
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021b8:	f001 fd80 	bl	8003cbc <HAL_GPIO_WritePin>
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_A0_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 80021c2:	4835      	ldr	r0, [pc, #212]	@ (8002298 <MX_GPIO_Init+0x160>)
 80021c4:	f001 fd7a 	bl	8003cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_PERPH_GPIO_Port, PWR_PERPH_Pin, GPIO_PIN_SET);
 80021c8:	2201      	movs	r2, #1
 80021ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021ce:	4832      	ldr	r0, [pc, #200]	@ (8002298 <MX_GPIO_Init+0x160>)
 80021d0:	f001 fd74 	bl	8003cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin
 80021d4:	233f      	movs	r3, #63	@ 0x3f
 80021d6:	617b      	str	r3, [r7, #20]
                          |COL4_Pin|COL5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80021d8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80021dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021de:	2302      	movs	r3, #2
 80021e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	482c      	ldr	r0, [pc, #176]	@ (800229c <MX_GPIO_Init+0x164>)
 80021ea:	f001 fba5 	bl	8003938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 80021ee:	f240 531f 	movw	r3, #1311	@ 0x51f
 80021f2:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f4:	2301      	movs	r3, #1
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	4619      	mov	r1, r3
 8002206:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800220a:	f001 fb95 	bl	8003938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_A0_Pin|LCD_CS_Pin|LCD_RST_Pin|PWR_PERPH_Pin;
 800220e:	f44f 43e2 	mov.w	r3, #28928	@ 0x7100
 8002212:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002214:	2301      	movs	r3, #1
 8002216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	481c      	ldr	r0, [pc, #112]	@ (8002298 <MX_GPIO_Init+0x160>)
 8002228:	f001 fb86 	bl	8003938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2006      	movs	r0, #6
 8002232:	f001 fb0c 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002236:	2006      	movs	r0, #6
 8002238:	f001 fb25 	bl	8003886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	2007      	movs	r0, #7
 8002242:	f001 fb04 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002246:	2007      	movs	r0, #7
 8002248:	f001 fb1d 	bl	8003886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2100      	movs	r1, #0
 8002250:	2008      	movs	r0, #8
 8002252:	f001 fafc 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002256:	2008      	movs	r0, #8
 8002258:	f001 fb15 	bl	8003886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800225c:	2200      	movs	r2, #0
 800225e:	2100      	movs	r1, #0
 8002260:	2009      	movs	r0, #9
 8002262:	f001 faf4 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002266:	2009      	movs	r0, #9
 8002268:	f001 fb0d 	bl	8003886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	200a      	movs	r0, #10
 8002272:	f001 faec 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002276:	200a      	movs	r0, #10
 8002278:	f001 fb05 	bl	8003886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	2017      	movs	r0, #23
 8002282:	f001 fae4 	bl	800384e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002286:	2017      	movs	r0, #23
 8002288:	f001 fafd 	bl	8003886 <HAL_NVIC_EnableIRQ>

}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	@ 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	48000400 	.word	0x48000400
 800229c:	48000800 	.word	0x48000800

080022a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022a6:	f001 f95e 	bl	8003566 <HAL_Init>

  /* USER CODE BEGIN Init */
  int code = 2;
 80022aa:	2302      	movs	r3, #2
 80022ac:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ae:	f000 f818 	bl	80022e2 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b2:	f7ff ff41 	bl	8002138 <MX_GPIO_Init>
  code = bootloader();
 80022b6:	f000 f861 	bl	800237c <bootloader>
 80022ba:	6078      	str	r0, [r7, #4]
  MX_QUADSPI_Init();
 80022bc:	f000 fbbc 	bl	8002a38 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80022c0:	f000 fea8 	bl	8003014 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80022c4:	f008 fe80 	bl	800afc8 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80022c8:	f006 fdc8 	bl	8008e5c <MX_FATFS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (code == 2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d101      	bne.n	80022d6 <main+0x36>
		  Basic_Hardware_Test();
 80022d2:	f000 fad1 	bl	8002878 <Basic_Hardware_Test>
	  if (code == 1) run_console();
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d1f7      	bne.n	80022cc <main+0x2c>
 80022dc:	f7fe fcf2 	bl	8000cc4 <run_console>
	  if (code == 2)
 80022e0:	e7f4      	b.n	80022cc <main+0x2c>

080022e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b096      	sub	sp, #88	@ 0x58
 80022e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2244      	movs	r2, #68	@ 0x44
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00a fa14 	bl	800c71e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f6:	463b      	mov	r3, r7
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002304:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002308:	f002 ff62 	bl	80051d0 <HAL_PWREx_ControlVoltageScaling>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002312:	f000 fb8b 	bl	8002a2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8002316:	2312      	movs	r3, #18
 8002318:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800231a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800231e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002320:	2310      	movs	r3, #16
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002324:	2301      	movs	r3, #1
 8002326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800232c:	2360      	movs	r3, #96	@ 0x60
 800232e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4618      	mov	r0, r3
 800233a:	f003 fd21 	bl	8005d80 <HAL_RCC_OscConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002344:	f000 fb72 	bl	8002a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002348:	230f      	movs	r3, #15
 800234a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800234c:	2301      	movs	r3, #1
 800234e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002354:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800235a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800235e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002360:	463b      	mov	r3, r7
 8002362:	2100      	movs	r1, #0
 8002364:	4618      	mov	r0, r3
 8002366:	f004 f8e7 	bl	8006538 <HAL_RCC_ClockConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002370:	f000 fb5c 	bl	8002a2c <Error_Handler>
  }
}
 8002374:	bf00      	nop
 8002376:	3758      	adds	r7, #88	@ 0x58
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <bootloader>:

/* USER CODE BEGIN 4 */

int bootloader() {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(PWR_PERPH_GPIO_Port, PWR_PERPH_Pin, SET);
 8002382:	2201      	movs	r2, #1
 8002384:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002388:	4816      	ldr	r0, [pc, #88]	@ (80023e4 <bootloader+0x68>)
 800238a:	f001 fc97 	bl	8003cbc <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 800238e:	200a      	movs	r0, #10
 8002390:	f001 f95e 	bl	8003650 <HAL_Delay>

	  int code = Scan_Keyboard();
 8002394:	f000 f9bc 	bl	8002710 <Scan_Keyboard>
 8002398:	4603      	mov	r3, r0
 800239a:	617b      	str	r3, [r7, #20]

	  MX_QUADSPI_Init();
 800239c:	f000 fb4c 	bl	8002a38 <MX_QUADSPI_Init>

	  if (code != 1 && code != 2) {
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d019      	beq.n	80023da <bootloader+0x5e>
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d016      	beq.n	80023da <bootloader+0x5e>
		  CSP_QSPI_EnableMemoryMappedMode();
 80023ac:	f000 fd38 	bl	8002e20 <CSP_QSPI_EnableMemoryMappedMode>

			uint32_t initial_sp = *(__IO uint32_t*)   0x90000000;
 80023b0:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	613b      	str	r3, [r7, #16]
			uint32_t reset_vector = *(__IO uint32_t*) 0x90000004;
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <bootloader+0x6c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]

			// CDC_USB_DEINIT();

			SCB->VTOR = 0x90000000;
 80023be:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <bootloader+0x70>)
 80023c0:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
 80023c4:	609a      	str	r2, [r3, #8]

			typedef void (*free42App)(void);
			free42App jumpToApp = (free42App) reset_vector;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f383 8808 	msr	MSP, r3
}
 80023d4:	bf00      	nop

			__set_MSP(initial_sp);
			jumpToApp();
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4798      	blx	r3
	  }

	  return code;
 80023da:	697b      	ldr	r3, [r7, #20]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	48000400 	.word	0x48000400
 80023e8:	90000004 	.word	0x90000004
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <HAL_GPIO_EXTI_Callback>:

uint32_t last_key_time = 0;
uint8_t last_key = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
	if (last_key_time != 0 && HAL_GetTick() - last_key_time < 50) {
 80023fa:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0xb8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00b      	beq.n	800241a <HAL_GPIO_EXTI_Callback+0x2a>
 8002402:	f001 f919 	bl	8003638 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	4b27      	ldr	r3, [pc, #156]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0xb8>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b31      	cmp	r3, #49	@ 0x31
 8002410:	d803      	bhi.n	800241a <HAL_GPIO_EXTI_Callback+0x2a>
		EXTI->PR1 = (COL0_Pin | COL1_Pin | COL2_Pin | COL3_Pin | COL4_Pin | COL5_Pin);
 8002412:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <HAL_GPIO_EXTI_Callback+0xbc>)
 8002414:	223f      	movs	r2, #63	@ 0x3f
 8002416:	615a      	str	r2, [r3, #20]
		return;
 8002418:	e042      	b.n	80024a0 <HAL_GPIO_EXTI_Callback+0xb0>
	}
	last_key_time = HAL_GetTick();
 800241a:	f001 f90d 	bl	8003638 <HAL_GetTick>
 800241e:	4603      	mov	r3, r0
 8002420:	4a21      	ldr	r2, [pc, #132]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8002422:	6013      	str	r3, [r2, #0]

	uint8_t key = GetKey(GPIO_Pin);
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f848 	bl	80024bc <GetKey>
 800242c:	4603      	mov	r3, r0
 800242e:	73fb      	strb	r3, [r7, #15]

	if (key == last_key) return;
 8002430:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	429a      	cmp	r2, r3
 8002438:	d02f      	beq.n	800249a <HAL_GPIO_EXTI_Callback+0xaa>

	if (key == 255) {
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	2bff      	cmp	r3, #255	@ 0xff
 800243e:	d114      	bne.n	800246a <HAL_GPIO_EXTI_Callback+0x7a>
		last_key = 0;
 8002440:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]

		key_queue[kqwi++] = key;
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	b2d1      	uxtb	r1, r2
 800244e:	4a19      	ldr	r2, [pc, #100]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002450:	7011      	strb	r1, [r2, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	5453      	strb	r3, [r2, r1]
		if (kqwi == KEY_QUEUE_SIZE) kqwi = 0;
 800245a:	4b16      	ldr	r3, [pc, #88]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b05      	cmp	r3, #5
 8002460:	d11d      	bne.n	800249e <HAL_GPIO_EXTI_Callback+0xae>
 8002462:	4b14      	ldr	r3, [pc, #80]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002464:	2200      	movs	r2, #0
 8002466:	701a      	strb	r2, [r3, #0]

		return;
 8002468:	e019      	b.n	800249e <HAL_GPIO_EXTI_Callback+0xae>
	}

	last_key = key;
 800246a:	4a11      	ldr	r2, [pc, #68]	@ (80024b0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	7013      	strb	r3, [r2, #0]
	key_queue[kqwi++] = key;
 8002470:	4b10      	ldr	r3, [pc, #64]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	b2d1      	uxtb	r1, r2
 8002478:	4a0e      	ldr	r2, [pc, #56]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800247a:	7011      	strb	r1, [r2, #0]
 800247c:	4619      	mov	r1, r3
 800247e:	4a0e      	ldr	r2, [pc, #56]	@ (80024b8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	5453      	strb	r3, [r2, r1]
	if (kqwi == KEY_QUEUE_SIZE) kqwi = 0;
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b05      	cmp	r3, #5
 800248a:	d102      	bne.n	8002492 <HAL_GPIO_EXTI_Callback+0xa2>
 800248c:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
	EXTI->PR1 = (COL0_Pin | COL1_Pin | COL2_Pin | COL3_Pin | COL4_Pin | COL5_Pin);
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_GPIO_EXTI_Callback+0xbc>)
 8002494:	223f      	movs	r2, #63	@ 0x3f
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_EXTI_Callback+0xb0>
	if (key == last_key) return;
 800249a:	bf00      	nop
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_EXTI_Callback+0xb0>
		return;
 800249e:	bf00      	nop
}
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000034c 	.word	0x2000034c
 80024ac:	40010400 	.word	0x40010400
 80024b0:	20000350 	.word	0x20000350
 80024b4:	2000034a 	.word	0x2000034a
 80024b8:	20000344 	.word	0x20000344

080024bc <GetKey>:

void Powerdown() {
}

uint8_t GetKey(uint16_t pin)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b091      	sub	sp, #68	@ 0x44
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	611a      	str	r2, [r3, #16]

	  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin
 80024d6:	233f      	movs	r3, #63	@ 0x3f
 80024d8:	61fb      	str	r3, [r7, #28]
	                          |COL4_Pin|COL5_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024de:	2302      	movs	r3, #2
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
	  HAL_GPIO_Init(COL0_GPIO_Port, &GPIO_InitStruct);
 80024e2:	f107 031c 	add.w	r3, r7, #28
 80024e6:	4619      	mov	r1, r3
 80024e8:	4886      	ldr	r0, [pc, #536]	@ (8002704 <GetKey+0x248>)
 80024ea:	f001 fa25 	bl	8003938 <HAL_GPIO_Init>
	  EXTI->IMR1 &= ~(COL0_Pin | COL1_Pin | COL2_Pin | COL3_Pin | COL4_Pin | COL5_Pin);
 80024ee:	4b86      	ldr	r3, [pc, #536]	@ (8002708 <GetKey+0x24c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a85      	ldr	r2, [pc, #532]	@ (8002708 <GetKey+0x24c>)
 80024f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f8:	6013      	str	r3, [r2, #0]

	uint16_t rows[] = { ROW0_Pin, ROW1_Pin, ROW2_Pin, ROW3_Pin, ROW4_Pin, ROW5_Pin, ROW6_Pin };
 80024fa:	4b84      	ldr	r3, [pc, #528]	@ (800270c <GetKey+0x250>)
 80024fc:	f107 040c 	add.w	r4, r7, #12
 8002500:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002502:	c407      	stmia	r4!, {r0, r1, r2}
 8002504:	8023      	strh	r3, [r4, #0]
	uint8_t key_press = 255;
 8002506:	23ff      	movs	r3, #255	@ 0xff
 8002508:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin, GPIO_PIN_RESET);
 800250c:	2200      	movs	r2, #0
 800250e:	f240 511f 	movw	r1, #1311	@ 0x51f
 8002512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002516:	f001 fbd1 	bl	8003cbc <HAL_GPIO_WritePin>
	for (uint8_t r = 0; r < 7; r++) {
 800251a:	2300      	movs	r3, #0
 800251c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002520:	e0c5      	b.n	80026ae <GetKey+0x1f2>
		HAL_GPIO_WritePin(ROW0_GPIO_Port, rows[r], SET);
 8002522:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	3340      	adds	r3, #64	@ 0x40
 800252a:	443b      	add	r3, r7
 800252c:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 8002530:	2201      	movs	r2, #1
 8002532:	4619      	mov	r1, r3
 8002534:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002538:	f001 fbc0 	bl	8003cbc <HAL_GPIO_WritePin>
		GPIO_PinState state = HAL_GPIO_ReadPin(COL0_GPIO_Port, pin);
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	4619      	mov	r1, r3
 8002540:	4870      	ldr	r0, [pc, #448]	@ (8002704 <GetKey+0x248>)
 8002542:	f001 fba3 	bl	8003c8c <HAL_GPIO_ReadPin>
 8002546:	4603      	mov	r3, r0
 8002548:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		HAL_GPIO_WritePin(ROW0_GPIO_Port, rows[r], RESET);
 800254c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	3340      	adds	r3, #64	@ 0x40
 8002554:	443b      	add	r3, r7
 8002556:	f833 3c34 	ldrh.w	r3, [r3, #-52]
 800255a:	2200      	movs	r2, #0
 800255c:	4619      	mov	r1, r3
 800255e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002562:	f001 fbab 	bl	8003cbc <HAL_GPIO_WritePin>

		int c = -1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	63bb      	str	r3, [r7, #56]	@ 0x38
		if (state == GPIO_PIN_SET) {
 800256c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 8097 	bne.w	80026a4 <GetKey+0x1e8>
			switch (pin) {
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	3b01      	subs	r3, #1
 800257a:	2b1f      	cmp	r3, #31
 800257c:	d854      	bhi.n	8002628 <GetKey+0x16c>
 800257e:	a201      	add	r2, pc, #4	@ (adr r2, 8002584 <GetKey+0xc8>)
 8002580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002584:	08002605 	.word	0x08002605
 8002588:	0800260b 	.word	0x0800260b
 800258c:	08002629 	.word	0x08002629
 8002590:	08002611 	.word	0x08002611
 8002594:	08002629 	.word	0x08002629
 8002598:	08002629 	.word	0x08002629
 800259c:	08002629 	.word	0x08002629
 80025a0:	08002617 	.word	0x08002617
 80025a4:	08002629 	.word	0x08002629
 80025a8:	08002629 	.word	0x08002629
 80025ac:	08002629 	.word	0x08002629
 80025b0:	08002629 	.word	0x08002629
 80025b4:	08002629 	.word	0x08002629
 80025b8:	08002629 	.word	0x08002629
 80025bc:	08002629 	.word	0x08002629
 80025c0:	0800261d 	.word	0x0800261d
 80025c4:	08002629 	.word	0x08002629
 80025c8:	08002629 	.word	0x08002629
 80025cc:	08002629 	.word	0x08002629
 80025d0:	08002629 	.word	0x08002629
 80025d4:	08002629 	.word	0x08002629
 80025d8:	08002629 	.word	0x08002629
 80025dc:	08002629 	.word	0x08002629
 80025e0:	08002629 	.word	0x08002629
 80025e4:	08002629 	.word	0x08002629
 80025e8:	08002629 	.word	0x08002629
 80025ec:	08002629 	.word	0x08002629
 80025f0:	08002629 	.word	0x08002629
 80025f4:	08002629 	.word	0x08002629
 80025f8:	08002629 	.word	0x08002629
 80025fc:	08002629 	.word	0x08002629
 8002600:	08002623 	.word	0x08002623
				case COL0_Pin: c = 0; break;
 8002604:	2300      	movs	r3, #0
 8002606:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002608:	e00e      	b.n	8002628 <GetKey+0x16c>
				case COL1_Pin: c = 1; break;
 800260a:	2301      	movs	r3, #1
 800260c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800260e:	e00b      	b.n	8002628 <GetKey+0x16c>
				case COL2_Pin: c = 2; break;
 8002610:	2302      	movs	r3, #2
 8002612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002614:	e008      	b.n	8002628 <GetKey+0x16c>
				case COL3_Pin: c = 3; break;
 8002616:	2303      	movs	r3, #3
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
 800261a:	e005      	b.n	8002628 <GetKey+0x16c>
				case COL4_Pin: c = 4; break;
 800261c:	2304      	movs	r3, #4
 800261e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002620:	e002      	b.n	8002628 <GetKey+0x16c>
				case COL5_Pin: c = 5; break;
 8002622:	2305      	movs	r3, #5
 8002624:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002626:	bf00      	nop
			}

			int row = r == 8 ? 5 : (r == 10 ? 6 : r);
 8002628:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800262c:	2b08      	cmp	r3, #8
 800262e:	d008      	beq.n	8002642 <GetKey+0x186>
 8002630:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002634:	2b0a      	cmp	r3, #10
 8002636:	d002      	beq.n	800263e <GetKey+0x182>
 8002638:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800263c:	e002      	b.n	8002644 <GetKey+0x188>
 800263e:	2306      	movs	r3, #6
 8002640:	e000      	b.n	8002644 <GetKey+0x188>
 8002642:	2305      	movs	r3, #5
 8002644:	633b      	str	r3, [r7, #48]	@ 0x30
			key_press = row * 5 + c + 1;
 8002646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	0092      	lsls	r2, r2, #2
 800264e:	4413      	add	r3, r2
 8002650:	b2da      	uxtb	r2, r3
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4413      	add	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	3301      	adds	r3, #1
 800265c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			if (row > 0) key_press++;
 8002660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002662:	2b00      	cmp	r3, #0
 8002664:	dd04      	ble.n	8002670 <GetKey+0x1b4>
 8002666:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800266a:	3301      	adds	r3, #1
 800266c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			if (row > 1) key_press++;
 8002670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002672:	2b01      	cmp	r3, #1
 8002674:	dd04      	ble.n	8002680 <GetKey+0x1c4>
 8002676:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800267a:	3301      	adds	r3, #1
 800267c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			if (row > 2) key_press++;
 8002680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002682:	2b02      	cmp	r3, #2
 8002684:	dd04      	ble.n	8002690 <GetKey+0x1d4>
 8002686:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800268a:	3301      	adds	r3, #1
 800268c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			if (key_press > 13) key_press--;
 8002690:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002694:	2b0d      	cmp	r3, #13
 8002696:	d910      	bls.n	80026ba <GetKey+0x1fe>
 8002698:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800269c:	3b01      	subs	r3, #1
 800269e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

			break;
 80026a2:	e00a      	b.n	80026ba <GetKey+0x1fe>
	for (uint8_t r = 0; r < 7; r++) {
 80026a4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80026a8:	3301      	adds	r3, #1
 80026aa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80026ae:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80026b2:	2b06      	cmp	r3, #6
 80026b4:	f67f af35 	bls.w	8002522 <GetKey+0x66>
 80026b8:	e000      	b.n	80026bc <GetKey+0x200>
			break;
 80026ba:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin, GPIO_PIN_SET);
 80026bc:	2201      	movs	r2, #1
 80026be:	f240 511f 	movw	r1, #1311	@ 0x51f
 80026c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c6:	f001 faf9 	bl	8003cbc <HAL_GPIO_WritePin>

		  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin
 80026ca:	233f      	movs	r3, #63	@ 0x3f
 80026cc:	61fb      	str	r3, [r7, #28]
		                          |COL4_Pin|COL5_Pin;
		  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026ce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80026d2:	623b      	str	r3, [r7, #32]
		  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026d4:	2302      	movs	r3, #2
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24

		  HAL_GPIO_Init(COL0_GPIO_Port, &GPIO_InitStruct);
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	4619      	mov	r1, r3
 80026de:	4809      	ldr	r0, [pc, #36]	@ (8002704 <GetKey+0x248>)
 80026e0:	f001 f92a 	bl	8003938 <HAL_GPIO_Init>
	  EXTI->IMR1 |= (COL0_Pin | COL1_Pin | COL2_Pin | COL3_Pin | COL4_Pin | COL5_Pin);
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <GetKey+0x24c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <GetKey+0x24c>)
 80026ea:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80026ee:	6013      	str	r3, [r2, #0]
		EXTI->PR1 = (COL0_Pin | COL1_Pin | COL2_Pin | COL3_Pin | COL4_Pin | COL5_Pin);
 80026f0:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <GetKey+0x24c>)
 80026f2:	223f      	movs	r2, #63	@ 0x3f
 80026f4:	615a      	str	r2, [r3, #20]


	return key_press;
 80026f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3744      	adds	r7, #68	@ 0x44
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	48000800 	.word	0x48000800
 8002708:	40010400 	.word	0x40010400
 800270c:	0800fef4 	.word	0x0800fef4

08002710 <Scan_Keyboard>:

uint8_t Scan_Keyboard()
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
	uint16_t rows = 0b10100011111;
 8002716:	f240 531f 	movw	r3, #1311	@ 0x51f
 800271a:	817b      	strh	r3, [r7, #10]
	uint16_t columns = 0b111111;
 800271c:	233f      	movs	r3, #63	@ 0x3f
 800271e:	813b      	strh	r3, [r7, #8]

	int key_press = 255;
 8002720:	23ff      	movs	r3, #255	@ 0xff
 8002722:	617b      	str	r3, [r7, #20]

	for (int r = 0; r < 11; r++) {
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	e097      	b.n	800285a <Scan_Keyboard+0x14a>
		if ((rows & (1 << r)) == 0) continue;
 800272a:	897a      	ldrh	r2, [r7, #10]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	fa42 f303 	asr.w	r3, r2, r3
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 808b 	beq.w	8002852 <Scan_Keyboard+0x142>
		ROW0_GPIO_Port->ODR |= (1 << r);
 800273c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	2101      	movs	r1, #1
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	fa01 f202 	lsl.w	r2, r1, r2
 800274a:	4611      	mov	r1, r2
 800274c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002750:	430b      	orrs	r3, r1
 8002752:	6153      	str	r3, [r2, #20]

		int c = -1;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	60fb      	str	r3, [r7, #12]

		if (HAL_GPIO_ReadPin(COL0_GPIO_Port, COL0_Pin) == GPIO_PIN_SET)
 800275a:	2101      	movs	r1, #1
 800275c:	4845      	ldr	r0, [pc, #276]	@ (8002874 <Scan_Keyboard+0x164>)
 800275e:	f001 fa95 	bl	8003c8c <HAL_GPIO_ReadPin>
 8002762:	4603      	mov	r3, r0
 8002764:	2b01      	cmp	r3, #1
 8002766:	d102      	bne.n	800276e <Scan_Keyboard+0x5e>
			c = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e030      	b.n	80027d0 <Scan_Keyboard+0xc0>
		else 		if (HAL_GPIO_ReadPin(COL1_GPIO_Port, COL1_Pin) == GPIO_PIN_SET)
 800276e:	2102      	movs	r1, #2
 8002770:	4840      	ldr	r0, [pc, #256]	@ (8002874 <Scan_Keyboard+0x164>)
 8002772:	f001 fa8b 	bl	8003c8c <HAL_GPIO_ReadPin>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d102      	bne.n	8002782 <Scan_Keyboard+0x72>
			c = 1;
 800277c:	2301      	movs	r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e026      	b.n	80027d0 <Scan_Keyboard+0xc0>
		else		if (HAL_GPIO_ReadPin(COL2_GPIO_Port, COL2_Pin) == GPIO_PIN_SET)
 8002782:	2104      	movs	r1, #4
 8002784:	483b      	ldr	r0, [pc, #236]	@ (8002874 <Scan_Keyboard+0x164>)
 8002786:	f001 fa81 	bl	8003c8c <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
 800278c:	2b01      	cmp	r3, #1
 800278e:	d102      	bne.n	8002796 <Scan_Keyboard+0x86>
			c = 2;
 8002790:	2302      	movs	r3, #2
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	e01c      	b.n	80027d0 <Scan_Keyboard+0xc0>
		else 		if (HAL_GPIO_ReadPin(COL3_GPIO_Port, COL3_Pin) == GPIO_PIN_SET)
 8002796:	2108      	movs	r1, #8
 8002798:	4836      	ldr	r0, [pc, #216]	@ (8002874 <Scan_Keyboard+0x164>)
 800279a:	f001 fa77 	bl	8003c8c <HAL_GPIO_ReadPin>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <Scan_Keyboard+0x9a>
			c = 3;
 80027a4:	2303      	movs	r3, #3
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e012      	b.n	80027d0 <Scan_Keyboard+0xc0>
		else		if (HAL_GPIO_ReadPin(COL4_GPIO_Port, COL4_Pin) == GPIO_PIN_SET)
 80027aa:	2110      	movs	r1, #16
 80027ac:	4831      	ldr	r0, [pc, #196]	@ (8002874 <Scan_Keyboard+0x164>)
 80027ae:	f001 fa6d 	bl	8003c8c <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d102      	bne.n	80027be <Scan_Keyboard+0xae>
			c = 4;
 80027b8:	2304      	movs	r3, #4
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e008      	b.n	80027d0 <Scan_Keyboard+0xc0>
		else 		if (HAL_GPIO_ReadPin(COL5_GPIO_Port, COL5_Pin) == GPIO_PIN_SET)
 80027be:	2120      	movs	r1, #32
 80027c0:	482c      	ldr	r0, [pc, #176]	@ (8002874 <Scan_Keyboard+0x164>)
 80027c2:	f001 fa63 	bl	8003c8c <HAL_GPIO_ReadPin>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <Scan_Keyboard+0xc0>
			c = 5;
 80027cc:	2305      	movs	r3, #5
 80027ce:	60fb      	str	r3, [r7, #12]

		if (c != -1) {
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d02b      	beq.n	8002830 <Scan_Keyboard+0x120>
			int row = r == 8 ? 5 : (r == 10 ? 6 : r);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d006      	beq.n	80027ec <Scan_Keyboard+0xdc>
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b0a      	cmp	r3, #10
 80027e2:	d001      	beq.n	80027e8 <Scan_Keyboard+0xd8>
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	e002      	b.n	80027ee <Scan_Keyboard+0xde>
 80027e8:	2306      	movs	r3, #6
 80027ea:	e000      	b.n	80027ee <Scan_Keyboard+0xde>
 80027ec:	2305      	movs	r3, #5
 80027ee:	607b      	str	r3, [r7, #4]
			key_press = row * 5 + c + 1;
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	441a      	add	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
			if (row > 0) key_press++;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	dd02      	ble.n	800280c <Scan_Keyboard+0xfc>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3301      	adds	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
			if (row > 1) key_press++;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b01      	cmp	r3, #1
 8002810:	dd02      	ble.n	8002818 <Scan_Keyboard+0x108>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3301      	adds	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
			if (row > 2) key_press++;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b02      	cmp	r3, #2
 800281c:	dd02      	ble.n	8002824 <Scan_Keyboard+0x114>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3301      	adds	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
			if (key_press > 13) key_press--;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b0d      	cmp	r3, #13
 8002828:	dd02      	ble.n	8002830 <Scan_Keyboard+0x120>
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3b01      	subs	r3, #1
 800282e:	617b      	str	r3, [r7, #20]
		}

		ROW0_GPIO_Port->ODR &= ~(1 << r);
 8002830:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	2101      	movs	r1, #1
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	43d2      	mvns	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002846:	400b      	ands	r3, r1
 8002848:	6153      	str	r3, [r2, #20]

		if (key_press != 255)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2bff      	cmp	r3, #255	@ 0xff
 800284e:	d109      	bne.n	8002864 <Scan_Keyboard+0x154>
 8002850:	e000      	b.n	8002854 <Scan_Keyboard+0x144>
		if ((rows & (1 << r)) == 0) continue;
 8002852:	bf00      	nop
	for (int r = 0; r < 11; r++) {
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	3301      	adds	r3, #1
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b0a      	cmp	r3, #10
 800285e:	f77f af64 	ble.w	800272a <Scan_Keyboard+0x1a>
 8002862:	e000      	b.n	8002866 <Scan_Keyboard+0x156>
			break;
 8002864:	bf00      	nop

	}

	return key_press;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	b2db      	uxtb	r3, r3
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	48000800 	.word	0x48000800

08002878 <Basic_Hardware_Test>:


void Basic_Hardware_Test() {
 8002878:	b580      	push	{r7, lr}
 800287a:	b0a6      	sub	sp, #152	@ 0x98
 800287c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin, GPIO_PIN_SET);
 800287e:	2201      	movs	r2, #1
 8002880:	f240 511f 	movw	r1, #1311	@ 0x51f
 8002884:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002888:	f001 fa18 	bl	8003cbc <HAL_GPIO_WritePin>
	  //GPIO_InitStruct.Pin = COL0_Pin;
	  //GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  //GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	  //HAL_GPIO_Init(COL0_GPIO_Port, &GPIO_InitStruct);

	  unsigned int page = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	  unsigned int column = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	  char zero[132] = {0};
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	f107 0308 	add.w	r3, r7, #8
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f009 ff3a 	bl	800c71e <memset>
	  for (int p = 0; p < 4; p++) {
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028b0:	e00e      	b.n	80028d0 <Basic_Hardware_Test+0x58>
		  setAddress(p, 0);
 80028b2:	2100      	movs	r1, #0
 80028b4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80028b8:	f000 fc9a 	bl	80031f0 <setAddress>
		  sendData(zero, 132);
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	2184      	movs	r1, #132	@ 0x84
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fc6d 	bl	80031a0 <sendData>
	  for (int p = 0; p < 4; p++) {
 80028c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ca:	3301      	adds	r3, #1
 80028cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	ddec      	ble.n	80028b2 <Basic_Hardware_Test+0x3a>
		  //int key = Scan_Keyboard();
		  //if (key == 255) continue;

		  //if (key == 33) Powerdown();

		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80028d8:	2101      	movs	r1, #1
 80028da:	2000      	movs	r0, #0
 80028dc:	f002 fc36 	bl	800514c <HAL_PWR_EnterSLEEPMode>
		  if (kqri == kqwi) continue;
 80028e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002a18 <Basic_Hardware_Test+0x1a0>)
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	4b4d      	ldr	r3, [pc, #308]	@ (8002a1c <Basic_Hardware_Test+0x1a4>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	f000 8090 	beq.w	8002a0e <Basic_Hardware_Test+0x196>
		  uint8_t key = key_queue[kqri++];
 80028ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002a18 <Basic_Hardware_Test+0x1a0>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	b2d1      	uxtb	r1, r2
 80028f6:	4a48      	ldr	r2, [pc, #288]	@ (8002a18 <Basic_Hardware_Test+0x1a0>)
 80028f8:	7011      	strb	r1, [r2, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b48      	ldr	r3, [pc, #288]	@ (8002a20 <Basic_Hardware_Test+0x1a8>)
 80028fe:	5c9b      	ldrb	r3, [r3, r2]
 8002900:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
		  if (kqri == KEY_QUEUE_SIZE) kqri = 0;
 8002904:	4b44      	ldr	r3, [pc, #272]	@ (8002a18 <Basic_Hardware_Test+0x1a0>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d102      	bne.n	8002912 <Basic_Hardware_Test+0x9a>
 800290c:	4b42      	ldr	r3, [pc, #264]	@ (8002a18 <Basic_Hardware_Test+0x1a0>)
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]

		  if (key == 255) continue;
 8002912:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8002916:	2bff      	cmp	r3, #255	@ 0xff
 8002918:	d07b      	beq.n	8002a12 <Basic_Hardware_Test+0x19a>

		  uint8_t ten = key / 10;
 800291a:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800291e:	4a41      	ldr	r2, [pc, #260]	@ (8002a24 <Basic_Hardware_Test+0x1ac>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
		  uint8_t one = key % 10;
 800292a:	f897 208b 	ldrb.w	r2, [r7, #139]	@ 0x8b
 800292e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a24 <Basic_Hardware_Test+0x1ac>)
 8002930:	fba3 1302 	umull	r1, r3, r3, r2
 8002934:	08d9      	lsrs	r1, r3, #3
 8002936:	460b      	mov	r3, r1
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

		  uint8_t key_string[] = { ten + '0', one + '0', '\0' };
 8002944:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8002948:	3330      	adds	r3, #48	@ 0x30
 800294a:	b2db      	uxtb	r3, r3
 800294c:	703b      	strb	r3, [r7, #0]
 800294e:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 8002952:	3330      	adds	r3, #48	@ 0x30
 8002954:	b2db      	uxtb	r3, r3
 8002956:	707b      	strb	r3, [r7, #1]
 8002958:	2300      	movs	r3, #0
 800295a:	70bb      	strb	r3, [r7, #2]

		  setAddress(page, column);
 800295c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002960:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fc42 	bl	80031f0 <setAddress>
		  sendData(characters[ten], 5);
 800296c:	f897 208a 	ldrb.w	r2, [r7, #138]	@ 0x8a
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	4a2c      	ldr	r2, [pc, #176]	@ (8002a28 <Basic_Hardware_Test+0x1b0>)
 8002978:	4413      	add	r3, r2
 800297a:	2105      	movs	r1, #5
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fc0f 	bl	80031a0 <sendData>

		  column += 5;
 8002982:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002986:	3305      	adds	r3, #5
 8002988:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  if (column > 131 - 5) {
 800298c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002990:	2b7e      	cmp	r3, #126	@ 0x7e
 8002992:	d90e      	bls.n	80029b2 <Basic_Hardware_Test+0x13a>
			  column = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			  page++;
 800299a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800299e:	3301      	adds	r3, #1
 80029a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			  if (page > 3) {
 80029a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d902      	bls.n	80029b2 <Basic_Hardware_Test+0x13a>
				  page = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			  }
		  }

		  setAddress(page, column);
 80029b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fc17 	bl	80031f0 <setAddress>
		  sendData(characters[one], 5);
 80029c2:	f897 2089 	ldrb.w	r2, [r7, #137]	@ 0x89
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	4a16      	ldr	r2, [pc, #88]	@ (8002a28 <Basic_Hardware_Test+0x1b0>)
 80029ce:	4413      	add	r3, r2
 80029d0:	2105      	movs	r1, #5
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fbe4 	bl	80031a0 <sendData>

		  column += 8;
 80029d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029dc:	3308      	adds	r3, #8
 80029de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  if (column > 131 - 5) {
 80029e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029e6:	2b7e      	cmp	r3, #126	@ 0x7e
 80029e8:	f67f af76 	bls.w	80028d8 <Basic_Hardware_Test+0x60>
			  column = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			  page++;
 80029f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029f6:	3301      	adds	r3, #1
 80029f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			  if (page > 3) {
 80029fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	f67f af69 	bls.w	80028d8 <Basic_Hardware_Test+0x60>
				  page = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a0c:	e764      	b.n	80028d8 <Basic_Hardware_Test+0x60>
		  if (kqri == kqwi) continue;
 8002a0e:	bf00      	nop
 8002a10:	e762      	b.n	80028d8 <Basic_Hardware_Test+0x60>
		  if (key == 255) continue;
 8002a12:	bf00      	nop
	  {
 8002a14:	e760      	b.n	80028d8 <Basic_Hardware_Test+0x60>
 8002a16:	bf00      	nop
 8002a18:	20000349 	.word	0x20000349
 8002a1c:	2000034a 	.word	0x2000034a
 8002a20:	20000344 	.word	0x20000344
 8002a24:	cccccccd 	.word	0xcccccccd
 8002a28:	20000000 	.word	0x20000000

08002a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002a30:	b672      	cpsid	i
}
 8002a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <Error_Handler+0x8>

08002a38 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <MX_QUADSPI_Init+0x44>)
 8002a3e:	4a10      	ldr	r2, [pc, #64]	@ (8002a80 <MX_QUADSPI_Init+0x48>)
 8002a40:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <MX_QUADSPI_Init+0x44>)
 8002a44:	2203      	movs	r2, #3
 8002a46:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 3;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <MX_QUADSPI_Init+0x44>)
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <MX_QUADSPI_Init+0x44>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <MX_QUADSPI_Init+0x44>)
 8002a56:	2216      	movs	r2, #22
 8002a58:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <MX_QUADSPI_Init+0x44>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <MX_QUADSPI_Init+0x44>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002a66:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <MX_QUADSPI_Init+0x44>)
 8002a68:	f002 fc60 	bl	800532c <HAL_QSPI_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002a72:	f7ff ffdb 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000354 	.word	0x20000354
 8002a80:	a0001000 	.word	0xa0001000

08002a84 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	@ 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a26      	ldr	r2, [pc, #152]	@ (8002b3c <HAL_QSPI_MspInit+0xb8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d145      	bne.n	8002b32 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002aa6:	4b26      	ldr	r3, [pc, #152]	@ (8002b40 <HAL_QSPI_MspInit+0xbc>)
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aaa:	4a25      	ldr	r2, [pc, #148]	@ (8002b40 <HAL_QSPI_MspInit+0xbc>)
 8002aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab0:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ab2:	4b23      	ldr	r3, [pc, #140]	@ (8002b40 <HAL_QSPI_MspInit+0xbc>)
 8002ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	4b20      	ldr	r3, [pc, #128]	@ (8002b40 <HAL_QSPI_MspInit+0xbc>)
 8002ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8002b40 <HAL_QSPI_MspInit+0xbc>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002aca:	4b1d      	ldr	r3, [pc, #116]	@ (8002b40 <HAL_QSPI_MspInit+0xbc>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b40 <HAL_QSPI_MspInit+0xbc>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	4a19      	ldr	r2, [pc, #100]	@ (8002b40 <HAL_QSPI_MspInit+0xbc>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ae2:	4b17      	ldr	r3, [pc, #92]	@ (8002b40 <HAL_QSPI_MspInit+0xbc>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> QUADSPI_BK1_IO1
    PB1     ------> QUADSPI_BK1_IO0
    PB10     ------> QUADSPI_CLK
    PB11     ------> QUADSPI_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aee:	23c0      	movs	r3, #192	@ 0xc0
 8002af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002afe:	230a      	movs	r3, #10
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b0c:	f000 ff14 	bl	8003938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8002b10:	f640 4303 	movw	r3, #3075	@ 0xc03
 8002b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b16:	2302      	movs	r3, #2
 8002b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b22:	230a      	movs	r3, #10
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4805      	ldr	r0, [pc, #20]	@ (8002b44 <HAL_QSPI_MspInit+0xc0>)
 8002b2e:	f000 ff03 	bl	8003938 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002b32:	bf00      	nop
 8002b34:	3728      	adds	r7, #40	@ 0x28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	a0001000 	.word	0xa0001000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	48000400 	.word	0x48000400

08002b48 <CSP_QSPI_Erase_Chip>:
}



uint8_t CSP_QSPI_Erase_Chip(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	@ 0x38
 8002b4c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;


    if (QSPI_WriteEnable() != HAL_OK) {
 8002b4e:	f000 f86f 	bl	8002c30 <QSPI_WriteEnable>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <CSP_QSPI_Erase_Chip+0x14>
        return 3;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e02b      	b.n	8002bb4 <CSP_QSPI_Erase_Chip+0x6c>
    }


    /* Erasing Sequence --------------------------------- */
    sCommand.Instruction = BULK_ERASE_CMD;
 8002b5c:	23c7      	movs	r3, #199	@ 0xc7
 8002b5e:	603b      	str	r3, [r7, #0]
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002b60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b64:	61bb      	str	r3, [r7, #24]
    sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8002b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b6a:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b74:	2300      	movs	r3, #0
 8002b76:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
    sCommand.Address = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	607b      	str	r3, [r7, #4]
    sCommand.DataMode = QSPI_DATA_NONE;
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.DummyCycles = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]


    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4619      	mov	r1, r3
 8002b94:	4809      	ldr	r0, [pc, #36]	@ (8002bbc <CSP_QSPI_Erase_Chip+0x74>)
 8002b96:	f002 fc3f 	bl	8005418 <HAL_QSPI_Command>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <CSP_QSPI_Erase_Chip+0x5c>
        != HAL_OK) {
        return 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e007      	b.n	8002bb4 <CSP_QSPI_Erase_Chip+0x6c>
    }

    if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8002ba4:	f000 f80c 	bl	8002bc0 <QSPI_AutoPollingMemReady>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <CSP_QSPI_Erase_Chip+0x6a>
        return 2;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e000      	b.n	8002bb4 <CSP_QSPI_Erase_Chip+0x6c>
    }

    return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3738      	adds	r7, #56	@ 0x38
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000354 	.word	0x20000354

08002bc0 <QSPI_AutoPollingMemReady>:
uint64_t CSP_QSPI_ID(void) {
	return 0;
}

uint8_t QSPI_AutoPollingMemReady(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b094      	sub	sp, #80	@ 0x50
 8002bc4:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002bc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bca:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8002bcc:	2305      	movs	r3, #5
 8002bce:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8002bd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DummyCycles = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002be6:	2300      	movs	r3, #0
 8002be8:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002bea:	2300      	movs	r3, #0
 8002bec:	64fb      	str	r3, [r7, #76]	@ 0x4c

    sConfig.Match = 0x00;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
    sConfig.Mask = N25Q128A_SR_WIP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8002c02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c06:	617b      	str	r3, [r7, #20]

    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002c08:	463a      	mov	r2, r7
 8002c0a:	f107 0118 	add.w	r1, r7, #24
 8002c0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002c12:	4806      	ldr	r0, [pc, #24]	@ (8002c2c <QSPI_AutoPollingMemReady+0x6c>)
 8002c14:	f002 fd97 	bl	8005746 <HAL_QSPI_AutoPolling>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <QSPI_AutoPollingMemReady+0x62>
    {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <QSPI_AutoPollingMemReady+0x64>
    }

    return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3750      	adds	r7, #80	@ 0x50
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000354 	.word	0x20000354

08002c30 <QSPI_WriteEnable>:

uint8_t QSPI_WriteEnable(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b094      	sub	sp, #80	@ 0x50
 8002c34:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c3a:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.Instruction = WRITE_ENABLE_CMD;
 8002c3c:	2306      	movs	r3, #6
 8002c3e:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.DataMode = QSPI_DATA_NONE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.DummyCycles = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	647b      	str	r3, [r7, #68]	@ 0x44
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002c54:	2300      	movs	r3, #0
 8002c56:	64bb      	str	r3, [r7, #72]	@ 0x48
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8002c5c:	f107 0318 	add.w	r3, r7, #24
 8002c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c64:	4619      	mov	r1, r3
 8002c66:	4816      	ldr	r0, [pc, #88]	@ (8002cc0 <QSPI_WriteEnable+0x90>)
 8002c68:	f002 fbd6 	bl	8005418 <HAL_QSPI_Command>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <QSPI_WriteEnable+0x46>
        != HAL_OK) {
        return 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e01f      	b.n	8002cb6 <QSPI_WriteEnable+0x86>
    }

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.Match = 0x02;
 8002c76:	2302      	movs	r3, #2
 8002c78:	603b      	str	r3, [r7, #0]
    sConfig.Mask = 0x02;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	60fb      	str	r3, [r7, #12]
    sConfig.Interval = 0x10;
 8002c86:	2310      	movs	r3, #16
 8002c88:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8002c8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c8e:	617b      	str	r3, [r7, #20]

    sCommand.Instruction = READ_STATUS_REG_CMD;
 8002c90:	2305      	movs	r3, #5
 8002c92:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8002c94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8002c9a:	463a      	mov	r2, r7
 8002c9c:	f107 0118 	add.w	r1, r7, #24
 8002ca0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ca4:	4806      	ldr	r0, [pc, #24]	@ (8002cc0 <QSPI_WriteEnable+0x90>)
 8002ca6:	f002 fd4e 	bl	8005746 <HAL_QSPI_AutoPolling>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <QSPI_WriteEnable+0x84>
                             HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
        return 2;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e000      	b.n	8002cb6 <QSPI_WriteEnable+0x86>
    }

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3750      	adds	r7, #80	@ 0x50
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000354 	.word	0x20000354

08002cc4 <CSP_QSPI_Read_StatusRegister3>:

uint8_t CSP_QSPI_Read_StatusRegister3(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b090      	sub	sp, #64	@ 0x40
 8002cc8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cce:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = 0x15;
 8002cd0:	2315      	movs	r3, #21
 8002cd2:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8002cdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DummyCycles = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002cea:	2300      	movs	r3, #0
 8002cec:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.NbData = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	633b      	str	r3, [r7, #48]	@ 0x30

    HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cfe:	4619      	mov	r1, r3
 8002d00:	480c      	ldr	r0, [pc, #48]	@ (8002d34 <CSP_QSPI_Read_StatusRegister3+0x70>)
 8002d02:	f002 fb89 	bl	8005418 <HAL_QSPI_Command>

    uint8_t status = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	71fb      	strb	r3, [r7, #7]
    if (HAL_QSPI_Receive(&hqspi, &status, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) == HAL_ERROR)
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d10:	4619      	mov	r1, r3
 8002d12:	4808      	ldr	r0, [pc, #32]	@ (8002d34 <CSP_QSPI_Read_StatusRegister3+0x70>)
 8002d14:	f002 fc75 	bl	8005602 <HAL_QSPI_Receive>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <CSP_QSPI_Read_StatusRegister3+0x66>
    	return 10 + hqspi.ErrorCode;
 8002d1e:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <CSP_QSPI_Read_StatusRegister3+0x70>)
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	330a      	adds	r3, #10
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e000      	b.n	8002d2c <CSP_QSPI_Read_StatusRegister3+0x68>


    return status;
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3740      	adds	r7, #64	@ 0x40
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000354 	.word	0x20000354

08002d38 <CSP_QSPI_Read_StatusRegister2>:

uint8_t CSP_QSPI_Read_StatusRegister2(void) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b090      	sub	sp, #64	@ 0x40
 8002d3c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002d3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d42:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = 0x35;
 8002d44:	2335      	movs	r3, #53	@ 0x35
 8002d46:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8002d50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DummyCycles = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002d62:	2300      	movs	r3, #0
 8002d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.NbData = 1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	633b      	str	r3, [r7, #48]	@ 0x30

    HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002d6a:	f107 0308 	add.w	r3, r7, #8
 8002d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d72:	4619      	mov	r1, r3
 8002d74:	480c      	ldr	r0, [pc, #48]	@ (8002da8 <CSP_QSPI_Read_StatusRegister2+0x70>)
 8002d76:	f002 fb4f 	bl	8005418 <HAL_QSPI_Command>

    uint8_t status = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	71fb      	strb	r3, [r7, #7]
    if (HAL_QSPI_Receive(&hqspi, &status, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) == HAL_ERROR)
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d84:	4619      	mov	r1, r3
 8002d86:	4808      	ldr	r0, [pc, #32]	@ (8002da8 <CSP_QSPI_Read_StatusRegister2+0x70>)
 8002d88:	f002 fc3b 	bl	8005602 <HAL_QSPI_Receive>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <CSP_QSPI_Read_StatusRegister2+0x66>
    	return 10 + hqspi.ErrorCode;
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <CSP_QSPI_Read_StatusRegister2+0x70>)
 8002d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	330a      	adds	r3, #10
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	e000      	b.n	8002da0 <CSP_QSPI_Read_StatusRegister2+0x68>


    return status;
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3740      	adds	r7, #64	@ 0x40
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000354 	.word	0x20000354

08002dac <CSP_QSPI_Read_StatusRegister1>:

uint8_t CSP_QSPI_Read_StatusRegister1(void) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b090      	sub	sp, #64	@ 0x40
 8002db0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
    sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002db2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002db6:	623b      	str	r3, [r7, #32]
    sCommand.Instruction = READ_STATUS_REG_CMD;
 8002db8:	2305      	movs	r3, #5
 8002dba:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DataMode = QSPI_DATA_1_LINE;
 8002dc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DummyCycles = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sCommand.NbData = 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	633b      	str	r3, [r7, #48]	@ 0x30

    HAL_QSPI_Command(&hqspi, &sCommand, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002dde:	f107 0308 	add.w	r3, r7, #8
 8002de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de6:	4619      	mov	r1, r3
 8002de8:	480c      	ldr	r0, [pc, #48]	@ (8002e1c <CSP_QSPI_Read_StatusRegister1+0x70>)
 8002dea:	f002 fb15 	bl	8005418 <HAL_QSPI_Command>

    uint8_t status = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	71fb      	strb	r3, [r7, #7]
    if (HAL_QSPI_Receive(&hqspi, &status, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) == HAL_ERROR)
 8002df2:	1dfb      	adds	r3, r7, #7
 8002df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4808      	ldr	r0, [pc, #32]	@ (8002e1c <CSP_QSPI_Read_StatusRegister1+0x70>)
 8002dfc:	f002 fc01 	bl	8005602 <HAL_QSPI_Receive>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <CSP_QSPI_Read_StatusRegister1+0x66>
    	return 10 + hqspi.ErrorCode;
 8002e06:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <CSP_QSPI_Read_StatusRegister1+0x70>)
 8002e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	330a      	adds	r3, #10
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e000      	b.n	8002e14 <CSP_QSPI_Read_StatusRegister1+0x68>


    return status;
 8002e12:	79fb      	ldrb	r3, [r7, #7]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3740      	adds	r7, #64	@ 0x40
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000354 	.word	0x20000354

08002e20 <CSP_QSPI_EnableMemoryMappedMode>:
    return HAL_OK;
}


uint8_t CSP_QSPI_EnableMemoryMappedMode(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b090      	sub	sp, #64	@ 0x40
 8002e24:	af00      	add	r7, sp, #0
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
     */

    sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e2a:	623b      	str	r3, [r7, #32]
    sCommand.Instruction       = 0x6b;//QUAD_INOUT_FAST_READ_CMD;
 8002e2c:	236b      	movs	r3, #107	@ 0x6b
 8002e2e:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002e30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
    sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e3a:	617b      	str	r3, [r7, #20]
    sCommand.Address           = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    sCommand.DataMode          = QSPI_DATA_4_LINES;
 8002e44:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8002e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sCommand.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	61fb      	str	r3, [r7, #28]
    sCommand.NbData            = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	633b      	str	r3, [r7, #48]	@ 0x30
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	637b      	str	r3, [r7, #52]	@ 0x34
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e56:	2300      	movs	r3, #0
 8002e58:	63bb      	str	r3, [r7, #56]	@ 0x38
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]

    if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 8002e62:	463a      	mov	r2, r7
 8002e64:	f107 0308 	add.w	r3, r7, #8
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4806      	ldr	r0, [pc, #24]	@ (8002e84 <CSP_QSPI_EnableMemoryMappedMode+0x64>)
 8002e6c:	f002 fce2 	bl	8005834 <HAL_QSPI_MemoryMapped>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <CSP_QSPI_EnableMemoryMappedMode+0x5a>
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <CSP_QSPI_EnableMemoryMappedMode+0x5c>
    }
    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3740      	adds	r7, #64	@ 0x40
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000354 	.word	0x20000354

08002e88 <CSP_QSPI_WriteMemory>:
  return HAL_OK;
}


uint8_t CSP_QSPI_WriteMemory(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b096      	sub	sp, #88	@ 0x58
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002e9c:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002e9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d901      	bls.n	8002eaa <CSP_QSPI_WriteMemory+0x22>
  {
    current_size = Size;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	653b      	str	r3, [r7, #80]	@ 0x50
  end_addr = WriteAddr + Size;
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Initialize the program command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002eb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8002ebc:	2332      	movs	r3, #50	@ 0x32
 8002ebe:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002ec6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002eca:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002ed0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8002ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DummyCycles       = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Perform the write page by page */
  do
  {
    s_command.Address = current_addr;
 8002ee6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ee8:	61bb      	str	r3, [r7, #24]
    s_command.NbData  = current_size;
 8002eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eec:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 8002eee:	f7ff fe9f 	bl	8002c30 <QSPI_WriteEnable>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <CSP_QSPI_WriteMemory+0x74>
    {
      return 1;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e038      	b.n	8002f6e <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Configure the command */
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f04:	4619      	mov	r1, r3
 8002f06:	481c      	ldr	r0, [pc, #112]	@ (8002f78 <CSP_QSPI_WriteMemory+0xf0>)
 8002f08:	f002 fa86 	bl	8005418 <HAL_QSPI_Command>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <CSP_QSPI_WriteMemory+0x8e>
    {
      return 2;
 8002f12:	2302      	movs	r3, #2
 8002f14:	e02b      	b.n	8002f6e <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	68f9      	ldr	r1, [r7, #12]
 8002f1c:	4816      	ldr	r0, [pc, #88]	@ (8002f78 <CSP_QSPI_WriteMemory+0xf0>)
 8002f1e:	f002 fad9 	bl	80054d4 <HAL_QSPI_Transmit>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <CSP_QSPI_WriteMemory+0xa4>
    {
      return 3;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e020      	b.n	8002f6e <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Configure automatic polling mode to wait for end of program */
    if (QSPI_AutoPollingMemReady() != HAL_OK)
 8002f2c:	f7ff fe48 	bl	8002bc0 <QSPI_AutoPollingMemReady>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <CSP_QSPI_WriteMemory+0xb2>
    {
      return 4;
 8002f36:	2304      	movs	r3, #4
 8002f38:	e019      	b.n	8002f6e <CSP_QSPI_WriteMemory+0xe6>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8002f3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f3e:	4413      	add	r3, r2
 8002f40:	653b      	str	r3, [r7, #80]	@ 0x50
    pData += current_size;
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f46:	4413      	add	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8002f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f4c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d203      	bcs.n	8002f5e <CSP_QSPI_WriteMemory+0xd6>
 8002f56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	e001      	b.n	8002f62 <CSP_QSPI_WriteMemory+0xda>
 8002f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f62:	657b      	str	r3, [r7, #84]	@ 0x54
  } while (current_addr < end_addr);
 8002f64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d3bc      	bcc.n	8002ee6 <CSP_QSPI_WriteMemory+0x5e>

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3758      	adds	r7, #88	@ 0x58
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000354 	.word	0x20000354

08002f7c <CSP_QSPI_Read>:


uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b094      	sub	sp, #80	@ 0x50
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.Instruction       = 0x6b;//QUAD_INOUT_FAST_READ_CMD;
 8002f8e:	236b      	movs	r3, #107	@ 0x6b
 8002f90:	617b      	str	r3, [r7, #20]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f96:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002f98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f9c:	623b      	str	r3, [r7, #32]
  s_command.Address           = ReadAddr;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	61bb      	str	r3, [r7, #24]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002fa6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8002faa:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002fac:	2308      	movs	r3, #8
 8002fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.NbData            = Size;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  uint8_t status = HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4811      	ldr	r0, [pc, #68]	@ (8003010 <CSP_QSPI_Read+0x94>)
 8002fcc:	f002 fa24 	bl	8005418 <HAL_QSPI_Command>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  /* Configure the command */
  if (status != HAL_OK)
 8002fd6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <CSP_QSPI_Read+0x68>
  {
    return status;
 8002fde:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002fe2:	e010      	b.n	8003006 <CSP_QSPI_Read+0x8a>
  }

  /* Set S# timing for Read command */
  //MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);

  status = HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8002fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	4809      	ldr	r0, [pc, #36]	@ (8003010 <CSP_QSPI_Read+0x94>)
 8002fec:	f002 fb09 	bl	8005602 <HAL_QSPI_Receive>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  /* Reception of the data */
  if (status != HAL_OK)
 8002ff6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d002      	beq.n	8003004 <CSP_QSPI_Read+0x88>
  {
    return status;
 8002ffe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003002:	e000      	b.n	8003006 <CSP_QSPI_Read+0x8a>
  }

  /* Restore S# timing for nonRead commands */
  //MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3750      	adds	r7, #80	@ 0x50
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000354 	.word	0x20000354

08003014 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003014:	b590      	push	{r4, r7, lr}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800301a:	4b27      	ldr	r3, [pc, #156]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 800301c:	4a27      	ldr	r2, [pc, #156]	@ (80030bc <MX_SPI3_Init+0xa8>)
 800301e:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003020:	4b25      	ldr	r3, [pc, #148]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 8003022:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003026:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003028:	4b23      	ldr	r3, [pc, #140]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 800302a:	2200      	movs	r2, #0
 800302c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800302e:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 8003030:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003034:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003036:	4b20      	ldr	r3, [pc, #128]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800303c:	4b1e      	ldr	r3, [pc, #120]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 800303e:	2200      	movs	r2, #0
 8003040:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003042:	4b1d      	ldr	r3, [pc, #116]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 8003044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003048:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800304a:	4b1b      	ldr	r3, [pc, #108]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 800304c:	2200      	movs	r2, #0
 800304e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003050:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 8003052:	2200      	movs	r2, #0
 8003054:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003056:	4b18      	ldr	r3, [pc, #96]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 8003058:	2200      	movs	r2, #0
 800305a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800305c:	4b16      	ldr	r3, [pc, #88]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 800305e:	2200      	movs	r2, #0
 8003060:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003062:	4b15      	ldr	r3, [pc, #84]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 8003064:	2207      	movs	r2, #7
 8003066:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003068:	4b13      	ldr	r3, [pc, #76]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800306e:	4b12      	ldr	r3, [pc, #72]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 8003070:	2208      	movs	r2, #8
 8003072:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003074:	4810      	ldr	r0, [pc, #64]	@ (80030b8 <MX_SPI3_Init+0xa4>)
 8003076:	f004 f913 	bl	80072a0 <HAL_SPI_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8003080:	f7ff fcd4 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */
  uint8_t LCD_INIT_COMMANDS[] = {
 8003084:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <MX_SPI3_Init+0xac>)
 8003086:	1d3c      	adds	r4, r7, #4
 8003088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800308a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  		  0x00,
  		  0xA0,
  		  0xC8,
  		  0xAF
  };
  uint16_t LCD_INIT_COMMAND_COUNT = 16;
 800308e:	2310      	movs	r3, #16
 8003090:	82fb      	strh	r3, [r7, #22]

  sendCommand(LCD_INIT_COMMANDS, LCD_INIT_COMMAND_COUNT);
 8003092:	8afa      	ldrh	r2, [r7, #22]
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f859 	bl	8003150 <sendCommand>
  setAddress(0, 0);
 800309e:	2100      	movs	r1, #0
 80030a0:	2000      	movs	r0, #0
 80030a2:	f000 f8a5 	bl	80031f0 <setAddress>
  sendData(characters[0], 5);
 80030a6:	2105      	movs	r1, #5
 80030a8:	4806      	ldr	r0, [pc, #24]	@ (80030c4 <MX_SPI3_Init+0xb0>)
 80030aa:	f000 f879 	bl	80031a0 <sendData>
  /* USER CODE END SPI3_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd90      	pop	{r4, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000398 	.word	0x20000398
 80030bc:	40003c00 	.word	0x40003c00
 80030c0:	0800ff04 	.word	0x0800ff04
 80030c4:	20000000 	.word	0x20000000

080030c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08a      	sub	sp, #40	@ 0x28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <HAL_SPI_MspInit+0x7c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d128      	bne.n	800313c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030ea:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <HAL_SPI_MspInit+0x80>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ee:	4a16      	ldr	r2, [pc, #88]	@ (8003148 <HAL_SPI_MspInit+0x80>)
 80030f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f6:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <HAL_SPI_MspInit+0x80>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003102:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <HAL_SPI_MspInit+0x80>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	4a10      	ldr	r2, [pc, #64]	@ (8003148 <HAL_SPI_MspInit+0x80>)
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800310e:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <HAL_SPI_MspInit+0x80>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800311a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800311e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800312c:	2306      	movs	r3, #6
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4619      	mov	r1, r3
 8003136:	4805      	ldr	r0, [pc, #20]	@ (800314c <HAL_SPI_MspInit+0x84>)
 8003138:	f000 fbfe 	bl	8003938 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800313c:	bf00      	nop
 800313e:	3728      	adds	r7, #40	@ 0x28
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40003c00 	.word	0x40003c00
 8003148:	40021000 	.word	0x40021000
 800314c:	48000800 	.word	0x48000800

08003150 <sendCommand>:
  }
}

/* USER CODE BEGIN 1 */

void sendCommand(uint8_t* command, size_t count) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	  HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, RESET);
 800315a:	2200      	movs	r2, #0
 800315c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003160:	480d      	ldr	r0, [pc, #52]	@ (8003198 <sendCommand+0x48>)
 8003162:	f000 fdab 	bl	8003cbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, SET);
 8003166:	2201      	movs	r2, #1
 8003168:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800316c:	480a      	ldr	r0, [pc, #40]	@ (8003198 <sendCommand+0x48>)
 800316e:	f000 fda5 	bl	8003cbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 8003172:	2200      	movs	r2, #0
 8003174:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003178:	4807      	ldr	r0, [pc, #28]	@ (8003198 <sendCommand+0x48>)
 800317a:	f000 fd9f 	bl	8003cbc <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, command, count, 10000);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b29a      	uxth	r2, r3
 8003182:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4804      	ldr	r0, [pc, #16]	@ (800319c <sendCommand+0x4c>)
 800318a:	f004 f92c 	bl	80073e6 <HAL_SPI_Transmit>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	48000400 	.word	0x48000400
 800319c:	20000398 	.word	0x20000398

080031a0 <sendData>:

void sendData(uint8_t* data, size_t count) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	  HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, SET);
 80031aa:	2201      	movs	r2, #1
 80031ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031b0:	480d      	ldr	r0, [pc, #52]	@ (80031e8 <sendData+0x48>)
 80031b2:	f000 fd83 	bl	8003cbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, SET);
 80031b6:	2201      	movs	r2, #1
 80031b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031bc:	480a      	ldr	r0, [pc, #40]	@ (80031e8 <sendData+0x48>)
 80031be:	f000 fd7d 	bl	8003cbc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, RESET);
 80031c2:	2200      	movs	r2, #0
 80031c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80031c8:	4807      	ldr	r0, [pc, #28]	@ (80031e8 <sendData+0x48>)
 80031ca:	f000 fd77 	bl	8003cbc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, data, count, 10000);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4804      	ldr	r0, [pc, #16]	@ (80031ec <sendData+0x4c>)
 80031da:	f004 f904 	bl	80073e6 <HAL_SPI_Transmit>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	48000400 	.word	0x48000400
 80031ec:	20000398 	.word	0x20000398

080031f0 <setAddress>:

void setAddress(int page, int column) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
	uint8_t commands[3] = {
			0b10110000 | page,
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8003202:	b25b      	sxtb	r3, r3
 8003204:	b2db      	uxtb	r3, r3
	uint8_t commands[3] = {
 8003206:	733b      	strb	r3, [r7, #12]
			0b00010000 | (column >> 4),
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	111b      	asrs	r3, r3, #4
 800320c:	b25b      	sxtb	r3, r3
 800320e:	f043 0310 	orr.w	r3, r3, #16
 8003212:	b25b      	sxtb	r3, r3
 8003214:	b2db      	uxtb	r3, r3
	uint8_t commands[3] = {
 8003216:	737b      	strb	r3, [r7, #13]
			0b00000000 | (column & 0x0F)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	b2db      	uxtb	r3, r3
	uint8_t commands[3] = {
 8003222:	73bb      	strb	r3, [r7, #14]
	};

	sendCommand(commands, 3);
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	2103      	movs	r1, #3
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff ff90 	bl	8003150 <sendCommand>
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800323e:	f107 0308 	add.w	r3, r7, #8
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003248:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <HAL_MspInit+0x60>)
 800324a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324c:	4a12      	ldr	r2, [pc, #72]	@ (8003298 <HAL_MspInit+0x60>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6613      	str	r3, [r2, #96]	@ 0x60
 8003254:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <HAL_MspInit+0x60>)
 8003256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <HAL_MspInit+0x60>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003264:	4a0c      	ldr	r2, [pc, #48]	@ (8003298 <HAL_MspInit+0x60>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	@ 0x58
 800326c:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <HAL_MspInit+0x60>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8003278:	2300      	movs	r3, #0
 800327a:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	4618      	mov	r0, r3
 8003286:	f001 fef1 	bl	800506c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800328a:	f001 ff4f 	bl	800512c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800328e:	bf00      	nop
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000

0800329c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032a0:	bf00      	nop
 80032a2:	e7fd      	b.n	80032a0 <NMI_Handler+0x4>

080032a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <HardFault_Handler+0x4>

080032ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <MemManage_Handler+0x4>

080032b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <BusFault_Handler+0x4>

080032bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <UsageFault_Handler+0x4>

080032c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d2:	b480      	push	{r7}
 80032d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f2:	f000 f98d 	bl	8003610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}

080032fa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL0_Pin);
 80032fe:	2001      	movs	r0, #1
 8003300:	f000 fcf4 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}

08003308 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL1_Pin);
 800330c:	2002      	movs	r0, #2
 800330e:	f000 fced 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}

08003316 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL2_Pin);
 800331a:	2004      	movs	r0, #4
 800331c:	f000 fce6 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}

08003324 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL3_Pin);
 8003328:	2008      	movs	r0, #8
 800332a:	f000 fcdf 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}

08003332 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL4_Pin);
 8003336:	2010      	movs	r0, #16
 8003338:	f000 fcd8 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}

08003340 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COL5_Pin);
 8003344:	2020      	movs	r0, #32
 8003346:	f000 fcd1 	bl	8003cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003354:	4802      	ldr	r0, [pc, #8]	@ (8003360 <OTG_FS_IRQHandler+0x10>)
 8003356:	f000 fe34 	bl	8003fc2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200028f8 	.word	0x200028f8

08003364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return 1;
 8003368:	2301      	movs	r3, #1
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <_kill>:

int _kill(int pid, int sig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800337e:	f009 fa89 	bl	800c894 <__errno>
 8003382:	4603      	mov	r3, r0
 8003384:	2216      	movs	r2, #22
 8003386:	601a      	str	r2, [r3, #0]
  return -1;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <_exit>:

void _exit (int status)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ffe7 	bl	8003374 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033a6:	bf00      	nop
 80033a8:	e7fd      	b.n	80033a6 <_exit+0x12>

080033aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e00a      	b.n	80033d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033bc:	f3af 8000 	nop.w
 80033c0:	4601      	mov	r1, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	60ba      	str	r2, [r7, #8]
 80033c8:	b2ca      	uxtb	r2, r1
 80033ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	3301      	adds	r3, #1
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	dbf0      	blt.n	80033bc <_read+0x12>
  }

  return len;
 80033da:	687b      	ldr	r3, [r7, #4]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e009      	b.n	800340a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	60ba      	str	r2, [r7, #8]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3301      	adds	r3, #1
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	dbf1      	blt.n	80033f6 <_write+0x12>
  }
  return len;
 8003412:	687b      	ldr	r3, [r7, #4]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <_close>:

int _close(int file)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003424:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003444:	605a      	str	r2, [r3, #4]
  return 0;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_isatty>:

int _isatty(int file)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800345c:	2301      	movs	r3, #1
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800348c:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <_sbrk+0x5c>)
 800348e:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <_sbrk+0x60>)
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003498:	4b13      	ldr	r3, [pc, #76]	@ (80034e8 <_sbrk+0x64>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034a0:	4b11      	ldr	r3, [pc, #68]	@ (80034e8 <_sbrk+0x64>)
 80034a2:	4a12      	ldr	r2, [pc, #72]	@ (80034ec <_sbrk+0x68>)
 80034a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <_sbrk+0x64>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d207      	bcs.n	80034c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034b4:	f009 f9ee 	bl	800c894 <__errno>
 80034b8:	4603      	mov	r3, r0
 80034ba:	220c      	movs	r2, #12
 80034bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	e009      	b.n	80034d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034c4:	4b08      	ldr	r3, [pc, #32]	@ (80034e8 <_sbrk+0x64>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ca:	4b07      	ldr	r3, [pc, #28]	@ (80034e8 <_sbrk+0x64>)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	4a05      	ldr	r2, [pc, #20]	@ (80034e8 <_sbrk+0x64>)
 80034d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20018000 	.word	0x20018000
 80034e4:	00000400 	.word	0x00000400
 80034e8:	200003fc 	.word	0x200003fc
 80034ec:	20003170 	.word	0x20003170

080034f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034f4:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <SystemInit+0x20>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034fa:	4a05      	ldr	r2, [pc, #20]	@ (8003510 <SystemInit+0x20>)
 80034fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003504:	bf00      	nop
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003514:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800354c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003518:	f7ff ffea 	bl	80034f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800351c:	480c      	ldr	r0, [pc, #48]	@ (8003550 <LoopForever+0x6>)
  ldr r1, =_edata
 800351e:	490d      	ldr	r1, [pc, #52]	@ (8003554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003520:	4a0d      	ldr	r2, [pc, #52]	@ (8003558 <LoopForever+0xe>)
  movs r3, #0
 8003522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003524:	e002      	b.n	800352c <LoopCopyDataInit>

08003526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800352a:	3304      	adds	r3, #4

0800352c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800352c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800352e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003530:	d3f9      	bcc.n	8003526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003532:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003534:	4c0a      	ldr	r4, [pc, #40]	@ (8003560 <LoopForever+0x16>)
  movs r3, #0
 8003536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003538:	e001      	b.n	800353e <LoopFillZerobss>

0800353a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800353a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800353c:	3204      	adds	r2, #4

0800353e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800353e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003540:	d3fb      	bcc.n	800353a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003542:	f009 f9ad 	bl	800c8a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003546:	f7fe feab 	bl	80022a0 <main>

0800354a <LoopForever>:

LoopForever:
    b LoopForever
 800354a:	e7fe      	b.n	800354a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800354c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003554:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 8003558:	080103f0 	.word	0x080103f0
  ldr r2, =_sbss
 800355c:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8003560:	20003170 	.word	0x20003170

08003564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003564:	e7fe      	b.n	8003564 <ADC1_2_IRQHandler>

08003566 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003570:	2003      	movs	r0, #3
 8003572:	f000 f961 	bl	8003838 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003576:	200f      	movs	r0, #15
 8003578:	f000 f80e 	bl	8003598 <HAL_InitTick>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	71fb      	strb	r3, [r7, #7]
 8003586:	e001      	b.n	800358c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003588:	f7ff fe56 	bl	8003238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800358c:	79fb      	ldrb	r3, [r7, #7]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80035a4:	4b17      	ldr	r3, [pc, #92]	@ (8003604 <HAL_InitTick+0x6c>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d023      	beq.n	80035f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035ac:	4b16      	ldr	r3, [pc, #88]	@ (8003608 <HAL_InitTick+0x70>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b14      	ldr	r3, [pc, #80]	@ (8003604 <HAL_InitTick+0x6c>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f96d 	bl	80038a2 <HAL_SYSTICK_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b0f      	cmp	r3, #15
 80035d2:	d809      	bhi.n	80035e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d4:	2200      	movs	r2, #0
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	f000 f937 	bl	800384e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035e0:	4a0a      	ldr	r2, [pc, #40]	@ (800360c <HAL_InitTick+0x74>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e007      	b.n	80035f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
 80035ec:	e004      	b.n	80035f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
 80035f2:	e001      	b.n	80035f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000003c 	.word	0x2000003c
 8003608:	20000034 	.word	0x20000034
 800360c:	20000038 	.word	0x20000038

08003610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003614:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <HAL_IncTick+0x20>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <HAL_IncTick+0x24>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4413      	add	r3, r2
 8003620:	4a04      	ldr	r2, [pc, #16]	@ (8003634 <HAL_IncTick+0x24>)
 8003622:	6013      	str	r3, [r2, #0]
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	2000003c 	.word	0x2000003c
 8003634:	20000400 	.word	0x20000400

08003638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return uwTick;
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <HAL_GetTick+0x14>)
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000400 	.word	0x20000400

08003650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003658:	f7ff ffee 	bl	8003638 <HAL_GetTick>
 800365c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d005      	beq.n	8003676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800366a:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <HAL_Delay+0x44>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003676:	bf00      	nop
 8003678:	f7ff ffde 	bl	8003638 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	429a      	cmp	r2, r3
 8003686:	d8f7      	bhi.n	8003678 <HAL_Delay+0x28>
  {
  }
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000003c 	.word	0x2000003c

08003698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a8:	4b0c      	ldr	r3, [pc, #48]	@ (80036dc <__NVIC_SetPriorityGrouping+0x44>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036b4:	4013      	ands	r3, r2
 80036b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ca:	4a04      	ldr	r2, [pc, #16]	@ (80036dc <__NVIC_SetPriorityGrouping+0x44>)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	60d3      	str	r3, [r2, #12]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e4:	4b04      	ldr	r3, [pc, #16]	@ (80036f8 <__NVIC_GetPriorityGrouping+0x18>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	f003 0307 	and.w	r3, r3, #7
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	2b00      	cmp	r3, #0
 800370c:	db0b      	blt.n	8003726 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	f003 021f 	and.w	r2, r3, #31
 8003714:	4907      	ldr	r1, [pc, #28]	@ (8003734 <__NVIC_EnableIRQ+0x38>)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2001      	movs	r0, #1
 800371e:	fa00 f202 	lsl.w	r2, r0, r2
 8003722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000e100 	.word	0xe000e100

08003738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003748:	2b00      	cmp	r3, #0
 800374a:	db0a      	blt.n	8003762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	490c      	ldr	r1, [pc, #48]	@ (8003784 <__NVIC_SetPriority+0x4c>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	0112      	lsls	r2, r2, #4
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	440b      	add	r3, r1
 800375c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003760:	e00a      	b.n	8003778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4908      	ldr	r1, [pc, #32]	@ (8003788 <__NVIC_SetPriority+0x50>)
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	3b04      	subs	r3, #4
 8003770:	0112      	lsls	r2, r2, #4
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	440b      	add	r3, r1
 8003776:	761a      	strb	r2, [r3, #24]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000e100 	.word	0xe000e100
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800378c:	b480      	push	{r7}
 800378e:	b089      	sub	sp, #36	@ 0x24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f1c3 0307 	rsb	r3, r3, #7
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	bf28      	it	cs
 80037aa:	2304      	movcs	r3, #4
 80037ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2b06      	cmp	r3, #6
 80037b4:	d902      	bls.n	80037bc <NVIC_EncodePriority+0x30>
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3b03      	subs	r3, #3
 80037ba:	e000      	b.n	80037be <NVIC_EncodePriority+0x32>
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c0:	f04f 32ff 	mov.w	r2, #4294967295
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43da      	mvns	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	401a      	ands	r2, r3
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d4:	f04f 31ff 	mov.w	r1, #4294967295
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	43d9      	mvns	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e4:	4313      	orrs	r3, r2
         );
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3724      	adds	r7, #36	@ 0x24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003804:	d301      	bcc.n	800380a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003806:	2301      	movs	r3, #1
 8003808:	e00f      	b.n	800382a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800380a:	4a0a      	ldr	r2, [pc, #40]	@ (8003834 <SysTick_Config+0x40>)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003812:	210f      	movs	r1, #15
 8003814:	f04f 30ff 	mov.w	r0, #4294967295
 8003818:	f7ff ff8e 	bl	8003738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800381c:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <SysTick_Config+0x40>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003822:	4b04      	ldr	r3, [pc, #16]	@ (8003834 <SysTick_Config+0x40>)
 8003824:	2207      	movs	r2, #7
 8003826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	e000e010 	.word	0xe000e010

08003838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff29 	bl	8003698 <__NVIC_SetPriorityGrouping>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003860:	f7ff ff3e 	bl	80036e0 <__NVIC_GetPriorityGrouping>
 8003864:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	6978      	ldr	r0, [r7, #20]
 800386c:	f7ff ff8e 	bl	800378c <NVIC_EncodePriority>
 8003870:	4602      	mov	r2, r0
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	4611      	mov	r1, r2
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff5d 	bl	8003738 <__NVIC_SetPriority>
}
 800387e:	bf00      	nop
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	4603      	mov	r3, r0
 800388e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff31 	bl	80036fc <__NVIC_EnableIRQ>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ffa2 	bl	80037f4 <SysTick_Config>
 80038b0:	4603      	mov	r3, r0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d008      	beq.n	80038e4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2204      	movs	r2, #4
 80038d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e022      	b.n	800392a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 020e 	bic.w	r2, r2, #14
 80038f2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003908:	f003 021c 	and.w	r2, r3, #28
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	2101      	movs	r1, #1
 8003912:	fa01 f202 	lsl.w	r2, r1, r2
 8003916:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003938:	b480      	push	{r7}
 800393a:	b087      	sub	sp, #28
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003946:	e17f      	b.n	8003c48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2101      	movs	r1, #1
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fa01 f303 	lsl.w	r3, r1, r3
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8171 	beq.w	8003c42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d005      	beq.n	8003978 <HAL_GPIO_Init+0x40>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d130      	bne.n	80039da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4013      	ands	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ae:	2201      	movs	r2, #1
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4013      	ands	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 0201 	and.w	r2, r3, #1
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d118      	bne.n	8003a18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039ec:	2201      	movs	r2, #1
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	08db      	lsrs	r3, r3, #3
 8003a02:	f003 0201 	and.w	r2, r3, #1
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d017      	beq.n	8003a54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2203      	movs	r2, #3
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4013      	ands	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d123      	bne.n	8003aa8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	08da      	lsrs	r2, r3, #3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3208      	adds	r2, #8
 8003a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	220f      	movs	r2, #15
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4013      	ands	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	08da      	lsrs	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3208      	adds	r2, #8
 8003aa2:	6939      	ldr	r1, [r7, #16]
 8003aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0203 	and.w	r2, r3, #3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80ac 	beq.w	8003c42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aea:	4b5f      	ldr	r3, [pc, #380]	@ (8003c68 <HAL_GPIO_Init+0x330>)
 8003aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aee:	4a5e      	ldr	r2, [pc, #376]	@ (8003c68 <HAL_GPIO_Init+0x330>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003af6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c68 <HAL_GPIO_Init+0x330>)
 8003af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b02:	4a5a      	ldr	r2, [pc, #360]	@ (8003c6c <HAL_GPIO_Init+0x334>)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	089b      	lsrs	r3, r3, #2
 8003b08:	3302      	adds	r3, #2
 8003b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b2c:	d025      	beq.n	8003b7a <HAL_GPIO_Init+0x242>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a4f      	ldr	r2, [pc, #316]	@ (8003c70 <HAL_GPIO_Init+0x338>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01f      	beq.n	8003b76 <HAL_GPIO_Init+0x23e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a4e      	ldr	r2, [pc, #312]	@ (8003c74 <HAL_GPIO_Init+0x33c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d019      	beq.n	8003b72 <HAL_GPIO_Init+0x23a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a4d      	ldr	r2, [pc, #308]	@ (8003c78 <HAL_GPIO_Init+0x340>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_Init+0x236>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a4c      	ldr	r2, [pc, #304]	@ (8003c7c <HAL_GPIO_Init+0x344>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00d      	beq.n	8003b6a <HAL_GPIO_Init+0x232>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <HAL_GPIO_Init+0x348>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <HAL_GPIO_Init+0x22e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a4a      	ldr	r2, [pc, #296]	@ (8003c84 <HAL_GPIO_Init+0x34c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_GPIO_Init+0x22a>
 8003b5e:	2306      	movs	r3, #6
 8003b60:	e00c      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b62:	2307      	movs	r3, #7
 8003b64:	e00a      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b66:	2305      	movs	r3, #5
 8003b68:	e008      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	e006      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e004      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e002      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <HAL_GPIO_Init+0x244>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	f002 0203 	and.w	r2, r2, #3
 8003b82:	0092      	lsls	r2, r2, #2
 8003b84:	4093      	lsls	r3, r2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b8c:	4937      	ldr	r1, [pc, #220]	@ (8003c6c <HAL_GPIO_Init+0x334>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bbe:	4a32      	ldr	r2, [pc, #200]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bc4:	4b30      	ldr	r3, [pc, #192]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003be8:	4a27      	ldr	r2, [pc, #156]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bee:	4b26      	ldr	r3, [pc, #152]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c12:	4a1d      	ldr	r2, [pc, #116]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c18:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c3c:	4a12      	ldr	r2, [pc, #72]	@ (8003c88 <HAL_GPIO_Init+0x350>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	3301      	adds	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f47f ae78 	bne.w	8003948 <HAL_GPIO_Init+0x10>
  }
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	48000400 	.word	0x48000400
 8003c74:	48000800 	.word	0x48000800
 8003c78:	48000c00 	.word	0x48000c00
 8003c7c:	48001000 	.word	0x48001000
 8003c80:	48001400 	.word	0x48001400
 8003c84:	48001800 	.word	0x48001800
 8003c88:	40010400 	.word	0x40010400

08003c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	887b      	ldrh	r3, [r7, #2]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	e001      	b.n	8003cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	807b      	strh	r3, [r7, #2]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ccc:	787b      	ldrb	r3, [r7, #1]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cd8:	e002      	b.n	8003ce0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cda:	887a      	ldrh	r2, [r7, #2]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cf6:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d02:	4a05      	ldr	r2, [pc, #20]	@ (8003d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fb70 	bl	80023f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40010400 	.word	0x40010400

08003d1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1e:	b08f      	sub	sp, #60	@ 0x3c
 8003d20:	af0a      	add	r7, sp, #40	@ 0x28
 8003d22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e116      	b.n	8003f5c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f007 fb81 	bl	800b450 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2203      	movs	r2, #3
 8003d52:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f003 feec 	bl	8007b4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	687e      	ldr	r6, [r7, #4]
 8003d7a:	466d      	mov	r5, sp
 8003d7c:	f106 0410 	add.w	r4, r6, #16
 8003d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d90:	1d33      	adds	r3, r6, #4
 8003d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d94:	6838      	ldr	r0, [r7, #0]
 8003d96:	f003 fdff 	bl	8007998 <USB_CoreInit>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0d7      	b.n	8003f5c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f003 feda 	bl	8007b6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e04a      	b.n	8003e54 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	333d      	adds	r3, #61	@ 0x3d
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	333c      	adds	r3, #60	@ 0x3c
 8003de2:	7bfa      	ldrb	r2, [r7, #15]
 8003de4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	b298      	uxth	r0, r3
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3356      	adds	r3, #86	@ 0x56
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dfe:	7bfa      	ldrb	r2, [r7, #15]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	3340      	adds	r3, #64	@ 0x40
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3344      	adds	r3, #68	@ 0x44
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	3348      	adds	r3, #72	@ 0x48
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	334c      	adds	r3, #76	@ 0x4c
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	3301      	adds	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d3af      	bcc.n	8003dbe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
 8003e62:	e044      	b.n	8003eee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003e76:	2200      	movs	r2, #0
 8003e78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ebc:	7bfa      	ldrb	r2, [r7, #15]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ed2:	7bfa      	ldrb	r2, [r7, #15]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	3301      	adds	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d3b5      	bcc.n	8003e64 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	603b      	str	r3, [r7, #0]
 8003efe:	687e      	ldr	r6, [r7, #4]
 8003f00:	466d      	mov	r5, sp
 8003f02:	f106 0410 	add.w	r4, r6, #16
 8003f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f12:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f16:	1d33      	adds	r3, r6, #4
 8003f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f1a:	6838      	ldr	r0, [r7, #0]
 8003f1c:	f003 fe72 	bl	8007c04 <USB_DevInit>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e014      	b.n	8003f5c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d102      	bne.n	8003f50 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f001 f86a 	bl	8005024 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f004 fe20 	bl	8008b9a <USB_DevDisconnect>

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_PCD_Start+0x1c>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e01c      	b.n	8003fba <HAL_PCD_Start+0x56>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d105      	bne.n	8003f9c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 fdc1 	bl	8007b28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f004 fdd4 	bl	8008b58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fc2:	b590      	push	{r4, r7, lr}
 8003fc4:	b08d      	sub	sp, #52	@ 0x34
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f004 fe92 	bl	8008d02 <USB_GetMode>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 847e 	bne.w	80048e2 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f004 fdf6 	bl	8008bdc <USB_ReadInterrupts>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8474 	beq.w	80048e0 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f004 fde3 	bl	8008bdc <USB_ReadInterrupts>
 8004016:	4603      	mov	r3, r0
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b02      	cmp	r3, #2
 800401e:	d107      	bne.n	8004030 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f002 0202 	and.w	r2, r2, #2
 800402e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f004 fdd1 	bl	8008bdc <USB_ReadInterrupts>
 800403a:	4603      	mov	r3, r0
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b10      	cmp	r3, #16
 8004042:	d161      	bne.n	8004108 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0210 	bic.w	r2, r2, #16
 8004052:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	0c5b      	lsrs	r3, r3, #17
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	2b02      	cmp	r3, #2
 800407e:	d124      	bne.n	80040ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d035      	beq.n	80040f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	6a38      	ldr	r0, [r7, #32]
 80040a0:	f004 fc08 	bl	80088b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040b0:	441a      	add	r2, r3
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	695a      	ldr	r2, [r3, #20]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040c2:	441a      	add	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	615a      	str	r2, [r3, #20]
 80040c8:	e016      	b.n	80040f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	0c5b      	lsrs	r3, r3, #17
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d110      	bne.n	80040f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80040dc:	2208      	movs	r2, #8
 80040de:	4619      	mov	r1, r3
 80040e0:	6a38      	ldr	r0, [r7, #32]
 80040e2:	f004 fbe7 	bl	80088b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040f2:	441a      	add	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0210 	orr.w	r2, r2, #16
 8004106:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f004 fd65 	bl	8008bdc <USB_ReadInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004118:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800411c:	f040 80a7 	bne.w	800426e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f004 fd6a 	bl	8008c02 <USB_ReadDevAllOutEpInterrupt>
 800412e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004130:	e099      	b.n	8004266 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 808e 	beq.w	800425a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f004 fd8e 	bl	8008c6a <USB_ReadDevOutEPInterrupt>
 800414e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00c      	beq.n	8004174 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	2301      	movs	r3, #1
 800416a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800416c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fe7e 	bl	8004e70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418a:	461a      	mov	r2, r3
 800418c:	2308      	movs	r3, #8
 800418e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 feba 	bl	8004f0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ae:	461a      	mov	r2, r3
 80041b0:	2310      	movs	r3, #16
 80041b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d030      	beq.n	8004220 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c6:	2b80      	cmp	r3, #128	@ 0x80
 80041c8:	d109      	bne.n	80041de <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041dc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80041de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	3304      	adds	r3, #4
 80041f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	78db      	ldrb	r3, [r3, #3]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d108      	bne.n	800420e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	2200      	movs	r2, #0
 8004200:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004204:	b2db      	uxtb	r3, r3
 8004206:	4619      	mov	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f007 fa75 	bl	800b6f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	2302      	movs	r3, #2
 800421e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004236:	461a      	mov	r2, r3
 8004238:	2320      	movs	r3, #32
 800423a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004252:	461a      	mov	r2, r3
 8004254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004258:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	3301      	adds	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f af62 	bne.w	8004132 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f004 fcb2 	bl	8008bdc <USB_ReadInterrupts>
 8004278:	4603      	mov	r3, r0
 800427a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800427e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004282:	f040 80a4 	bne.w	80043ce <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f004 fcd3 	bl	8008c36 <USB_ReadDevAllInEpInterrupt>
 8004290:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004296:	e096      	b.n	80043c6 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 808b 	beq.w	80043ba <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 fcf9 	bl	8008ca6 <USB_ReadDevInEPInterrupt>
 80042b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d020      	beq.n	8004302 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	2201      	movs	r2, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43db      	mvns	r3, r3
 80042da:	69f9      	ldr	r1, [r7, #28]
 80042dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042e0:	4013      	ands	r3, r2
 80042e2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042f0:	461a      	mov	r2, r3
 80042f2:	2301      	movs	r3, #1
 80042f4:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f007 f966 	bl	800b5ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004318:	461a      	mov	r2, r3
 800431a:	2308      	movs	r3, #8
 800431c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	2310      	movs	r3, #16
 8004338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004350:	461a      	mov	r2, r3
 8004352:	2340      	movs	r3, #64	@ 0x40
 8004354:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d023      	beq.n	80043a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004360:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004362:	6a38      	ldr	r0, [r7, #32]
 8004364:	f003 fd90 	bl	8007e88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	3338      	adds	r3, #56	@ 0x38
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	4413      	add	r3, r2
 8004378:	3304      	adds	r3, #4
 800437a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	78db      	ldrb	r3, [r3, #3]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d108      	bne.n	8004396 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2200      	movs	r2, #0
 8004388:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	b2db      	uxtb	r3, r3
 800438e:	4619      	mov	r1, r3
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f007 f9c3 	bl	800b71c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a2:	461a      	mov	r2, r3
 80043a4:	2302      	movs	r3, #2
 80043a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fcd2 	bl	8004d5e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	3301      	adds	r3, #1
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f47f af65 	bne.w	8004298 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f004 fc02 	bl	8008bdc <USB_ReadInterrupts>
 80043d8:	4603      	mov	r3, r0
 80043da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043e2:	d122      	bne.n	800442a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d108      	bne.n	8004414 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800440a:	2100      	movs	r1, #0
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f007 fbf7 	bl	800bc00 <HAL_PCDEx_LPM_Callback>
 8004412:	e002      	b.n	800441a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f007 f947 	bl	800b6a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	695a      	ldr	r2, [r3, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004428:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f004 fbd4 	bl	8008bdc <USB_ReadInterrupts>
 8004434:	4603      	mov	r3, r0
 8004436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800443a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800443e:	d112      	bne.n	8004466 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d102      	bne.n	8004456 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f007 f903 	bl	800b65c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004464:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f004 fbb6 	bl	8008bdc <USB_ReadInterrupts>
 8004470:	4603      	mov	r3, r0
 8004472:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004476:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800447a:	d121      	bne.n	80044c0 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800448a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d111      	bne.n	80044ba <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	f003 020f 	and.w	r2, r3, #15
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044b0:	2101      	movs	r1, #1
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f007 fba4 	bl	800bc00 <HAL_PCDEx_LPM_Callback>
 80044b8:	e002      	b.n	80044c0 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f007 f8ce 	bl	800b65c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f004 fb89 	bl	8008bdc <USB_ReadInterrupts>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d4:	f040 80b5 	bne.w	8004642 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044e6:	f023 0301 	bic.w	r3, r3, #1
 80044ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2110      	movs	r1, #16
 80044f2:	4618      	mov	r0, r3
 80044f4:	f003 fcc8 	bl	8007e88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044f8:	2300      	movs	r3, #0
 80044fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044fc:	e046      	b.n	800458c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80044fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800450a:	461a      	mov	r2, r3
 800450c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004510:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004522:	0151      	lsls	r1, r2, #5
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	440a      	add	r2, r1
 8004528:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800452c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004530:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800453e:	461a      	mov	r2, r3
 8004540:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004544:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004560:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004564:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004580:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004584:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004588:	3301      	adds	r3, #1
 800458a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004592:	429a      	cmp	r2, r3
 8004594:	d3b3      	bcc.n	80044fe <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045a4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80045a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d016      	beq.n	80045e0 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045c2:	f043 030b 	orr.w	r3, r3, #11
 80045c6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045d8:	f043 030b 	orr.w	r3, r3, #11
 80045dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80045de:	e015      	b.n	800460c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045f2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80045f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004606:	f043 030b 	orr.w	r3, r3, #11
 800460a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800461a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800461e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f004 fb99 	bl	8008d64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f004 fac8 	bl	8008bdc <USB_ReadInterrupts>
 800464c:	4603      	mov	r3, r0
 800464e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004656:	d124      	bne.n	80046a2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f004 fb5e 	bl	8008d1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f003 fc8b 	bl	8007f82 <USB_GetDevSpeed>
 800466c:	4603      	mov	r3, r0
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681c      	ldr	r4, [r3, #0]
 8004678:	f002 f8ea 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 800467c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	4620      	mov	r0, r4
 8004688:	f003 f9b2 	bl	80079f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f006 ffc6 	bl	800b61e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80046a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f004 fa98 	bl	8008bdc <USB_ReadInterrupts>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d10a      	bne.n	80046cc <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f006 ffa3 	bl	800b602 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f002 0208 	and.w	r2, r2, #8
 80046ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f004 fa83 	bl	8008bdc <USB_ReadInterrupts>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046dc:	2b80      	cmp	r3, #128	@ 0x80
 80046de:	d122      	bne.n	8004726 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046ec:	2301      	movs	r3, #1
 80046ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f0:	e014      	b.n	800471c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d105      	bne.n	8004716 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	b2db      	uxtb	r3, r3
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 faf3 	bl	8004cfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	3301      	adds	r3, #1
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004722:	429a      	cmp	r2, r3
 8004724:	d3e5      	bcc.n	80046f2 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f004 fa56 	bl	8008bdc <USB_ReadInterrupts>
 8004730:	4603      	mov	r3, r0
 8004732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800473a:	d13b      	bne.n	80047b4 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800473c:	2301      	movs	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004740:	e02b      	b.n	800479a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004756:	4613      	mov	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	3340      	adds	r3, #64	@ 0x40
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d115      	bne.n	8004794 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004768:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800476a:	2b00      	cmp	r3, #0
 800476c:	da12      	bge.n	8004794 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	333f      	adds	r3, #63	@ 0x3f
 800477e:	2201      	movs	r2, #1
 8004780:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800478a:	b2db      	uxtb	r3, r3
 800478c:	4619      	mov	r1, r3
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fab4 	bl	8004cfc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	3301      	adds	r3, #1
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d3ce      	bcc.n	8004742 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80047b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f004 fa0f 	bl	8008bdc <USB_ReadInterrupts>
 80047be:	4603      	mov	r3, r0
 80047c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047c8:	d155      	bne.n	8004876 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047ca:	2301      	movs	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ce:	e045      	b.n	800485c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d12e      	bne.n	8004856 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da2b      	bge.n	8004856 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 800480a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800480e:	429a      	cmp	r2, r3
 8004810:	d121      	bne.n	8004856 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800484e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004852:	6053      	str	r3, [r2, #4]
            break;
 8004854:	e007      	b.n	8004866 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	3301      	adds	r3, #1
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004862:	429a      	cmp	r2, r3
 8004864:	d3b4      	bcc.n	80047d0 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f004 f9ae 	bl	8008bdc <USB_ReadInterrupts>
 8004880:	4603      	mov	r3, r0
 8004882:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488a:	d10a      	bne.n	80048a2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f006 ff57 	bl	800b740 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80048a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f004 f998 	bl	8008bdc <USB_ReadInterrupts>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d115      	bne.n	80048e2 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f006 ff47 	bl	800b75c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	e000      	b.n	80048e2 <HAL_PCD_IRQHandler+0x920>
      return;
 80048e0:	bf00      	nop
    }
  }
}
 80048e2:	3734      	adds	r7, #52	@ 0x34
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd90      	pop	{r4, r7, pc}

080048e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_PCD_SetAddress+0x1a>
 80048fe:	2302      	movs	r3, #2
 8004900:	e013      	b.n	800492a <HAL_PCD_SetAddress+0x42>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	78fa      	ldrb	r2, [r7, #3]
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f004 f8f6 	bl	8008b0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
 800493a:	4608      	mov	r0, r1
 800493c:	4611      	mov	r1, r2
 800493e:	461a      	mov	r2, r3
 8004940:	4603      	mov	r3, r0
 8004942:	70fb      	strb	r3, [r7, #3]
 8004944:	460b      	mov	r3, r1
 8004946:	803b      	strh	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004954:	2b00      	cmp	r3, #0
 8004956:	da0f      	bge.n	8004978 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f003 020f 	and.w	r2, r3, #15
 800495e:	4613      	mov	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	3338      	adds	r3, #56	@ 0x38
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4413      	add	r3, r2
 800496c:	3304      	adds	r3, #4
 800496e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	705a      	strb	r2, [r3, #1]
 8004976:	e00f      	b.n	8004998 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 020f 	and.w	r2, r3, #15
 800497e:	4613      	mov	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	3304      	adds	r3, #4
 8004990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049a4:	883a      	ldrh	r2, [r7, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	78ba      	ldrb	r2, [r7, #2]
 80049ae:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	785b      	ldrb	r3, [r3, #1]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049c2:	78bb      	ldrb	r3, [r7, #2]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d102      	bne.n	80049ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_PCD_EP_Open+0xaa>
 80049d8:	2302      	movs	r3, #2
 80049da:	e00e      	b.n	80049fa <HAL_PCD_EP_Open+0xc8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f003 fae8 	bl	8007fc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80049f8:	7afb      	ldrb	r3, [r7, #11]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da0f      	bge.n	8004a36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	f003 020f 	and.w	r2, r3, #15
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	3338      	adds	r3, #56	@ 0x38
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	705a      	strb	r2, [r3, #1]
 8004a34:	e00f      	b.n	8004a56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	f003 020f 	and.w	r2, r3, #15
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_PCD_EP_Close+0x6e>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e00e      	b.n	8004a8e <HAL_PCD_EP_Close+0x8c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 fb26 	bl	80080d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b086      	sub	sp, #24
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa6:	7afb      	ldrb	r3, [r7, #11]
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	3304      	adds	r3, #4
 8004abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad8:	7afb      	ldrb	r3, [r7, #11]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6979      	ldr	r1, [r7, #20]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f003 fbcc 	bl	8008288 <USB_EPStartXfer>

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f003 020f 	and.w	r2, r3, #15
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004b1c:	681b      	ldr	r3, [r3, #0]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b086      	sub	sp, #24
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	460b      	mov	r3, r1
 8004b38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b3a:	7afb      	ldrb	r3, [r7, #11]
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	4613      	mov	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	3338      	adds	r3, #56	@ 0x38
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3304      	adds	r3, #4
 8004b50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2200      	movs	r2, #0
 8004b62:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2201      	movs	r2, #1
 8004b68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
 8004b6c:	f003 030f 	and.w	r3, r3, #15
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f003 fb83 	bl	8008288 <USB_EPStartXfer>

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b98:	78fb      	ldrb	r3, [r7, #3]
 8004b9a:	f003 020f 	and.w	r2, r3, #15
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d901      	bls.n	8004baa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e04e      	b.n	8004c48 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da0f      	bge.n	8004bd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 020f 	and.w	r2, r3, #15
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	3338      	adds	r3, #56	@ 0x38
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	705a      	strb	r2, [r3, #1]
 8004bd0:	e00d      	b.n	8004bee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	4413      	add	r3, r2
 8004be4:	3304      	adds	r3, #4
 8004be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_PCD_EP_SetStall+0x82>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e01c      	b.n	8004c48 <HAL_PCD_EP_SetStall+0xbc>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f003 fea1 	bl	8008964 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d108      	bne.n	8004c3e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f004 f893 	bl	8008d64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c5c:	78fb      	ldrb	r3, [r7, #3]
 8004c5e:	f003 020f 	and.w	r2, r3, #15
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d901      	bls.n	8004c6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e042      	b.n	8004cf4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	da0f      	bge.n	8004c96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	4413      	add	r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	3338      	adds	r3, #56	@ 0x38
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	4413      	add	r3, r2
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	705a      	strb	r2, [r3, #1]
 8004c94:	e00f      	b.n	8004cb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	4413      	add	r3, r2
 8004cac:	3304      	adds	r3, #4
 8004cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_PCD_EP_ClrStall+0x86>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e00e      	b.n	8004cf4 <HAL_PCD_EP_ClrStall+0xa4>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68f9      	ldr	r1, [r7, #12]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f003 feab 	bl	8008a40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	da0c      	bge.n	8004d2a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	f003 020f 	and.w	r2, r3, #15
 8004d16:	4613      	mov	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	3338      	adds	r3, #56	@ 0x38
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4413      	add	r3, r2
 8004d24:	3304      	adds	r3, #4
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	e00c      	b.n	8004d44 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	f003 020f 	and.w	r2, r3, #15
 8004d30:	4613      	mov	r3, r2
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	3304      	adds	r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f003 fcce 	bl	80086ec <USB_EPStopXfer>
 8004d50:	4603      	mov	r3, r0
 8004d52:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d54:	7afb      	ldrb	r3, [r7, #11]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b088      	sub	sp, #32
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	3338      	adds	r3, #56	@ 0x38
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	4413      	add	r3, r2
 8004d82:	3304      	adds	r3, #4
 8004d84:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d901      	bls.n	8004d96 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e067      	b.n	8004e66 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	691a      	ldr	r2, [r3, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d902      	bls.n	8004db2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	3303      	adds	r3, #3
 8004db6:	089b      	lsrs	r3, r3, #2
 8004db8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dba:	e026      	b.n	8004e0a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d902      	bls.n	8004dd8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	3303      	adds	r3, #3
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68d9      	ldr	r1, [r3, #12]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	6978      	ldr	r0, [r7, #20]
 8004dee:	f003 fd27 	bl	8008840 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	441a      	add	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	695a      	ldr	r2, [r3, #20]
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	441a      	add	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d809      	bhi.n	8004e34 <PCD_WriteEmptyTxFifo+0xd6>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d203      	bcs.n	8004e34 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1c3      	bne.n	8004dbc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d811      	bhi.n	8004e64 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	2201      	movs	r2, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	6939      	ldr	r1, [r7, #16]
 8004e5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e60:	4013      	ands	r3, r2
 8004e62:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	333c      	adds	r3, #60	@ 0x3c
 8004e88:	3304      	adds	r3, #4
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a19      	ldr	r2, [pc, #100]	@ (8004f08 <PCD_EP_OutXfrComplete_int+0x98>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d124      	bne.n	8004ef0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec2:	6093      	str	r3, [r2, #8]
 8004ec4:	e01a      	b.n	8004efc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004edc:	461a      	mov	r2, r3
 8004ede:	2320      	movs	r3, #32
 8004ee0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f006 fb55 	bl	800b598 <HAL_PCD_DataOutStageCallback>
 8004eee:	e005      	b.n	8004efc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f006 fb4e 	bl	800b598 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	4f54310a 	.word	0x4f54310a

08004f0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	333c      	adds	r3, #60	@ 0x3c
 8004f24:	3304      	adds	r3, #4
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f70 <PCD_EP_OutSetupPacket_int+0x64>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d90e      	bls.n	8004f60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f58:	461a      	mov	r2, r3
 8004f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f006 fb07 	bl	800b574 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	4f54300a 	.word	0x4f54300a

08004f74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
 8004f80:	4613      	mov	r3, r2
 8004f82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f92:	883b      	ldrh	r3, [r7, #0]
 8004f94:	0419      	lsls	r1, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fa0:	e028      	b.n	8004ff4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]
 8004fb4:	e00d      	b.n	8004fd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	3340      	adds	r3, #64	@ 0x40
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4413      	add	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	7bfa      	ldrb	r2, [r7, #15]
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d3ec      	bcc.n	8004fb6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fdc:	883b      	ldrh	r3, [r7, #0]
 8004fde:	0418      	lsls	r0, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	4302      	orrs	r2, r0
 8004fec:	3340      	adds	r3, #64	@ 0x40
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005056:	f043 0303 	orr.w	r3, r3, #3
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8005074:	4b2b      	ldr	r3, [pc, #172]	@ (8005124 <HAL_PWR_ConfigPVD+0xb8>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f023 020e 	bic.w	r2, r3, #14
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4928      	ldr	r1, [pc, #160]	@ (8005124 <HAL_PWR_ConfigPVD+0xb8>)
 8005082:	4313      	orrs	r3, r2
 8005084:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8005086:	4b28      	ldr	r3, [pc, #160]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4a27      	ldr	r2, [pc, #156]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 800508c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005090:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8005092:	4b25      	ldr	r3, [pc, #148]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a24      	ldr	r2, [pc, #144]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 8005098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800509c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800509e:	4b22      	ldr	r3, [pc, #136]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	4a21      	ldr	r2, [pc, #132]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a8:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80050aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b4:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80050c2:	4b19      	ldr	r3, [pc, #100]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a18      	ldr	r2, [pc, #96]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80050da:	4b13      	ldr	r3, [pc, #76]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4a12      	ldr	r2, [pc, #72]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e4:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80050f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050fc:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800510a:	4b07      	ldr	r3, [pc, #28]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	4a06      	ldr	r2, [pc, #24]	@ (8005128 <HAL_PWR_ConfigPVD+0xbc>)
 8005110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005114:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40007000 	.word	0x40007000
 8005128:	40010400 	.word	0x40010400

0800512c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_PWR_EnablePVD+0x1c>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4a04      	ldr	r2, [pc, #16]	@ (8005148 <HAL_PWR_EnablePVD+0x1c>)
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6053      	str	r3, [r2, #4]
}
 800513c:	bf00      	nop
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40007000 	.word	0x40007000

0800514c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10c      	bne.n	8005178 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800515e:	4b13      	ldr	r3, [pc, #76]	@ (80051ac <HAL_PWR_EnterSLEEPMode+0x60>)
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516a:	d10e      	bne.n	800518a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800516c:	f000 f8a6 	bl	80052bc <HAL_PWREx_DisableLowPowerRunMode>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d009      	beq.n	800518a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8005176:	e016      	b.n	80051a6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8005178:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <HAL_PWR_EnterSLEEPMode+0x60>)
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005184:	d001      	beq.n	800518a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005186:	f000 f889 	bl	800529c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800518a:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	4a08      	ldr	r2, [pc, #32]	@ (80051b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 8005190:	f023 0304 	bic.w	r3, r3, #4
 8005194:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800519c:	bf30      	wfi
 800519e:	e002      	b.n	80051a6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80051a0:	bf40      	sev
    __WFE();
 80051a2:	bf20      	wfe
    __WFE();
 80051a4:	bf20      	wfe
  }

}
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40007000 	.word	0x40007000
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80051b8:	4b04      	ldr	r3, [pc, #16]	@ (80051cc <HAL_PWREx_GetVoltageRange+0x18>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40007000 	.word	0x40007000

080051d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051de:	d130      	bne.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051e0:	4b23      	ldr	r3, [pc, #140]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ec:	d038      	beq.n	8005260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051ee:	4b20      	ldr	r3, [pc, #128]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005274 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2232      	movs	r2, #50	@ 0x32
 8005204:	fb02 f303 	mul.w	r3, r2, r3
 8005208:	4a1b      	ldr	r2, [pc, #108]	@ (8005278 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800520a:	fba2 2303 	umull	r2, r3, r2, r3
 800520e:	0c9b      	lsrs	r3, r3, #18
 8005210:	3301      	adds	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005214:	e002      	b.n	800521c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b01      	subs	r3, #1
 800521a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800521c:	4b14      	ldr	r3, [pc, #80]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005228:	d102      	bne.n	8005230 <HAL_PWREx_ControlVoltageScaling+0x60>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f2      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005230:	4b0f      	ldr	r3, [pc, #60]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523c:	d110      	bne.n	8005260 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e00f      	b.n	8005262 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005242:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800524a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524e:	d007      	beq.n	8005260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005258:	4a05      	ldr	r2, [pc, #20]	@ (8005270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800525a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800525e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	40007000 	.word	0x40007000
 8005274:	20000034 	.word	0x20000034
 8005278:	431bde83 	.word	0x431bde83

0800527c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a04      	ldr	r2, [pc, #16]	@ (8005298 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005286:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800528a:	6053      	str	r3, [r2, #4]
}
 800528c:	bf00      	nop
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40007000 	.word	0x40007000

0800529c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80052a0:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80052a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052aa:	6013      	str	r3, [r2, #0]
}
 80052ac:	bf00      	nop
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40007000 	.word	0x40007000

080052bc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80052c2:	4b17      	ldr	r3, [pc, #92]	@ (8005320 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a16      	ldr	r2, [pc, #88]	@ (8005320 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80052c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052cc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052ce:	4b15      	ldr	r3, [pc, #84]	@ (8005324 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2232      	movs	r2, #50	@ 0x32
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	4a13      	ldr	r2, [pc, #76]	@ (8005328 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0c9b      	lsrs	r3, r3, #18
 80052e0:	3301      	adds	r3, #1
 80052e2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80052e4:	e002      	b.n	80052ec <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80052ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005320 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f8:	d102      	bne.n	8005300 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f2      	bne.n	80052e6 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005300:	4b07      	ldr	r3, [pc, #28]	@ (8005320 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800530c:	d101      	bne.n	8005312 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e000      	b.n	8005314 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40007000 	.word	0x40007000
 8005324:	20000034 	.word	0x20000034
 8005328:	431bde83 	.word	0x431bde83

0800532c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af02      	add	r7, sp, #8
 8005332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005334:	f7fe f980 	bl	8003638 <HAL_GetTick>
 8005338:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e063      	b.n	800540c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7fd fb93 	bl	8002a84 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800535e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fb41 	bl	80059ea <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	3b01      	subs	r3, #1
 8005378:	021a      	lsls	r2, r3, #8
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	2120      	movs	r1, #32
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fb39 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005398:	7afb      	ldrb	r3, [r7, #11]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d131      	bne.n	8005402 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80053a8:	f023 0310 	bic.w	r3, r3, #16
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6852      	ldr	r2, [r2, #4]
 80053b0:	0611      	lsls	r1, r2, #24
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	68d2      	ldr	r2, [r2, #12]
 80053b6:	4311      	orrs	r1, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	430b      	orrs	r3, r1
 80053be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <HAL_QSPI_Init+0xe8>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6912      	ldr	r2, [r2, #16]
 80053ce:	0411      	lsls	r1, r2, #16
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6952      	ldr	r2, [r2, #20]
 80053d4:	4311      	orrs	r1, r2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6992      	ldr	r2, [r2, #24]
 80053da:	4311      	orrs	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800540a:	7afb      	ldrb	r3, [r7, #11]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	ffe0f8fe 	.word	0xffe0f8fe

08005418 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005424:	f7fe f908 	bl	8003638 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_QSPI_Command+0x22>
 8005436:	2302      	movs	r3, #2
 8005438:	e048      	b.n	80054cc <HAL_QSPI_Command+0xb4>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d137      	bne.n	80054be <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	2200      	movs	r2, #0
 8005464:	2120      	movs	r1, #32
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 facd 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d125      	bne.n	80054c2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005476:	2200      	movs	r2, #0
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fafa 	bl	8005a74 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	d115      	bne.n	80054b4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2201      	movs	r2, #1
 8005490:	2102      	movs	r1, #2
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fab7 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2202      	movs	r2, #2
 80054a8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80054b2:	e006      	b.n	80054c2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80054bc:	e001      	b.n	80054c2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80054be:	2302      	movs	r3, #2
 80054c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	@ 0x28
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80054e4:	f7fe f8a8 	bl	8003638 <HAL_GetTick>
 80054e8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3320      	adds	r3, #32
 80054f0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_QSPI_Transmit+0x2e>
 80054fe:	2302      	movs	r3, #2
 8005500:	e07b      	b.n	80055fa <HAL_QSPI_Transmit+0x126>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	d16a      	bne.n	80055ec <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d05b      	beq.n	80055da <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2212      	movs	r2, #18
 8005526:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	625a      	str	r2, [r3, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	621a      	str	r2, [r3, #32]
      hqspi->pTxBuffPtr = pData;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	61da      	str	r2, [r3, #28]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005556:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8005558:	e01b      	b.n	8005592 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2201      	movs	r2, #1
 8005562:	2104      	movs	r1, #4
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 fa4e 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800556e:	7ffb      	ldrb	r3, [r7, #31]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d113      	bne.n	800559c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	61da      	str	r2, [r3, #28]
        hqspi->TxXferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	625a      	str	r2, [r3, #36]	@ 0x24
      while(hqspi->TxXferCount > 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1df      	bne.n	800555a <HAL_QSPI_Transmit+0x86>
 800559a:	e000      	b.n	800559e <HAL_QSPI_Transmit+0xca>
          break;
 800559c:	bf00      	nop
      }

      if (status == HAL_OK)
 800559e:	7ffb      	ldrb	r3, [r7, #31]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d115      	bne.n	80055d0 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2201      	movs	r2, #1
 80055ac:	2102      	movs	r1, #2
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fa29 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80055b8:	7ffb      	ldrb	r3, [r7, #31]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d108      	bne.n	80055d0 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2202      	movs	r2, #2
 80055c4:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f996 	bl	80058f8 <HAL_QSPI_Abort>
 80055cc:	4603      	mov	r3, r0
 80055ce:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80055d8:	e00a      	b.n	80055f0 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	f043 0208 	orr.w	r2, r3, #8
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	e001      	b.n	80055f0 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
 80055ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08a      	sub	sp, #40	@ 0x28
 8005606:	af02      	add	r7, sp, #8
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005612:	f7fe f811 	bl	8003638 <HAL_GetTick>
 8005616:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3320      	adds	r3, #32
 8005626:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <HAL_QSPI_Receive+0x36>
 8005634:	2302      	movs	r3, #2
 8005636:	e082      	b.n	800573e <HAL_QSPI_Receive+0x13c>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	d171      	bne.n	8005730 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	63da      	str	r2, [r3, #60]	@ 0x3c

    if(pData != NULL )
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d062      	beq.n	800571e <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2222      	movs	r2, #34	@ 0x22
 800565c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	631a      	str	r2, [r3, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->pRxBuffPtr = pData;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005690:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800569a:	e01c      	b.n	80056d6 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2201      	movs	r2, #1
 80056a4:	2106      	movs	r1, #6
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f9ad 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80056b0:	7ffb      	ldrb	r3, [r7, #31]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d114      	bne.n	80056e0 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	629a      	str	r2, [r3, #40]	@ 0x28
        hqspi->RxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d0:	1e5a      	subs	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	631a      	str	r2, [r3, #48]	@ 0x30
      while(hqspi->RxXferCount > 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1de      	bne.n	800569c <HAL_QSPI_Receive+0x9a>
 80056de:	e000      	b.n	80056e2 <HAL_QSPI_Receive+0xe0>
          break;
 80056e0:	bf00      	nop
      }

      if (status == HAL_OK)
 80056e2:	7ffb      	ldrb	r3, [r7, #31]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d115      	bne.n	8005714 <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2201      	movs	r2, #1
 80056f0:	2102      	movs	r1, #2
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f987 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80056fc:	7ffb      	ldrb	r3, [r7, #31]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d108      	bne.n	8005714 <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2202      	movs	r2, #2
 8005708:	60da      	str	r2, [r3, #12]

#if  (defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx))
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f8f4 	bl	80058f8 <HAL_QSPI_Abort>
 8005710:	4603      	mov	r3, r0
 8005712:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800571c:	e00a      	b.n	8005734 <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005722:	f043 0208 	orr.w	r2, r3, #8
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	63da      	str	r2, [r3, #60]	@ 0x3c
      status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	77fb      	strb	r3, [r7, #31]
 800572e:	e001      	b.n	8005734 <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005730:	2302      	movs	r3, #2
 8005732:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 800573c:	7ffb      	ldrb	r3, [r7, #31]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b088      	sub	sp, #32
 800574a:	af02      	add	r7, sp, #8
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005754:	f7fd ff70 	bl	8003638 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_QSPI_AutoPolling+0x24>
 8005766:	2302      	movs	r3, #2
 8005768:	e060      	b.n	800582c <HAL_QSPI_AutoPolling+0xe6>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b01      	cmp	r3, #1
 800577c:	d14f      	bne.n	800581e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2242      	movs	r2, #66	@ 0x42
 8005788:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2200      	movs	r2, #0
 8005794:	2120      	movs	r1, #32
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f935 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d13d      	bne.n	8005822 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6852      	ldr	r2, [r2, #4]
 80057b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6892      	ldr	r2, [r2, #8]
 80057c2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80057dc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80057e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f941 	bl	8005a74 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2201      	movs	r2, #1
 80057fa:	2108      	movs	r1, #8
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f902 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8005806:	7dfb      	ldrb	r3, [r7, #23]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10a      	bne.n	8005822 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2208      	movs	r2, #8
 8005812:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800581c:	e001      	b.n	8005822 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800581e:	2302      	movs	r3, #2
 8005820:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800582a:	7dfb      	ldrb	r3, [r7, #23]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005840:	f7fd fefa 	bl	8003638 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_QSPI_MemoryMapped+0x22>
 8005852:	2302      	movs	r3, #2
 8005854:	e04c      	b.n	80058f0 <HAL_QSPI_MemoryMapped+0xbc>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	d13b      	bne.n	80058e2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2282      	movs	r2, #130	@ 0x82
 8005874:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	2200      	movs	r2, #0
 8005882:	2120      	movs	r1, #32
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f8be 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d128      	bne.n	80058e6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 0108 	bic.w	r1, r3, #8
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685a      	ldr	r2, [r3, #4]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b08      	cmp	r3, #8
 80058b0:	d110      	bne.n	80058d4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2210      	movs	r2, #16
 80058c2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80058d2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80058d4:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f8ca 	bl	8005a74 <QSPI_Config>
 80058e0:	e001      	b.n	80058e6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80058e2:	2302      	movs	r3, #2
 80058e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005904:	f7fd fe98 	bl	8003638 <HAL_GetTick>
 8005908:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d062      	beq.n	80059e0 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d017      	beq.n	8005960 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0204 	bic.w	r2, r2, #4
 800593e:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005944:	4618      	mov	r0, r3
 8005946:	f7fd ffb8 	bl	80038ba <HAL_DMA_Abort>
 800594a:	4603      	mov	r3, r0
 800594c:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005958:	f043 0204 	orr.w	r2, r3, #4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b00      	cmp	r3, #0
 800596c:	d034      	beq.n	80059d8 <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0202 	orr.w	r2, r2, #2
 800597c:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2201      	movs	r2, #1
 8005988:	2102      	movs	r1, #2
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f83b 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10e      	bne.n	80059b8 <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2202      	movs	r2, #2
 80059a0:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2200      	movs	r2, #0
 80059ac:	2120      	movs	r1, #32
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f829 	bl	8005a06 <QSPI_WaitFlagStateUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d110      	bne.n	80059e0 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80059cc:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80059d6:	e003      	b.n	80059e0 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    }
  }

  return status;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b084      	sub	sp, #16
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a16:	e01a      	b.n	8005a4e <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d016      	beq.n	8005a4e <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a20:	f7fd fe0a 	bl	8003638 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d302      	bcc.n	8005a36 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10b      	bne.n	8005a4e <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2204      	movs	r2, #4
 8005a3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a42:	f043 0201 	orr.w	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e00e      	b.n	8005a6c <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	bf14      	ite	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2300      	moveq	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d1d6      	bne.n	8005a18 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d009      	beq.n	8005a9c <QSPI_Config+0x28>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a8e:	d005      	beq.n	8005a9c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3a01      	subs	r2, #1
 8005a9a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80b9 	beq.w	8005c18 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d05f      	beq.n	8005b6e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	6892      	ldr	r2, [r2, #8]
 8005ab6:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d031      	beq.n	8005b24 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	049b      	lsls	r3, r3, #18
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	ea42 0103 	orr.w	r1, r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b14:	f000 812e 	beq.w	8005d74 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	6852      	ldr	r2, [r2, #4]
 8005b20:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005b22:	e127      	b.n	8005d74 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b32:	431a      	orrs	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	049b      	lsls	r3, r3, #18
 8005b40:	431a      	orrs	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	ea42 0103 	orr.w	r1, r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	615a      	str	r2, [r3, #20]
}
 8005b6c:	e102      	b.n	8005d74 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d02e      	beq.n	8005bd4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	049b      	lsls	r3, r3, #18
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	ea42 0103 	orr.w	r1, r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005bc4:	f000 80d6 	beq.w	8005d74 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	6852      	ldr	r2, [r2, #4]
 8005bd0:	619a      	str	r2, [r3, #24]
}
 8005bd2:	e0cf      	b.n	8005d74 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be2:	431a      	orrs	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be8:	431a      	orrs	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	049b      	lsls	r3, r3, #18
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	ea42 0103 	orr.w	r1, r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	615a      	str	r2, [r3, #20]
}
 8005c16:	e0ad      	b.n	8005d74 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d058      	beq.n	8005cd2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	6892      	ldr	r2, [r2, #8]
 8005c28:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02d      	beq.n	8005c8e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c40:	431a      	orrs	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	049b      	lsls	r3, r3, #18
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	431a      	orrs	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	ea42 0103 	orr.w	r1, r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005c80:	d078      	beq.n	8005d74 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	6852      	ldr	r2, [r2, #4]
 8005c8a:	619a      	str	r2, [r3, #24]
}
 8005c8c:	e072      	b.n	8005d74 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	431a      	orrs	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	049b      	lsls	r3, r3, #18
 8005caa:	431a      	orrs	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	ea42 0103 	orr.w	r1, r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	615a      	str	r2, [r3, #20]
}
 8005cd0:	e050      	b.n	8005d74 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d02a      	beq.n	8005d30 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	049b      	lsls	r3, r3, #18
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	ea42 0103 	orr.w	r1, r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005d22:	d027      	beq.n	8005d74 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	6852      	ldr	r2, [r2, #4]
 8005d2c:	619a      	str	r2, [r3, #24]
}
 8005d2e:	e021      	b.n	8005d74 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01d      	beq.n	8005d74 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d46:	431a      	orrs	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	049b      	lsls	r3, r3, #18
 8005d54:	431a      	orrs	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	431a      	orrs	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	ea42 0103 	orr.w	r1, r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	615a      	str	r2, [r3, #20]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e3ca      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d92:	4b97      	ldr	r3, [pc, #604]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 030c 	and.w	r3, r3, #12
 8005d9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d9c:	4b94      	ldr	r3, [pc, #592]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0310 	and.w	r3, r3, #16
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80e4 	beq.w	8005f7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_RCC_OscConfig+0x4a>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b0c      	cmp	r3, #12
 8005dbe:	f040 808b 	bne.w	8005ed8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	f040 8087 	bne.w	8005ed8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dca:	4b89      	ldr	r3, [pc, #548]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <HAL_RCC_OscConfig+0x62>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e3a2      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1a      	ldr	r2, [r3, #32]
 8005de6:	4b82      	ldr	r3, [pc, #520]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d004      	beq.n	8005dfc <HAL_RCC_OscConfig+0x7c>
 8005df2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dfa:	e005      	b.n	8005e08 <HAL_RCC_OscConfig+0x88>
 8005dfc:	4b7c      	ldr	r3, [pc, #496]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d223      	bcs.n	8005e54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fd29 	bl	8006868 <RCC_SetFlashLatencyFromMSIRange>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e383      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e20:	4b73      	ldr	r3, [pc, #460]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a72      	ldr	r2, [pc, #456]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e26:	f043 0308 	orr.w	r3, r3, #8
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	4b70      	ldr	r3, [pc, #448]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	496d      	ldr	r1, [pc, #436]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	4968      	ldr	r1, [pc, #416]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	604b      	str	r3, [r1, #4]
 8005e52:	e025      	b.n	8005ea0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e54:	4b66      	ldr	r3, [pc, #408]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a65      	ldr	r2, [pc, #404]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e5a:	f043 0308 	orr.w	r3, r3, #8
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	4b63      	ldr	r3, [pc, #396]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	4960      	ldr	r1, [pc, #384]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e72:	4b5f      	ldr	r3, [pc, #380]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	495b      	ldr	r1, [pc, #364]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d109      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 fce9 	bl	8006868 <RCC_SetFlashLatencyFromMSIRange>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e343      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ea0:	f000 fc4a 	bl	8006738 <HAL_RCC_GetSysClockFreq>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	4b52      	ldr	r3, [pc, #328]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	4950      	ldr	r1, [pc, #320]	@ (8005ff4 <HAL_RCC_OscConfig+0x274>)
 8005eb2:	5ccb      	ldrb	r3, [r1, r3]
 8005eb4:	f003 031f 	and.w	r3, r3, #31
 8005eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebc:	4a4e      	ldr	r2, [pc, #312]	@ (8005ff8 <HAL_RCC_OscConfig+0x278>)
 8005ebe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ec0:	4b4e      	ldr	r3, [pc, #312]	@ (8005ffc <HAL_RCC_OscConfig+0x27c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fd fb67 	bl	8003598 <HAL_InitTick>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d052      	beq.n	8005f7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	e327      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d032      	beq.n	8005f46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ee0:	4b43      	ldr	r3, [pc, #268]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a42      	ldr	r2, [pc, #264]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005eec:	f7fd fba4 	bl	8003638 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ef4:	f7fd fba0 	bl	8003638 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e310      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f06:	4b3a      	ldr	r3, [pc, #232]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0f0      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f12:	4b37      	ldr	r3, [pc, #220]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a36      	ldr	r2, [pc, #216]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f18:	f043 0308 	orr.w	r3, r3, #8
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	4b34      	ldr	r3, [pc, #208]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	4931      	ldr	r1, [pc, #196]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f30:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	492c      	ldr	r1, [pc, #176]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	604b      	str	r3, [r1, #4]
 8005f44:	e01a      	b.n	8005f7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f46:	4b2a      	ldr	r3, [pc, #168]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a29      	ldr	r2, [pc, #164]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f52:	f7fd fb71 	bl	8003638 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f5a:	f7fd fb6d 	bl	8003638 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e2dd      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f6c:	4b20      	ldr	r3, [pc, #128]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f0      	bne.n	8005f5a <HAL_RCC_OscConfig+0x1da>
 8005f78:	e000      	b.n	8005f7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005f7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d074      	beq.n	8006072 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d005      	beq.n	8005f9a <HAL_RCC_OscConfig+0x21a>
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b0c      	cmp	r3, #12
 8005f92:	d10e      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d10b      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9a:	4b15      	ldr	r3, [pc, #84]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d064      	beq.n	8006070 <HAL_RCC_OscConfig+0x2f0>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d160      	bne.n	8006070 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e2ba      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fba:	d106      	bne.n	8005fca <HAL_RCC_OscConfig+0x24a>
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	e026      	b.n	8006018 <HAL_RCC_OscConfig+0x298>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fd2:	d115      	bne.n	8006000 <HAL_RCC_OscConfig+0x280>
 8005fd4:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a05      	ldr	r2, [pc, #20]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fde:	6013      	str	r3, [r2, #0]
 8005fe0:	4b03      	ldr	r3, [pc, #12]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a02      	ldr	r2, [pc, #8]	@ (8005ff0 <HAL_RCC_OscConfig+0x270>)
 8005fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fea:	6013      	str	r3, [r2, #0]
 8005fec:	e014      	b.n	8006018 <HAL_RCC_OscConfig+0x298>
 8005fee:	bf00      	nop
 8005ff0:	40021000 	.word	0x40021000
 8005ff4:	0800ff68 	.word	0x0800ff68
 8005ff8:	20000034 	.word	0x20000034
 8005ffc:	20000038 	.word	0x20000038
 8006000:	4ba0      	ldr	r3, [pc, #640]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a9f      	ldr	r2, [pc, #636]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4b9d      	ldr	r3, [pc, #628]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a9c      	ldr	r2, [pc, #624]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006020:	f7fd fb0a 	bl	8003638 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006028:	f7fd fb06 	bl	8003638 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	@ 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e276      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800603a:	4b92      	ldr	r3, [pc, #584]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCC_OscConfig+0x2a8>
 8006046:	e014      	b.n	8006072 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006048:	f7fd faf6 	bl	8003638 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800604e:	e008      	b.n	8006062 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006050:	f7fd faf2 	bl	8003638 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	2b64      	cmp	r3, #100	@ 0x64
 800605c:	d901      	bls.n	8006062 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e262      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006062:	4b88      	ldr	r3, [pc, #544]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f0      	bne.n	8006050 <HAL_RCC_OscConfig+0x2d0>
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d060      	beq.n	8006140 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b04      	cmp	r3, #4
 8006082:	d005      	beq.n	8006090 <HAL_RCC_OscConfig+0x310>
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	2b0c      	cmp	r3, #12
 8006088:	d119      	bne.n	80060be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d116      	bne.n	80060be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006090:	4b7c      	ldr	r3, [pc, #496]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_OscConfig+0x328>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e23f      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a8:	4b76      	ldr	r3, [pc, #472]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	061b      	lsls	r3, r3, #24
 80060b6:	4973      	ldr	r1, [pc, #460]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060bc:	e040      	b.n	8006140 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d023      	beq.n	800610e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060c6:	4b6f      	ldr	r3, [pc, #444]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a6e      	ldr	r2, [pc, #440]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80060cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fd fab1 	bl	8003638 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060da:	f7fd faad 	bl	8003638 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e21d      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060ec:	4b65      	ldr	r3, [pc, #404]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060f8:	4b62      	ldr	r3, [pc, #392]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	061b      	lsls	r3, r3, #24
 8006106:	495f      	ldr	r1, [pc, #380]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006108:	4313      	orrs	r3, r2
 800610a:	604b      	str	r3, [r1, #4]
 800610c:	e018      	b.n	8006140 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800610e:	4b5d      	ldr	r3, [pc, #372]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5c      	ldr	r2, [pc, #368]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611a:	f7fd fa8d 	bl	8003638 <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006122:	f7fd fa89 	bl	8003638 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e1f9      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006134:	4b53      	ldr	r3, [pc, #332]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f0      	bne.n	8006122 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b00      	cmp	r3, #0
 800614a:	d03c      	beq.n	80061c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d01c      	beq.n	800618e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006154:	4b4b      	ldr	r3, [pc, #300]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800615a:	4a4a      	ldr	r2, [pc, #296]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006164:	f7fd fa68 	bl	8003638 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800616c:	f7fd fa64 	bl	8003638 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e1d4      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800617e:	4b41      	ldr	r3, [pc, #260]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0ef      	beq.n	800616c <HAL_RCC_OscConfig+0x3ec>
 800618c:	e01b      	b.n	80061c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800618e:	4b3d      	ldr	r3, [pc, #244]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006190:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006194:	4a3b      	ldr	r2, [pc, #236]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619e:	f7fd fa4b 	bl	8003638 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a6:	f7fd fa47 	bl	8003638 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e1b7      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061b8:	4b32      	ldr	r3, [pc, #200]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80061ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1ef      	bne.n	80061a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80a6 	beq.w	8006320 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d4:	2300      	movs	r3, #0
 80061d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80061d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80061da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10d      	bne.n	8006200 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e4:	4b27      	ldr	r3, [pc, #156]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80061e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061e8:	4a26      	ldr	r2, [pc, #152]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80061ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80061f0:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 80061f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061fc:	2301      	movs	r3, #1
 80061fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006200:	4b21      	ldr	r3, [pc, #132]	@ (8006288 <HAL_RCC_OscConfig+0x508>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006208:	2b00      	cmp	r3, #0
 800620a:	d118      	bne.n	800623e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800620c:	4b1e      	ldr	r3, [pc, #120]	@ (8006288 <HAL_RCC_OscConfig+0x508>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1d      	ldr	r2, [pc, #116]	@ (8006288 <HAL_RCC_OscConfig+0x508>)
 8006212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006218:	f7fd fa0e 	bl	8003638 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006220:	f7fd fa0a 	bl	8003638 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e17a      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006232:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <HAL_RCC_OscConfig+0x508>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f0      	beq.n	8006220 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d108      	bne.n	8006258 <HAL_RCC_OscConfig+0x4d8>
 8006246:	4b0f      	ldr	r3, [pc, #60]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800624c:	4a0d      	ldr	r2, [pc, #52]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 800624e:	f043 0301 	orr.w	r3, r3, #1
 8006252:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006256:	e029      	b.n	80062ac <HAL_RCC_OscConfig+0x52c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b05      	cmp	r3, #5
 800625e:	d115      	bne.n	800628c <HAL_RCC_OscConfig+0x50c>
 8006260:	4b08      	ldr	r3, [pc, #32]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006266:	4a07      	ldr	r2, [pc, #28]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006268:	f043 0304 	orr.w	r3, r3, #4
 800626c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006270:	4b04      	ldr	r3, [pc, #16]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006276:	4a03      	ldr	r2, [pc, #12]	@ (8006284 <HAL_RCC_OscConfig+0x504>)
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006280:	e014      	b.n	80062ac <HAL_RCC_OscConfig+0x52c>
 8006282:	bf00      	nop
 8006284:	40021000 	.word	0x40021000
 8006288:	40007000 	.word	0x40007000
 800628c:	4b9c      	ldr	r3, [pc, #624]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006292:	4a9b      	ldr	r2, [pc, #620]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006294:	f023 0301 	bic.w	r3, r3, #1
 8006298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800629c:	4b98      	ldr	r3, [pc, #608]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a2:	4a97      	ldr	r2, [pc, #604]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80062a4:	f023 0304 	bic.w	r3, r3, #4
 80062a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d016      	beq.n	80062e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fd f9c0 	bl	8003638 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062ba:	e00a      	b.n	80062d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062bc:	f7fd f9bc 	bl	8003638 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e12a      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d2:	4b8b      	ldr	r3, [pc, #556]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0ed      	beq.n	80062bc <HAL_RCC_OscConfig+0x53c>
 80062e0:	e015      	b.n	800630e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e2:	f7fd f9a9 	bl	8003638 <HAL_GetTick>
 80062e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062e8:	e00a      	b.n	8006300 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ea:	f7fd f9a5 	bl	8003638 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e113      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006300:	4b7f      	ldr	r3, [pc, #508]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1ed      	bne.n	80062ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800630e:	7ffb      	ldrb	r3, [r7, #31]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d105      	bne.n	8006320 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006314:	4b7a      	ldr	r3, [pc, #488]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006318:	4a79      	ldr	r2, [pc, #484]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 800631a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800631e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80fe 	beq.w	8006526 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632e:	2b02      	cmp	r3, #2
 8006330:	f040 80d0 	bne.w	80064d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006334:	4b72      	ldr	r3, [pc, #456]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f003 0203 	and.w	r2, r3, #3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	429a      	cmp	r2, r3
 8006346:	d130      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006352:	3b01      	subs	r3, #1
 8006354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006356:	429a      	cmp	r2, r3
 8006358:	d127      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006364:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006366:	429a      	cmp	r2, r3
 8006368:	d11f      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006374:	2a07      	cmp	r2, #7
 8006376:	bf14      	ite	ne
 8006378:	2201      	movne	r2, #1
 800637a:	2200      	moveq	r2, #0
 800637c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800637e:	4293      	cmp	r3, r2
 8006380:	d113      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	3b01      	subs	r3, #1
 8006390:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006392:	429a      	cmp	r2, r3
 8006394:	d109      	bne.n	80063aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	085b      	lsrs	r3, r3, #1
 80063a2:	3b01      	subs	r3, #1
 80063a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d06e      	beq.n	8006488 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b0c      	cmp	r3, #12
 80063ae:	d069      	beq.n	8006484 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80063b0:	4b53      	ldr	r3, [pc, #332]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80063bc:	4b50      	ldr	r3, [pc, #320]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e0ad      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80063cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a4b      	ldr	r2, [pc, #300]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80063d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063d8:	f7fd f92e 	bl	8003638 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e0:	f7fd f92a 	bl	8003638 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e09a      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063f2:	4b43      	ldr	r3, [pc, #268]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063fe:	4b40      	ldr	r3, [pc, #256]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	4b40      	ldr	r3, [pc, #256]	@ (8006504 <HAL_RCC_OscConfig+0x784>)
 8006404:	4013      	ands	r3, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800640e:	3a01      	subs	r2, #1
 8006410:	0112      	lsls	r2, r2, #4
 8006412:	4311      	orrs	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006418:	0212      	lsls	r2, r2, #8
 800641a:	4311      	orrs	r1, r2
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006420:	0852      	lsrs	r2, r2, #1
 8006422:	3a01      	subs	r2, #1
 8006424:	0552      	lsls	r2, r2, #21
 8006426:	4311      	orrs	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800642c:	0852      	lsrs	r2, r2, #1
 800642e:	3a01      	subs	r2, #1
 8006430:	0652      	lsls	r2, r2, #25
 8006432:	4311      	orrs	r1, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006438:	0912      	lsrs	r2, r2, #4
 800643a:	0452      	lsls	r2, r2, #17
 800643c:	430a      	orrs	r2, r1
 800643e:	4930      	ldr	r1, [pc, #192]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006440:	4313      	orrs	r3, r2
 8006442:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006444:	4b2e      	ldr	r3, [pc, #184]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2d      	ldr	r2, [pc, #180]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 800644a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800644e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006450:	4b2b      	ldr	r3, [pc, #172]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	4a2a      	ldr	r2, [pc, #168]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800645a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800645c:	f7fd f8ec 	bl	8003638 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006464:	f7fd f8e8 	bl	8003638 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b02      	cmp	r3, #2
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e058      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006476:	4b22      	ldr	r3, [pc, #136]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006482:	e050      	b.n	8006526 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e04f      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006488:	4b1d      	ldr	r3, [pc, #116]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d148      	bne.n	8006526 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006494:	4b1a      	ldr	r3, [pc, #104]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a19      	ldr	r2, [pc, #100]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 800649a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800649e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064a0:	4b17      	ldr	r3, [pc, #92]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	4a16      	ldr	r2, [pc, #88]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80064a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ac:	f7fd f8c4 	bl	8003638 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b4:	f7fd f8c0 	bl	8003638 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e030      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d0f0      	beq.n	80064b4 <HAL_RCC_OscConfig+0x734>
 80064d2:	e028      	b.n	8006526 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	2b0c      	cmp	r3, #12
 80064d8:	d023      	beq.n	8006522 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064da:	4b09      	ldr	r3, [pc, #36]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a08      	ldr	r2, [pc, #32]	@ (8006500 <HAL_RCC_OscConfig+0x780>)
 80064e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e6:	f7fd f8a7 	bl	8003638 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064ec:	e00c      	b.n	8006508 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ee:	f7fd f8a3 	bl	8003638 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d905      	bls.n	8006508 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e013      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
 8006500:	40021000 	.word	0x40021000
 8006504:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006508:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <HAL_RCC_OscConfig+0x7b0>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1ec      	bne.n	80064ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006514:	4b06      	ldr	r3, [pc, #24]	@ (8006530 <HAL_RCC_OscConfig+0x7b0>)
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	4905      	ldr	r1, [pc, #20]	@ (8006530 <HAL_RCC_OscConfig+0x7b0>)
 800651a:	4b06      	ldr	r3, [pc, #24]	@ (8006534 <HAL_RCC_OscConfig+0x7b4>)
 800651c:	4013      	ands	r3, r2
 800651e:	60cb      	str	r3, [r1, #12]
 8006520:	e001      	b.n	8006526 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40021000 	.word	0x40021000
 8006534:	feeefffc 	.word	0xfeeefffc

08006538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0e7      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800654c:	4b75      	ldr	r3, [pc, #468]	@ (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d910      	bls.n	800657c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655a:	4b72      	ldr	r3, [pc, #456]	@ (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f023 0207 	bic.w	r2, r3, #7
 8006562:	4970      	ldr	r1, [pc, #448]	@ (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	4313      	orrs	r3, r2
 8006568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800656a:	4b6e      	ldr	r3, [pc, #440]	@ (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0307 	and.w	r3, r3, #7
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d001      	beq.n	800657c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0cf      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d010      	beq.n	80065aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	4b66      	ldr	r3, [pc, #408]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006594:	429a      	cmp	r2, r3
 8006596:	d908      	bls.n	80065aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006598:	4b63      	ldr	r3, [pc, #396]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4960      	ldr	r1, [pc, #384]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d04c      	beq.n	8006650 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d107      	bne.n	80065ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065be:	4b5a      	ldr	r3, [pc, #360]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d121      	bne.n	800660e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e0a6      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d107      	bne.n	80065e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065d6:	4b54      	ldr	r3, [pc, #336]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d115      	bne.n	800660e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e09a      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d107      	bne.n	80065fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065ee:	4b4e      	ldr	r3, [pc, #312]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e08e      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065fe:	4b4a      	ldr	r3, [pc, #296]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e086      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800660e:	4b46      	ldr	r3, [pc, #280]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f023 0203 	bic.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4943      	ldr	r1, [pc, #268]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800661c:	4313      	orrs	r3, r2
 800661e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006620:	f7fd f80a 	bl	8003638 <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	e00a      	b.n	800663e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006628:	f7fd f806 	bl	8003638 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e06e      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	4b3a      	ldr	r3, [pc, #232]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 020c 	and.w	r2, r3, #12
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	429a      	cmp	r2, r3
 800664e:	d1eb      	bne.n	8006628 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d010      	beq.n	800667e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	4b31      	ldr	r3, [pc, #196]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006668:	429a      	cmp	r2, r3
 800666a:	d208      	bcs.n	800667e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800666c:	4b2e      	ldr	r3, [pc, #184]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	492b      	ldr	r1, [pc, #172]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 800667a:	4313      	orrs	r3, r2
 800667c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800667e:	4b29      	ldr	r3, [pc, #164]	@ (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d210      	bcs.n	80066ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668c:	4b25      	ldr	r3, [pc, #148]	@ (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f023 0207 	bic.w	r2, r3, #7
 8006694:	4923      	ldr	r1, [pc, #140]	@ (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	4313      	orrs	r3, r2
 800669a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800669c:	4b21      	ldr	r3, [pc, #132]	@ (8006724 <HAL_RCC_ClockConfig+0x1ec>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d001      	beq.n	80066ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e036      	b.n	800671c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d008      	beq.n	80066cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	4918      	ldr	r1, [pc, #96]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066d8:	4b13      	ldr	r3, [pc, #76]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	4910      	ldr	r1, [pc, #64]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066ec:	f000 f824 	bl	8006738 <HAL_RCC_GetSysClockFreq>
 80066f0:	4602      	mov	r2, r0
 80066f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006728 <HAL_RCC_ClockConfig+0x1f0>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	f003 030f 	and.w	r3, r3, #15
 80066fc:	490b      	ldr	r1, [pc, #44]	@ (800672c <HAL_RCC_ClockConfig+0x1f4>)
 80066fe:	5ccb      	ldrb	r3, [r1, r3]
 8006700:	f003 031f 	and.w	r3, r3, #31
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
 8006708:	4a09      	ldr	r2, [pc, #36]	@ (8006730 <HAL_RCC_ClockConfig+0x1f8>)
 800670a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800670c:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <HAL_RCC_ClockConfig+0x1fc>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f7fc ff41 	bl	8003598 <HAL_InitTick>
 8006716:	4603      	mov	r3, r0
 8006718:	72fb      	strb	r3, [r7, #11]

  return status;
 800671a:	7afb      	ldrb	r3, [r7, #11]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40022000 	.word	0x40022000
 8006728:	40021000 	.word	0x40021000
 800672c:	0800ff68 	.word	0x0800ff68
 8006730:	20000034 	.word	0x20000034
 8006734:	20000038 	.word	0x20000038

08006738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006738:	b480      	push	{r7}
 800673a:	b089      	sub	sp, #36	@ 0x24
 800673c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	2300      	movs	r3, #0
 8006744:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006746:	4b3e      	ldr	r3, [pc, #248]	@ (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006750:	4b3b      	ldr	r3, [pc, #236]	@ (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_RCC_GetSysClockFreq+0x34>
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b0c      	cmp	r3, #12
 8006764:	d121      	bne.n	80067aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d11e      	bne.n	80067aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800676c:	4b34      	ldr	r3, [pc, #208]	@ (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d107      	bne.n	8006788 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006778:	4b31      	ldr	r3, [pc, #196]	@ (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 800677a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800677e:	0a1b      	lsrs	r3, r3, #8
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	e005      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006788:	4b2d      	ldr	r3, [pc, #180]	@ (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006794:	4a2b      	ldr	r2, [pc, #172]	@ (8006844 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800679c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10d      	bne.n	80067c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067a8:	e00a      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d102      	bne.n	80067b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80067b0:	4b25      	ldr	r3, [pc, #148]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x110>)
 80067b2:	61bb      	str	r3, [r7, #24]
 80067b4:	e004      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d101      	bne.n	80067c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067bc:	4b23      	ldr	r3, [pc, #140]	@ (800684c <HAL_RCC_GetSysClockFreq+0x114>)
 80067be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b0c      	cmp	r3, #12
 80067c4:	d134      	bne.n	8006830 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	f003 0303 	and.w	r3, r3, #3
 80067ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d003      	beq.n	80067de <HAL_RCC_GetSysClockFreq+0xa6>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d003      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0xac>
 80067dc:	e005      	b.n	80067ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80067de:	4b1a      	ldr	r3, [pc, #104]	@ (8006848 <HAL_RCC_GetSysClockFreq+0x110>)
 80067e0:	617b      	str	r3, [r7, #20]
      break;
 80067e2:	e005      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80067e4:	4b19      	ldr	r3, [pc, #100]	@ (800684c <HAL_RCC_GetSysClockFreq+0x114>)
 80067e6:	617b      	str	r3, [r7, #20]
      break;
 80067e8:	e002      	b.n	80067f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	617b      	str	r3, [r7, #20]
      break;
 80067ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067f0:	4b13      	ldr	r3, [pc, #76]	@ (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	091b      	lsrs	r3, r3, #4
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	3301      	adds	r3, #1
 80067fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80067fe:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	fb03 f202 	mul.w	r2, r3, r2
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006816:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <HAL_RCC_GetSysClockFreq+0x108>)
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	0e5b      	lsrs	r3, r3, #25
 800681c:	f003 0303 	and.w	r3, r3, #3
 8006820:	3301      	adds	r3, #1
 8006822:	005b      	lsls	r3, r3, #1
 8006824:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	fbb2 f3f3 	udiv	r3, r2, r3
 800682e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006830:	69bb      	ldr	r3, [r7, #24]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3724      	adds	r7, #36	@ 0x24
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40021000 	.word	0x40021000
 8006844:	0800ff78 	.word	0x0800ff78
 8006848:	00f42400 	.word	0x00f42400
 800684c:	007a1200 	.word	0x007a1200

08006850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006854:	4b03      	ldr	r3, [pc, #12]	@ (8006864 <HAL_RCC_GetHCLKFreq+0x14>)
 8006856:	681b      	ldr	r3, [r3, #0]
}
 8006858:	4618      	mov	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000034 	.word	0x20000034

08006868 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006874:	4b2a      	ldr	r3, [pc, #168]	@ (8006920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006880:	f7fe fc98 	bl	80051b4 <HAL_PWREx_GetVoltageRange>
 8006884:	6178      	str	r0, [r7, #20]
 8006886:	e014      	b.n	80068b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006888:	4b25      	ldr	r3, [pc, #148]	@ (8006920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800688a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688c:	4a24      	ldr	r2, [pc, #144]	@ (8006920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800688e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006892:	6593      	str	r3, [r2, #88]	@ 0x58
 8006894:	4b22      	ldr	r3, [pc, #136]	@ (8006920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80068a0:	f7fe fc88 	bl	80051b4 <HAL_PWREx_GetVoltageRange>
 80068a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80068a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006920 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068b8:	d10b      	bne.n	80068d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b80      	cmp	r3, #128	@ 0x80
 80068be:	d919      	bls.n	80068f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80068c4:	d902      	bls.n	80068cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068c6:	2302      	movs	r3, #2
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	e013      	b.n	80068f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068cc:	2301      	movs	r3, #1
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	e010      	b.n	80068f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b80      	cmp	r3, #128	@ 0x80
 80068d6:	d902      	bls.n	80068de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80068d8:	2303      	movs	r3, #3
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	e00a      	b.n	80068f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b80      	cmp	r3, #128	@ 0x80
 80068e2:	d102      	bne.n	80068ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80068e4:	2302      	movs	r3, #2
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	e004      	b.n	80068f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b70      	cmp	r3, #112	@ 0x70
 80068ee:	d101      	bne.n	80068f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80068f0:	2301      	movs	r3, #1
 80068f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80068f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f023 0207 	bic.w	r2, r3, #7
 80068fc:	4909      	ldr	r1, [pc, #36]	@ (8006924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006904:	4b07      	ldr	r3, [pc, #28]	@ (8006924 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	429a      	cmp	r2, r3
 8006910:	d001      	beq.n	8006916 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40021000 	.word	0x40021000
 8006924:	40022000 	.word	0x40022000

08006928 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006930:	2300      	movs	r3, #0
 8006932:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006934:	2300      	movs	r3, #0
 8006936:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006940:	2b00      	cmp	r3, #0
 8006942:	d041      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006948:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800694c:	d02a      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800694e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006952:	d824      	bhi.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006954:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006958:	d008      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800695a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800695e:	d81e      	bhi.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006964:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006968:	d010      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800696a:	e018      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800696c:	4b86      	ldr	r3, [pc, #536]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4a85      	ldr	r2, [pc, #532]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006976:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006978:	e015      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	3304      	adds	r3, #4
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fabb 	bl	8006efc <RCCEx_PLLSAI1_Config>
 8006986:	4603      	mov	r3, r0
 8006988:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800698a:	e00c      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3320      	adds	r3, #32
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fba6 	bl	80070e4 <RCCEx_PLLSAI2_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800699c:	e003      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	74fb      	strb	r3, [r7, #19]
      break;
 80069a2:	e000      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80069a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069a6:	7cfb      	ldrb	r3, [r7, #19]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069ac:	4b76      	ldr	r3, [pc, #472]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069ba:	4973      	ldr	r1, [pc, #460]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80069c2:	e001      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c4:	7cfb      	ldrb	r3, [r7, #19]
 80069c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d041      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069dc:	d02a      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80069de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069e2:	d824      	bhi.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80069e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069e8:	d008      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80069ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069ee:	d81e      	bhi.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80069f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069f8:	d010      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80069fa:	e018      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069fc:	4b62      	ldr	r3, [pc, #392]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	4a61      	ldr	r2, [pc, #388]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a06:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a08:	e015      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	2100      	movs	r1, #0
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fa73 	bl	8006efc <RCCEx_PLLSAI1_Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a1a:	e00c      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3320      	adds	r3, #32
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fb5e 	bl	80070e4 <RCCEx_PLLSAI2_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a2c:	e003      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	74fb      	strb	r3, [r7, #19]
      break;
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a36:	7cfb      	ldrb	r3, [r7, #19]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a3c:	4b52      	ldr	r3, [pc, #328]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a4a:	494f      	ldr	r1, [pc, #316]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006a52:	e001      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	7cfb      	ldrb	r3, [r7, #19]
 8006a56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80a0 	beq.w	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a66:	2300      	movs	r3, #0
 8006a68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a6a:	4b47      	ldr	r3, [pc, #284]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00d      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a80:	4b41      	ldr	r3, [pc, #260]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a84:	4a40      	ldr	r2, [pc, #256]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a8c:	4b3e      	ldr	r3, [pc, #248]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a3a      	ldr	r2, [pc, #232]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aa8:	f7fc fdc6 	bl	8003638 <HAL_GetTick>
 8006aac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006aae:	e009      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab0:	f7fc fdc2 	bl	8003638 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d902      	bls.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	74fb      	strb	r3, [r7, #19]
        break;
 8006ac2:	e005      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ac4:	4b31      	ldr	r3, [pc, #196]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0ef      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006ad0:	7cfb      	ldrb	r3, [r7, #19]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d15c      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006adc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ae0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01f      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d019      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006af4:	4b24      	ldr	r3, [pc, #144]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006afe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b00:	4b21      	ldr	r3, [pc, #132]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b06:	4a20      	ldr	r2, [pc, #128]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b10:	4b1d      	ldr	r3, [pc, #116]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b16:	4a1c      	ldr	r2, [pc, #112]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b20:	4a19      	ldr	r2, [pc, #100]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d016      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b32:	f7fc fd81 	bl	8003638 <HAL_GetTick>
 8006b36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b38:	e00b      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b3a:	f7fc fd7d 	bl	8003638 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d902      	bls.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	74fb      	strb	r3, [r7, #19]
            break;
 8006b50:	e006      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b52:	4b0d      	ldr	r3, [pc, #52]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0ec      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006b60:	7cfb      	ldrb	r3, [r7, #19]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10c      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b66:	4b08      	ldr	r3, [pc, #32]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b76:	4904      	ldr	r1, [pc, #16]	@ (8006b88 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006b7e:	e009      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b80:	7cfb      	ldrb	r3, [r7, #19]
 8006b82:	74bb      	strb	r3, [r7, #18]
 8006b84:	e006      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006b86:	bf00      	nop
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b90:	7cfb      	ldrb	r3, [r7, #19]
 8006b92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b94:	7c7b      	ldrb	r3, [r7, #17]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d105      	bne.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b9a:	4b9e      	ldr	r3, [pc, #632]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9e:	4a9d      	ldr	r2, [pc, #628]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ba0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ba4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bb2:	4b98      	ldr	r3, [pc, #608]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb8:	f023 0203 	bic.w	r2, r3, #3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	4994      	ldr	r1, [pc, #592]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bd4:	4b8f      	ldr	r3, [pc, #572]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bda:	f023 020c 	bic.w	r2, r3, #12
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be2:	498c      	ldr	r1, [pc, #560]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006bf6:	4b87      	ldr	r3, [pc, #540]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bfc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c04:	4983      	ldr	r1, [pc, #524]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c18:	4b7e      	ldr	r3, [pc, #504]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c26:	497b      	ldr	r1, [pc, #492]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c3a:	4b76      	ldr	r3, [pc, #472]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c48:	4972      	ldr	r1, [pc, #456]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c5c:	4b6d      	ldr	r3, [pc, #436]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c6a:	496a      	ldr	r1, [pc, #424]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c7e:	4b65      	ldr	r3, [pc, #404]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c8c:	4961      	ldr	r1, [pc, #388]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ca0:	4b5c      	ldr	r3, [pc, #368]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cae:	4959      	ldr	r1, [pc, #356]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cc2:	4b54      	ldr	r3, [pc, #336]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd0:	4950      	ldr	r1, [pc, #320]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf2:	4948      	ldr	r1, [pc, #288]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d06:	4b43      	ldr	r3, [pc, #268]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d14:	493f      	ldr	r1, [pc, #252]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d028      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d28:	4b3a      	ldr	r3, [pc, #232]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d36:	4937      	ldr	r1, [pc, #220]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d46:	d106      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d48:	4b32      	ldr	r3, [pc, #200]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4a31      	ldr	r2, [pc, #196]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d52:	60d3      	str	r3, [r2, #12]
 8006d54:	e011      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d5e:	d10c      	bne.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
 8006d64:	2101      	movs	r1, #1
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 f8c8 	bl	8006efc <RCCEx_PLLSAI1_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006d70:	7cfb      	ldrb	r3, [r7, #19]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d001      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006d76:	7cfb      	ldrb	r3, [r7, #19]
 8006d78:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d028      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006d86:	4b23      	ldr	r3, [pc, #140]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d8c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d94:	491f      	ldr	r1, [pc, #124]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006da4:	d106      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	4a1a      	ldr	r2, [pc, #104]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006db0:	60d3      	str	r3, [r2, #12]
 8006db2:	e011      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f899 	bl	8006efc <RCCEx_PLLSAI1_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d02b      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006de4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df2:	4908      	ldr	r1, [pc, #32]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e02:	d109      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e04:	4b03      	ldr	r3, [pc, #12]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	4a02      	ldr	r2, [pc, #8]	@ (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e0e:	60d3      	str	r3, [r2, #12]
 8006e10:	e014      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006e12:	bf00      	nop
 8006e14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e20:	d10c      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3304      	adds	r3, #4
 8006e26:	2101      	movs	r1, #1
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f867 	bl	8006efc <RCCEx_PLLSAI1_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e32:	7cfb      	ldrb	r3, [r7, #19]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006e38:	7cfb      	ldrb	r3, [r7, #19]
 8006e3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d02f      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e48:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e56:	4928      	ldr	r1, [pc, #160]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e66:	d10d      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	2102      	movs	r1, #2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 f844 	bl	8006efc <RCCEx_PLLSAI1_Config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e78:	7cfb      	ldrb	r3, [r7, #19]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d014      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006e7e:	7cfb      	ldrb	r3, [r7, #19]
 8006e80:	74bb      	strb	r3, [r7, #18]
 8006e82:	e011      	b.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e8c:	d10c      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3320      	adds	r3, #32
 8006e92:	2102      	movs	r1, #2
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 f925 	bl	80070e4 <RCCEx_PLLSAI2_Config>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ea4:	7cfb      	ldrb	r3, [r7, #19]
 8006ea6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006eb4:	4b10      	ldr	r3, [pc, #64]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ec2:	490d      	ldr	r1, [pc, #52]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ed6:	4b08      	ldr	r3, [pc, #32]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006edc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ee6:	4904      	ldr	r1, [pc, #16]	@ (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006eee:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	40021000 	.word	0x40021000

08006efc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f0a:	4b75      	ldr	r3, [pc, #468]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d018      	beq.n	8006f48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006f16:	4b72      	ldr	r3, [pc, #456]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f003 0203 	and.w	r2, r3, #3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d10d      	bne.n	8006f42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
       ||
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d009      	beq.n	8006f42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006f2e:	4b6c      	ldr	r3, [pc, #432]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	091b      	lsrs	r3, r3, #4
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
       ||
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d047      	beq.n	8006fd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	73fb      	strb	r3, [r7, #15]
 8006f46:	e044      	b.n	8006fd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d018      	beq.n	8006f82 <RCCEx_PLLSAI1_Config+0x86>
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d825      	bhi.n	8006fa0 <RCCEx_PLLSAI1_Config+0xa4>
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d002      	beq.n	8006f5e <RCCEx_PLLSAI1_Config+0x62>
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d009      	beq.n	8006f70 <RCCEx_PLLSAI1_Config+0x74>
 8006f5c:	e020      	b.n	8006fa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006f5e:	4b60      	ldr	r3, [pc, #384]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d11d      	bne.n	8006fa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f6e:	e01a      	b.n	8006fa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f70:	4b5b      	ldr	r3, [pc, #364]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d116      	bne.n	8006faa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f80:	e013      	b.n	8006faa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f82:	4b57      	ldr	r3, [pc, #348]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10f      	bne.n	8006fae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f8e:	4b54      	ldr	r3, [pc, #336]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f9e:	e006      	b.n	8006fae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa4:	e004      	b.n	8006fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e002      	b.n	8006fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006faa:	bf00      	nop
 8006fac:	e000      	b.n	8006fb0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006fae:	bf00      	nop
    }

    if(status == HAL_OK)
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10d      	bne.n	8006fd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6819      	ldr	r1, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	4944      	ldr	r1, [pc, #272]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d17d      	bne.n	80070d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006fd8:	4b41      	ldr	r3, [pc, #260]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a40      	ldr	r2, [pc, #256]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006fde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe4:	f7fc fb28 	bl	8003638 <HAL_GetTick>
 8006fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fea:	e009      	b.n	8007000 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fec:	f7fc fb24 	bl	8003638 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d902      	bls.n	8007000 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8006ffe:	e005      	b.n	800700c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007000:	4b37      	ldr	r3, [pc, #220]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1ef      	bne.n	8006fec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d160      	bne.n	80070d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d111      	bne.n	800703c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007018:	4b31      	ldr	r3, [pc, #196]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007020:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6892      	ldr	r2, [r2, #8]
 8007028:	0211      	lsls	r1, r2, #8
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	68d2      	ldr	r2, [r2, #12]
 800702e:	0912      	lsrs	r2, r2, #4
 8007030:	0452      	lsls	r2, r2, #17
 8007032:	430a      	orrs	r2, r1
 8007034:	492a      	ldr	r1, [pc, #168]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007036:	4313      	orrs	r3, r2
 8007038:	610b      	str	r3, [r1, #16]
 800703a:	e027      	b.n	800708c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d112      	bne.n	8007068 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007042:	4b27      	ldr	r3, [pc, #156]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800704a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6892      	ldr	r2, [r2, #8]
 8007052:	0211      	lsls	r1, r2, #8
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6912      	ldr	r2, [r2, #16]
 8007058:	0852      	lsrs	r2, r2, #1
 800705a:	3a01      	subs	r2, #1
 800705c:	0552      	lsls	r2, r2, #21
 800705e:	430a      	orrs	r2, r1
 8007060:	491f      	ldr	r1, [pc, #124]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007062:	4313      	orrs	r3, r2
 8007064:	610b      	str	r3, [r1, #16]
 8007066:	e011      	b.n	800708c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007068:	4b1d      	ldr	r3, [pc, #116]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007070:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6892      	ldr	r2, [r2, #8]
 8007078:	0211      	lsls	r1, r2, #8
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6952      	ldr	r2, [r2, #20]
 800707e:	0852      	lsrs	r2, r2, #1
 8007080:	3a01      	subs	r2, #1
 8007082:	0652      	lsls	r2, r2, #25
 8007084:	430a      	orrs	r2, r1
 8007086:	4916      	ldr	r1, [pc, #88]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007088:	4313      	orrs	r3, r2
 800708a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800708c:	4b14      	ldr	r3, [pc, #80]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a13      	ldr	r2, [pc, #76]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007092:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007096:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007098:	f7fc face 	bl	8003638 <HAL_GetTick>
 800709c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800709e:	e009      	b.n	80070b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80070a0:	f7fc faca 	bl	8003638 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d902      	bls.n	80070b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	73fb      	strb	r3, [r7, #15]
          break;
 80070b2:	e005      	b.n	80070c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80070b4:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d0ef      	beq.n	80070a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d106      	bne.n	80070d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80070c6:	4b06      	ldr	r3, [pc, #24]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	4904      	ldr	r1, [pc, #16]	@ (80070e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80070d0:	4313      	orrs	r3, r2
 80070d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	40021000 	.word	0x40021000

080070e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80070f2:	4b6a      	ldr	r3, [pc, #424]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d018      	beq.n	8007130 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80070fe:	4b67      	ldr	r3, [pc, #412]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f003 0203 	and.w	r2, r3, #3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d10d      	bne.n	800712a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
       ||
 8007112:	2b00      	cmp	r3, #0
 8007114:	d009      	beq.n	800712a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007116:	4b61      	ldr	r3, [pc, #388]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	091b      	lsrs	r3, r3, #4
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
       ||
 8007126:	429a      	cmp	r2, r3
 8007128:	d047      	beq.n	80071ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	73fb      	strb	r3, [r7, #15]
 800712e:	e044      	b.n	80071ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b03      	cmp	r3, #3
 8007136:	d018      	beq.n	800716a <RCCEx_PLLSAI2_Config+0x86>
 8007138:	2b03      	cmp	r3, #3
 800713a:	d825      	bhi.n	8007188 <RCCEx_PLLSAI2_Config+0xa4>
 800713c:	2b01      	cmp	r3, #1
 800713e:	d002      	beq.n	8007146 <RCCEx_PLLSAI2_Config+0x62>
 8007140:	2b02      	cmp	r3, #2
 8007142:	d009      	beq.n	8007158 <RCCEx_PLLSAI2_Config+0x74>
 8007144:	e020      	b.n	8007188 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007146:	4b55      	ldr	r3, [pc, #340]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d11d      	bne.n	800718e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007156:	e01a      	b.n	800718e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007158:	4b50      	ldr	r3, [pc, #320]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007160:	2b00      	cmp	r3, #0
 8007162:	d116      	bne.n	8007192 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007168:	e013      	b.n	8007192 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800716a:	4b4c      	ldr	r3, [pc, #304]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10f      	bne.n	8007196 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007176:	4b49      	ldr	r3, [pc, #292]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d109      	bne.n	8007196 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007186:	e006      	b.n	8007196 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]
      break;
 800718c:	e004      	b.n	8007198 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800718e:	bf00      	nop
 8007190:	e002      	b.n	8007198 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007192:	bf00      	nop
 8007194:	e000      	b.n	8007198 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007196:	bf00      	nop
    }

    if(status == HAL_OK)
 8007198:	7bfb      	ldrb	r3, [r7, #15]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10d      	bne.n	80071ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800719e:	4b3f      	ldr	r3, [pc, #252]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6819      	ldr	r1, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	430b      	orrs	r3, r1
 80071b4:	4939      	ldr	r1, [pc, #228]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d167      	bne.n	8007290 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80071c0:	4b36      	ldr	r3, [pc, #216]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a35      	ldr	r2, [pc, #212]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071cc:	f7fc fa34 	bl	8003638 <HAL_GetTick>
 80071d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80071d2:	e009      	b.n	80071e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80071d4:	f7fc fa30 	bl	8003638 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d902      	bls.n	80071e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	73fb      	strb	r3, [r7, #15]
        break;
 80071e6:	e005      	b.n	80071f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80071e8:	4b2c      	ldr	r3, [pc, #176]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1ef      	bne.n	80071d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d14a      	bne.n	8007290 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d111      	bne.n	8007224 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007200:	4b26      	ldr	r3, [pc, #152]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6892      	ldr	r2, [r2, #8]
 8007210:	0211      	lsls	r1, r2, #8
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68d2      	ldr	r2, [r2, #12]
 8007216:	0912      	lsrs	r2, r2, #4
 8007218:	0452      	lsls	r2, r2, #17
 800721a:	430a      	orrs	r2, r1
 800721c:	491f      	ldr	r1, [pc, #124]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 800721e:	4313      	orrs	r3, r2
 8007220:	614b      	str	r3, [r1, #20]
 8007222:	e011      	b.n	8007248 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007224:	4b1d      	ldr	r3, [pc, #116]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800722c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6892      	ldr	r2, [r2, #8]
 8007234:	0211      	lsls	r1, r2, #8
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6912      	ldr	r2, [r2, #16]
 800723a:	0852      	lsrs	r2, r2, #1
 800723c:	3a01      	subs	r2, #1
 800723e:	0652      	lsls	r2, r2, #25
 8007240:	430a      	orrs	r2, r1
 8007242:	4916      	ldr	r1, [pc, #88]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007244:	4313      	orrs	r3, r2
 8007246:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007248:	4b14      	ldr	r3, [pc, #80]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a13      	ldr	r2, [pc, #76]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 800724e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007252:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007254:	f7fc f9f0 	bl	8003638 <HAL_GetTick>
 8007258:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800725a:	e009      	b.n	8007270 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800725c:	f7fc f9ec 	bl	8003638 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d902      	bls.n	8007270 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	73fb      	strb	r3, [r7, #15]
          break;
 800726e:	e005      	b.n	800727c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007270:	4b0a      	ldr	r3, [pc, #40]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0ef      	beq.n	800725c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007282:	4b06      	ldr	r3, [pc, #24]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007284:	695a      	ldr	r2, [r3, #20]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	4904      	ldr	r1, [pc, #16]	@ (800729c <RCCEx_PLLSAI2_Config+0x1b8>)
 800728c:	4313      	orrs	r3, r2
 800728e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	40021000 	.word	0x40021000

080072a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e095      	b.n	80073de <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d108      	bne.n	80072cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072c2:	d009      	beq.n	80072d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	61da      	str	r2, [r3, #28]
 80072ca:	e005      	b.n	80072d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fb fee8 	bl	80030c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800730e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007318:	d902      	bls.n	8007320 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	e002      	b.n	8007326 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007320:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007324:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800732e:	d007      	beq.n	8007340 <HAL_SPI_Init+0xa0>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007338:	d002      	beq.n	8007340 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800736e:	431a      	orrs	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007378:	431a      	orrs	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007382:	ea42 0103 	orr.w	r1, r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	0c1b      	lsrs	r3, r3, #16
 800739c:	f003 0204 	and.w	r2, r3, #4
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80073bc:	ea42 0103 	orr.w	r1, r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b088      	sub	sp, #32
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	603b      	str	r3, [r7, #0]
 80073f2:	4613      	mov	r3, r2
 80073f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_SPI_Transmit+0x22>
 8007404:	2302      	movs	r3, #2
 8007406:	e15f      	b.n	80076c8 <HAL_SPI_Transmit+0x2e2>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007410:	f7fc f912 	bl	8003638 <HAL_GetTick>
 8007414:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007416:	88fb      	ldrh	r3, [r7, #6]
 8007418:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d002      	beq.n	800742c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007426:	2302      	movs	r3, #2
 8007428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800742a:	e148      	b.n	80076be <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_SPI_Transmit+0x52>
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800743c:	e13f      	b.n	80076be <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2203      	movs	r2, #3
 8007442:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	88fa      	ldrh	r2, [r7, #6]
 8007456:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007488:	d10f      	bne.n	80074aa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b4:	2b40      	cmp	r3, #64	@ 0x40
 80074b6:	d007      	beq.n	80074c8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80074d0:	d94f      	bls.n	8007572 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_SPI_Transmit+0xfa>
 80074da:	8afb      	ldrh	r3, [r7, #22]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d142      	bne.n	8007566 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e4:	881a      	ldrh	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f0:	1c9a      	adds	r2, r3, #2
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007504:	e02f      	b.n	8007566 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b02      	cmp	r3, #2
 8007512:	d112      	bne.n	800753a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007518:	881a      	ldrh	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	1c9a      	adds	r2, r3, #2
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29a      	uxth	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007538:	e015      	b.n	8007566 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800753a:	f7fc f87d 	bl	8003638 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d803      	bhi.n	8007552 <HAL_SPI_Transmit+0x16c>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d102      	bne.n	8007558 <HAL_SPI_Transmit+0x172>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d106      	bne.n	8007566 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007564:	e0ab      	b.n	80076be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1ca      	bne.n	8007506 <HAL_SPI_Transmit+0x120>
 8007570:	e080      	b.n	8007674 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_SPI_Transmit+0x19a>
 800757a:	8afb      	ldrh	r3, [r7, #22]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d174      	bne.n	800766a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	d912      	bls.n	80075b0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758e:	881a      	ldrh	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759a:	1c9a      	adds	r2, r3, #2
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b02      	subs	r3, #2
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075ae:	e05c      	b.n	800766a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	330c      	adds	r3, #12
 80075ba:	7812      	ldrb	r2, [r2, #0]
 80075bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80075d6:	e048      	b.n	800766a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d12b      	bne.n	800763e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d912      	bls.n	8007616 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f4:	881a      	ldrh	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b02      	subs	r3, #2
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007614:	e029      	b.n	800766a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	330c      	adds	r3, #12
 8007620:	7812      	ldrb	r2, [r2, #0]
 8007622:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007632:	b29b      	uxth	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800763c:	e015      	b.n	800766a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800763e:	f7fb fffb 	bl	8003638 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	429a      	cmp	r2, r3
 800764c:	d803      	bhi.n	8007656 <HAL_SPI_Transmit+0x270>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007654:	d102      	bne.n	800765c <HAL_SPI_Transmit+0x276>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d106      	bne.n	800766a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007668:	e029      	b.n	80076be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1b1      	bne.n	80075d8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f947 	bl	800790c <SPI_EndRxTxTransaction>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	613b      	str	r3, [r7, #16]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	77fb      	strb	r3, [r7, #31]
 80076b4:	e003      	b.n	80076be <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80076c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3720      	adds	r7, #32
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076e0:	f7fb ffaa 	bl	8003638 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4413      	add	r3, r2
 80076ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076f0:	f7fb ffa2 	bl	8003638 <HAL_GetTick>
 80076f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076f6:	4b39      	ldr	r3, [pc, #228]	@ (80077dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	015b      	lsls	r3, r3, #5
 80076fc:	0d1b      	lsrs	r3, r3, #20
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	fb02 f303 	mul.w	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007706:	e054      	b.n	80077b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d050      	beq.n	80077b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007710:	f7fb ff92 	bl	8003638 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	429a      	cmp	r2, r3
 800771e:	d902      	bls.n	8007726 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d13d      	bne.n	80077a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007734:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800773e:	d111      	bne.n	8007764 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007748:	d004      	beq.n	8007754 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007752:	d107      	bne.n	8007764 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007762:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007768:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800776c:	d10f      	bne.n	800778e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800778c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e017      	b.n	80077d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4013      	ands	r3, r2
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	429a      	cmp	r2, r3
 80077c0:	bf0c      	ite	eq
 80077c2:	2301      	moveq	r3, #1
 80077c4:	2300      	movne	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d19b      	bne.n	8007708 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000034 	.word	0x20000034

080077e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08a      	sub	sp, #40	@ 0x28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80077f2:	f7fb ff21 	bl	8003638 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	4413      	add	r3, r2
 8007800:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007802:	f7fb ff19 	bl	8003638 <HAL_GetTick>
 8007806:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	330c      	adds	r3, #12
 800780e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007810:	4b3d      	ldr	r3, [pc, #244]	@ (8007908 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	00da      	lsls	r2, r3, #3
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	0d1b      	lsrs	r3, r3, #20
 8007820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007822:	fb02 f303 	mul.w	r3, r2, r3
 8007826:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007828:	e060      	b.n	80078ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007830:	d107      	bne.n	8007842 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007840:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d050      	beq.n	80078ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800784a:	f7fb fef5 	bl	8003638 <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007856:	429a      	cmp	r2, r3
 8007858:	d902      	bls.n	8007860 <SPI_WaitFifoStateUntilTimeout+0x80>
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	2b00      	cmp	r3, #0
 800785e:	d13d      	bne.n	80078dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800786e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007878:	d111      	bne.n	800789e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007882:	d004      	beq.n	800788e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800788c:	d107      	bne.n	800789e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800789c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078a6:	d10f      	bne.n	80078c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e010      	b.n	80078fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	4013      	ands	r3, r2
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d196      	bne.n	800782a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3728      	adds	r7, #40	@ 0x28
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000034 	.word	0x20000034

0800790c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af02      	add	r7, sp, #8
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2200      	movs	r2, #0
 8007920:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff ff5b 	bl	80077e0 <SPI_WaitFifoStateUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e027      	b.n	8007990 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	2180      	movs	r1, #128	@ 0x80
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff fec0 	bl	80076d0 <SPI_WaitFlagStateUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800795a:	f043 0220 	orr.w	r2, r3, #32
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e014      	b.n	8007990 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2200      	movs	r2, #0
 800796e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7ff ff34 	bl	80077e0 <SPI_WaitFifoStateUntilTimeout>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d007      	beq.n	800798e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007982:	f043 0220 	orr.w	r2, r3, #32
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e000      	b.n	8007990 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007998:	b084      	sub	sp, #16
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	f107 001c 	add.w	r0, r7, #28
 80079a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f001 fa1c 	bl	8008df4 <USB_CoreReset>
 80079bc:	4603      	mov	r3, r0
 80079be:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80079c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80079d2:	e005      	b.n	80079e0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079ec:	b004      	add	sp, #16
 80079ee:	4770      	bx	lr

080079f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d165      	bne.n	8007ad0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4a3e      	ldr	r2, [pc, #248]	@ (8007b00 <USB_SetTurnaroundTime+0x110>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d906      	bls.n	8007a1a <USB_SetTurnaroundTime+0x2a>
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8007b04 <USB_SetTurnaroundTime+0x114>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d202      	bcs.n	8007a1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a14:	230f      	movs	r3, #15
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e05c      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4a39      	ldr	r2, [pc, #228]	@ (8007b04 <USB_SetTurnaroundTime+0x114>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d306      	bcc.n	8007a30 <USB_SetTurnaroundTime+0x40>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	4a38      	ldr	r2, [pc, #224]	@ (8007b08 <USB_SetTurnaroundTime+0x118>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d202      	bcs.n	8007a30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a2a:	230e      	movs	r3, #14
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	e051      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4a35      	ldr	r2, [pc, #212]	@ (8007b08 <USB_SetTurnaroundTime+0x118>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d306      	bcc.n	8007a46 <USB_SetTurnaroundTime+0x56>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4a34      	ldr	r2, [pc, #208]	@ (8007b0c <USB_SetTurnaroundTime+0x11c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d202      	bcs.n	8007a46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a40:	230d      	movs	r3, #13
 8007a42:	617b      	str	r3, [r7, #20]
 8007a44:	e046      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4a30      	ldr	r2, [pc, #192]	@ (8007b0c <USB_SetTurnaroundTime+0x11c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d306      	bcc.n	8007a5c <USB_SetTurnaroundTime+0x6c>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	4a2f      	ldr	r2, [pc, #188]	@ (8007b10 <USB_SetTurnaroundTime+0x120>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d802      	bhi.n	8007a5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a56:	230c      	movs	r3, #12
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e03b      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b10 <USB_SetTurnaroundTime+0x120>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d906      	bls.n	8007a72 <USB_SetTurnaroundTime+0x82>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4a2b      	ldr	r2, [pc, #172]	@ (8007b14 <USB_SetTurnaroundTime+0x124>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d802      	bhi.n	8007a72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a6c:	230b      	movs	r3, #11
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e030      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	4a27      	ldr	r2, [pc, #156]	@ (8007b14 <USB_SetTurnaroundTime+0x124>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d906      	bls.n	8007a88 <USB_SetTurnaroundTime+0x98>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4a26      	ldr	r2, [pc, #152]	@ (8007b18 <USB_SetTurnaroundTime+0x128>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d802      	bhi.n	8007a88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007a82:	230a      	movs	r3, #10
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e025      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4a23      	ldr	r2, [pc, #140]	@ (8007b18 <USB_SetTurnaroundTime+0x128>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d906      	bls.n	8007a9e <USB_SetTurnaroundTime+0xae>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4a22      	ldr	r2, [pc, #136]	@ (8007b1c <USB_SetTurnaroundTime+0x12c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d202      	bcs.n	8007a9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007a98:	2309      	movs	r3, #9
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e01a      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b1c <USB_SetTurnaroundTime+0x12c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d306      	bcc.n	8007ab4 <USB_SetTurnaroundTime+0xc4>
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b20 <USB_SetTurnaroundTime+0x130>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d802      	bhi.n	8007ab4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007aae:	2308      	movs	r3, #8
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	e00f      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b20 <USB_SetTurnaroundTime+0x130>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d906      	bls.n	8007aca <USB_SetTurnaroundTime+0xda>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4a19      	ldr	r2, [pc, #100]	@ (8007b24 <USB_SetTurnaroundTime+0x134>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d202      	bcs.n	8007aca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ac4:	2307      	movs	r3, #7
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	e004      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007aca:	2306      	movs	r3, #6
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	e001      	b.n	8007ad4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ad0:	2309      	movs	r3, #9
 8007ad2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	029b      	lsls	r3, r3, #10
 8007ae8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007aec:	431a      	orrs	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	00d8acbf 	.word	0x00d8acbf
 8007b04:	00e4e1c0 	.word	0x00e4e1c0
 8007b08:	00f42400 	.word	0x00f42400
 8007b0c:	01067380 	.word	0x01067380
 8007b10:	011a499f 	.word	0x011a499f
 8007b14:	01312cff 	.word	0x01312cff
 8007b18:	014ca43f 	.word	0x014ca43f
 8007b1c:	016e3600 	.word	0x016e3600
 8007b20:	01a6ab1f 	.word	0x01a6ab1f
 8007b24:	01e84800 	.word	0x01e84800

08007b28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f043 0201 	orr.w	r2, r3, #1
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f023 0201 	bic.w	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d115      	bne.n	8007bba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	f7fb fd58 	bl	8003650 <HAL_Delay>
      ms++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 f8ab 	bl	8008d02 <USB_GetMode>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d01e      	beq.n	8007bf0 <USB_SetCurrentMode+0x84>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b31      	cmp	r3, #49	@ 0x31
 8007bb6:	d9f0      	bls.n	8007b9a <USB_SetCurrentMode+0x2e>
 8007bb8:	e01a      	b.n	8007bf0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d115      	bne.n	8007bec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bcc:	2001      	movs	r0, #1
 8007bce:	f7fb fd3f 	bl	8003650 <HAL_Delay>
      ms++;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 f892 	bl	8008d02 <USB_GetMode>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <USB_SetCurrentMode+0x84>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b31      	cmp	r3, #49	@ 0x31
 8007be8:	d9f0      	bls.n	8007bcc <USB_SetCurrentMode+0x60>
 8007bea:	e001      	b.n	8007bf0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e005      	b.n	8007bfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b32      	cmp	r3, #50	@ 0x32
 8007bf4:	d101      	bne.n	8007bfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e000      	b.n	8007bfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c04:	b084      	sub	sp, #16
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c1e:	2300      	movs	r3, #0
 8007c20:	613b      	str	r3, [r7, #16]
 8007c22:	e009      	b.n	8007c38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	3340      	adds	r3, #64	@ 0x40
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	2200      	movs	r2, #0
 8007c30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	3301      	adds	r3, #1
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	2b0e      	cmp	r3, #14
 8007c3c:	d9f2      	bls.n	8007c24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d11c      	bne.n	8007c7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c52:	f043 0302 	orr.w	r3, r3, #2
 8007c56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	e005      	b.n	8007c8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c90:	461a      	mov	r2, r3
 8007c92:	2300      	movs	r3, #0
 8007c94:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c96:	2103      	movs	r1, #3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f959 	bl	8007f50 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c9e:	2110      	movs	r1, #16
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f8f1 	bl	8007e88 <USB_FlushTxFifo>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f91d 	bl	8007ef0 <USB_FlushRxFifo>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	2300      	movs	r3, #0
 8007cca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cde:	461a      	mov	r2, r3
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	613b      	str	r3, [r7, #16]
 8007ce8:	e043      	b.n	8007d72 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d00:	d118      	bne.n	8007d34 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10a      	bne.n	8007d1e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d14:	461a      	mov	r2, r3
 8007d16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e013      	b.n	8007d46 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	e008      	b.n	8007d46 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d40:	461a      	mov	r2, r3
 8007d42:	2300      	movs	r3, #0
 8007d44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	015a      	lsls	r2, r3, #5
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d52:	461a      	mov	r2, r3
 8007d54:	2300      	movs	r3, #0
 8007d56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d64:	461a      	mov	r2, r3
 8007d66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d3b7      	bcc.n	8007cea <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	e043      	b.n	8007e08 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d96:	d118      	bne.n	8007dca <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007daa:	461a      	mov	r2, r3
 8007dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	e013      	b.n	8007ddc <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007dc6:	6013      	str	r3, [r2, #0]
 8007dc8:	e008      	b.n	8007ddc <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de8:	461a      	mov	r2, r3
 8007dea:	2300      	movs	r3, #0
 8007dec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3301      	adds	r3, #1
 8007e06:	613b      	str	r3, [r7, #16]
 8007e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d3b7      	bcc.n	8007d80 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007e30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	f043 0210 	orr.w	r2, r3, #16
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699a      	ldr	r2, [r3, #24]
 8007e42:	4b10      	ldr	r3, [pc, #64]	@ (8007e84 <USB_DevInit+0x280>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	f043 0208 	orr.w	r2, r3, #8
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d107      	bne.n	8007e72 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e6a:	f043 0304 	orr.w	r3, r3, #4
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e7e:	b004      	add	sp, #16
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	803c3800 	.word	0x803c3800

08007e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4a13      	ldr	r2, [pc, #76]	@ (8007eec <USB_FlushTxFifo+0x64>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d901      	bls.n	8007ea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e01b      	b.n	8007ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	daf2      	bge.n	8007e96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	019b      	lsls	r3, r3, #6
 8007eb8:	f043 0220 	orr.w	r2, r3, #32
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4a08      	ldr	r2, [pc, #32]	@ (8007eec <USB_FlushTxFifo+0x64>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d901      	bls.n	8007ed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e006      	b.n	8007ee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	d0f0      	beq.n	8007ec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	00030d40 	.word	0x00030d40

08007ef0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4a11      	ldr	r2, [pc, #68]	@ (8007f4c <USB_FlushRxFifo+0x5c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d901      	bls.n	8007f0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e018      	b.n	8007f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	daf2      	bge.n	8007efc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2210      	movs	r2, #16
 8007f1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4a08      	ldr	r2, [pc, #32]	@ (8007f4c <USB_FlushRxFifo+0x5c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e006      	b.n	8007f40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	f003 0310 	and.w	r3, r3, #16
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d0f0      	beq.n	8007f20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	00030d40 	.word	0x00030d40

08007f50 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f70:	4313      	orrs	r3, r2
 8007f72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 0306 	and.w	r3, r3, #6
 8007f9a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d002      	beq.n	8007fa8 <USB_GetDevSpeed+0x26>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b06      	cmp	r3, #6
 8007fa6:	d102      	bne.n	8007fae <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	75fb      	strb	r3, [r7, #23]
 8007fac:	e001      	b.n	8007fb2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8007fae:	230f      	movs	r3, #15
 8007fb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	371c      	adds	r7, #28
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d13a      	bne.n	8008052 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe2:	69da      	ldr	r2, [r3, #28]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	2101      	movs	r1, #1
 8007fee:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	68f9      	ldr	r1, [r7, #12]
 8007ff6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d155      	bne.n	80080c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	791b      	ldrb	r3, [r3, #4]
 800802e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008030:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	059b      	lsls	r3, r3, #22
 8008036:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008038:	4313      	orrs	r3, r2
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	0151      	lsls	r1, r2, #5
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	440a      	add	r2, r1
 8008042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800804a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	e036      	b.n	80080c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008058:	69da      	ldr	r2, [r3, #28]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	f003 030f 	and.w	r3, r3, #15
 8008062:	2101      	movs	r1, #1
 8008064:	fa01 f303 	lsl.w	r3, r1, r3
 8008068:	041b      	lsls	r3, r3, #16
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008070:	4313      	orrs	r3, r2
 8008072:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d11a      	bne.n	80080c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	791b      	ldrb	r3, [r3, #4]
 80080a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80080a6:	430b      	orrs	r3, r1
 80080a8:	4313      	orrs	r3, r2
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	0151      	lsls	r1, r2, #5
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	440a      	add	r2, r1
 80080b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d161      	bne.n	80081b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008102:	d11f      	bne.n	8008144 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	0151      	lsls	r1, r2, #5
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	440a      	add	r2, r1
 800811a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800811e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008122:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	0151      	lsls	r1, r2, #5
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	440a      	add	r2, r1
 800813a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800813e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008142:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800814a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	2101      	movs	r1, #1
 8008156:	fa01 f303 	lsl.w	r3, r1, r3
 800815a:	b29b      	uxth	r3, r3
 800815c:	43db      	mvns	r3, r3
 800815e:	68f9      	ldr	r1, [r7, #12]
 8008160:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008164:	4013      	ands	r3, r2
 8008166:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816e:	69da      	ldr	r2, [r3, #28]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	2101      	movs	r1, #1
 800817a:	fa01 f303 	lsl.w	r3, r1, r3
 800817e:	b29b      	uxth	r3, r3
 8008180:	43db      	mvns	r3, r3
 8008182:	68f9      	ldr	r1, [r7, #12]
 8008184:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008188:	4013      	ands	r3, r2
 800818a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	0159      	lsls	r1, r3, #5
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	440b      	add	r3, r1
 80081a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a6:	4619      	mov	r1, r3
 80081a8:	4b35      	ldr	r3, [pc, #212]	@ (8008280 <USB_DeactivateEndpoint+0x1b0>)
 80081aa:	4013      	ands	r3, r2
 80081ac:	600b      	str	r3, [r1, #0]
 80081ae:	e060      	b.n	8008272 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081c6:	d11f      	bne.n	8008208 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	440a      	add	r2, r1
 80081de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008202:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008206:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800820e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	f003 030f 	and.w	r3, r3, #15
 8008218:	2101      	movs	r1, #1
 800821a:	fa01 f303 	lsl.w	r3, r1, r3
 800821e:	041b      	lsls	r3, r3, #16
 8008220:	43db      	mvns	r3, r3
 8008222:	68f9      	ldr	r1, [r7, #12]
 8008224:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008228:	4013      	ands	r3, r2
 800822a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008232:	69da      	ldr	r2, [r3, #28]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 030f 	and.w	r3, r3, #15
 800823c:	2101      	movs	r1, #1
 800823e:	fa01 f303 	lsl.w	r3, r1, r3
 8008242:	041b      	lsls	r3, r3, #16
 8008244:	43db      	mvns	r3, r3
 8008246:	68f9      	ldr	r1, [r7, #12]
 8008248:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800824c:	4013      	ands	r3, r2
 800824e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	0159      	lsls	r1, r3, #5
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	440b      	add	r3, r1
 8008266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800826a:	4619      	mov	r1, r3
 800826c:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <USB_DeactivateEndpoint+0x1b4>)
 800826e:	4013      	ands	r3, r2
 8008270:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	ec337800 	.word	0xec337800
 8008284:	eff37800 	.word	0xeff37800

08008288 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	f040 8128 	bne.w	80084f6 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d132      	bne.n	8008314 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	0151      	lsls	r1, r2, #5
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	440a      	add	r2, r1
 80082c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082c8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082cc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	0151      	lsls	r1, r2, #5
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	440a      	add	r2, r1
 8008308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800830c:	0cdb      	lsrs	r3, r3, #19
 800830e:	04db      	lsls	r3, r3, #19
 8008310:	6113      	str	r3, [r2, #16]
 8008312:	e092      	b.n	800843a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	440a      	add	r2, r1
 800832a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800832e:	0cdb      	lsrs	r3, r3, #19
 8008330:	04db      	lsls	r3, r3, #19
 8008332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	440a      	add	r2, r1
 800834a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800834e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008352:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008356:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d11a      	bne.n	8008394 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	429a      	cmp	r2, r3
 8008368:	d903      	bls.n	8008372 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	689a      	ldr	r2, [r3, #8]
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	440a      	add	r2, r1
 8008388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800838c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008390:	6113      	str	r3, [r2, #16]
 8008392:	e01b      	b.n	80083cc <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	6919      	ldr	r1, [r3, #16]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	440b      	add	r3, r1
 80083ac:	1e59      	subs	r1, r3, #1
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80083b6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80083b8:	4b8d      	ldr	r3, [pc, #564]	@ (80085f0 <USB_EPStartXfer+0x368>)
 80083ba:	400b      	ands	r3, r1
 80083bc:	6939      	ldr	r1, [r7, #16]
 80083be:	0148      	lsls	r0, r1, #5
 80083c0:	6979      	ldr	r1, [r7, #20]
 80083c2:	4401      	add	r1, r0
 80083c4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80083c8:	4313      	orrs	r3, r2
 80083ca:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083e2:	6939      	ldr	r1, [r7, #16]
 80083e4:	0148      	lsls	r0, r1, #5
 80083e6:	6979      	ldr	r1, [r7, #20]
 80083e8:	4401      	add	r1, r0
 80083ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80083ee:	4313      	orrs	r3, r2
 80083f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d11f      	bne.n	800843a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	0151      	lsls	r1, r2, #5
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	440a      	add	r2, r1
 8008410:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008414:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008418:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008434:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008438:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	0151      	lsls	r1, r2, #5
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	440a      	add	r2, r1
 8008450:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008454:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008458:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	791b      	ldrb	r3, [r3, #4]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d015      	beq.n	800848e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f000 8139 	beq.w	80086de <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	2101      	movs	r1, #1
 800847e:	fa01 f303 	lsl.w	r3, r1, r3
 8008482:	6979      	ldr	r1, [r7, #20]
 8008484:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008488:	4313      	orrs	r3, r2
 800848a:	634b      	str	r3, [r1, #52]	@ 0x34
 800848c:	e127      	b.n	80086de <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800849a:	2b00      	cmp	r3, #0
 800849c:	d110      	bne.n	80084c0 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	015a      	lsls	r2, r3, #5
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	4413      	add	r3, r2
 80084a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	0151      	lsls	r1, r2, #5
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	440a      	add	r2, r1
 80084b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	e00f      	b.n	80084e0 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	015a      	lsls	r2, r3, #5
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	4413      	add	r3, r2
 80084c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	0151      	lsls	r1, r2, #5
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	440a      	add	r2, r1
 80084d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084de:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	68d9      	ldr	r1, [r3, #12]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781a      	ldrb	r2, [r3, #0]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f9a6 	bl	8008840 <USB_WritePacket>
 80084f4:	e0f3      	b.n	80086de <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	440a      	add	r2, r1
 800850c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008510:	0cdb      	lsrs	r3, r3, #19
 8008512:	04db      	lsls	r3, r3, #19
 8008514:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	440a      	add	r2, r1
 800852c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008530:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008534:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008538:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d12f      	bne.n	80085a0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d003      	beq.n	8008550 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008564:	691a      	ldr	r2, [r3, #16]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800856e:	6939      	ldr	r1, [r7, #16]
 8008570:	0148      	lsls	r0, r1, #5
 8008572:	6979      	ldr	r1, [r7, #20]
 8008574:	4401      	add	r1, r0
 8008576:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800857a:	4313      	orrs	r3, r2
 800857c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	440a      	add	r2, r1
 8008594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008598:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800859c:	6113      	str	r3, [r2, #16]
 800859e:	e061      	b.n	8008664 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d125      	bne.n	80085f4 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b4:	691a      	ldr	r2, [r3, #16]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085be:	6939      	ldr	r1, [r7, #16]
 80085c0:	0148      	lsls	r0, r1, #5
 80085c2:	6979      	ldr	r1, [r7, #20]
 80085c4:	4401      	add	r1, r0
 80085c6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085ca:	4313      	orrs	r3, r2
 80085cc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	0151      	lsls	r1, r2, #5
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	440a      	add	r2, r1
 80085e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085ec:	6113      	str	r3, [r2, #16]
 80085ee:	e039      	b.n	8008664 <USB_EPStartXfer+0x3dc>
 80085f0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	691a      	ldr	r2, [r3, #16]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	4413      	add	r3, r2
 80085fe:	1e5a      	subs	r2, r3, #1
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	fbb2 f3f3 	udiv	r3, r2, r3
 8008608:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	89fa      	ldrh	r2, [r7, #14]
 8008610:	fb03 f202 	mul.w	r2, r3, r2
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008624:	691a      	ldr	r2, [r3, #16]
 8008626:	89fb      	ldrh	r3, [r7, #14]
 8008628:	04d9      	lsls	r1, r3, #19
 800862a:	4b2f      	ldr	r3, [pc, #188]	@ (80086e8 <USB_EPStartXfer+0x460>)
 800862c:	400b      	ands	r3, r1
 800862e:	6939      	ldr	r1, [r7, #16]
 8008630:	0148      	lsls	r0, r1, #5
 8008632:	6979      	ldr	r1, [r7, #20]
 8008634:	4401      	add	r1, r0
 8008636:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800863a:	4313      	orrs	r3, r2
 800863c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008654:	6939      	ldr	r1, [r7, #16]
 8008656:	0148      	lsls	r0, r1, #5
 8008658:	6979      	ldr	r1, [r7, #20]
 800865a:	4401      	add	r1, r0
 800865c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008660:	4313      	orrs	r3, r2
 8008662:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	791b      	ldrb	r3, [r3, #4]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d128      	bne.n	80086be <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d110      	bne.n	800869e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	0151      	lsls	r1, r2, #5
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	440a      	add	r2, r1
 8008692:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008696:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	e00f      	b.n	80086be <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	0151      	lsls	r1, r2, #5
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	440a      	add	r2, r1
 80086b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086bc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	0151      	lsls	r1, r2, #5
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	440a      	add	r2, r1
 80086d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086d8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80086dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	1ff80000 	.word	0x1ff80000

080086ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d14a      	bne.n	80087a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800871e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008722:	f040 8086 	bne.w	8008832 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	4413      	add	r3, r2
 8008730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	7812      	ldrb	r2, [r2, #0]
 800873a:	0151      	lsls	r1, r2, #5
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	440a      	add	r2, r1
 8008740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008744:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008748:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	7812      	ldrb	r2, [r2, #0]
 800875e:	0151      	lsls	r1, r2, #5
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	440a      	add	r2, r1
 8008764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008768:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800876c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3301      	adds	r3, #1
 8008772:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f242 7210 	movw	r2, #10000	@ 0x2710
 800877a:	4293      	cmp	r3, r2
 800877c:	d902      	bls.n	8008784 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	75fb      	strb	r3, [r7, #23]
          break;
 8008782:	e056      	b.n	8008832 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008798:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800879c:	d0e7      	beq.n	800876e <USB_EPStopXfer+0x82>
 800879e:	e048      	b.n	8008832 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	015a      	lsls	r2, r3, #5
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	4413      	add	r3, r2
 80087aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087b8:	d13b      	bne.n	8008832 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	7812      	ldrb	r2, [r2, #0]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	7812      	ldrb	r2, [r2, #0]
 80087f2:	0151      	lsls	r1, r2, #5
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	440a      	add	r2, r1
 80087f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008800:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3301      	adds	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800880e:	4293      	cmp	r3, r2
 8008810:	d902      	bls.n	8008818 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]
          break;
 8008816:	e00c      	b.n	8008832 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	4413      	add	r3, r2
 8008822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800882c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008830:	d0e7      	beq.n	8008802 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
}
 8008834:	4618      	mov	r0, r3
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008840:	b480      	push	{r7}
 8008842:	b089      	sub	sp, #36	@ 0x24
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	4611      	mov	r1, r2
 800884c:	461a      	mov	r2, r3
 800884e:	460b      	mov	r3, r1
 8008850:	71fb      	strb	r3, [r7, #7]
 8008852:	4613      	mov	r3, r2
 8008854:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800885e:	88bb      	ldrh	r3, [r7, #4]
 8008860:	3303      	adds	r3, #3
 8008862:	089b      	lsrs	r3, r3, #2
 8008864:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008866:	2300      	movs	r3, #0
 8008868:	61bb      	str	r3, [r7, #24]
 800886a:	e018      	b.n	800889e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	031a      	lsls	r2, r3, #12
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	4413      	add	r3, r2
 8008874:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008878:	461a      	mov	r2, r3
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	3301      	adds	r3, #1
 8008884:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	3301      	adds	r3, #1
 800888a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	3301      	adds	r3, #1
 8008890:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	3301      	adds	r3, #1
 8008896:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	3301      	adds	r3, #1
 800889c:	61bb      	str	r3, [r7, #24]
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d3e2      	bcc.n	800886c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3724      	adds	r7, #36	@ 0x24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b08b      	sub	sp, #44	@ 0x2c
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	089b      	lsrs	r3, r3, #2
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80088d2:	88fb      	ldrh	r3, [r7, #6]
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80088da:	2300      	movs	r3, #0
 80088dc:	623b      	str	r3, [r7, #32]
 80088de:	e014      	b.n	800890a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80088ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ee:	3301      	adds	r3, #1
 80088f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f4:	3301      	adds	r3, #1
 80088f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	3301      	adds	r3, #1
 80088fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	3301      	adds	r3, #1
 8008902:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	3301      	adds	r3, #1
 8008908:	623b      	str	r3, [r7, #32]
 800890a:	6a3a      	ldr	r2, [r7, #32]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	429a      	cmp	r2, r3
 8008910:	d3e6      	bcc.n	80088e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008912:	8bfb      	ldrh	r3, [r7, #30]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01e      	beq.n	8008956 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008922:	461a      	mov	r2, r3
 8008924:	f107 0310 	add.w	r3, r7, #16
 8008928:	6812      	ldr	r2, [r2, #0]
 800892a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
 8008938:	b2da      	uxtb	r2, r3
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	701a      	strb	r2, [r3, #0]
      i++;
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	3301      	adds	r3, #1
 8008942:	623b      	str	r3, [r7, #32]
      pDest++;
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	3301      	adds	r3, #1
 8008948:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800894a:	8bfb      	ldrh	r3, [r7, #30]
 800894c:	3b01      	subs	r3, #1
 800894e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008950:	8bfb      	ldrh	r3, [r7, #30]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1ea      	bne.n	800892c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008958:	4618      	mov	r0, r3
 800895a:	372c      	adds	r7, #44	@ 0x2c
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d12c      	bne.n	80089da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	db12      	blt.n	80089b8 <USB_EPSetStall+0x54>
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00f      	beq.n	80089b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	0151      	lsls	r1, r2, #5
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	440a      	add	r2, r1
 80089ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	e02b      	b.n	8008a32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	db12      	blt.n	8008a12 <USB_EPSetStall+0xae>
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00f      	beq.n	8008a12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68ba      	ldr	r2, [r7, #8]
 8008a02:	0151      	lsls	r1, r2, #5
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	440a      	add	r2, r1
 8008a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	0151      	lsls	r1, r2, #5
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	440a      	add	r2, r1
 8008a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d128      	bne.n	8008aae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	0151      	lsls	r1, r2, #5
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	440a      	add	r2, r1
 8008a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	791b      	ldrb	r3, [r3, #4]
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d003      	beq.n	8008a8c <USB_EPClearStall+0x4c>
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	791b      	ldrb	r3, [r3, #4]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d138      	bne.n	8008afe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	0151      	lsls	r1, r2, #5
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	440a      	add	r2, r1
 8008aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	e027      	b.n	8008afe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	0151      	lsls	r1, r2, #5
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	440a      	add	r2, r1
 8008ac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ac8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008acc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	791b      	ldrb	r3, [r3, #4]
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d003      	beq.n	8008ade <USB_EPClearStall+0x9e>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	791b      	ldrb	r3, [r3, #4]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d10f      	bne.n	8008afe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008afc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008b40:	68f9      	ldr	r1, [r7, #12]
 8008b42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b46:	4313      	orrs	r3, r2
 8008b48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b72:	f023 0303 	bic.w	r3, r3, #3
 8008b76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b86:	f023 0302 	bic.w	r3, r3, #2
 8008b8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bb4:	f023 0303 	bic.w	r3, r3, #3
 8008bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bc8:	f043 0302 	orr.w	r3, r3, #2
 8008bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3714      	adds	r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b085      	sub	sp, #20
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	4013      	ands	r3, r2
 8008c24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	0c1b      	lsrs	r3, r3, #16
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	4013      	ands	r3, r2
 8008c58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	b29b      	uxth	r3, r3
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008c7a:	78fb      	ldrb	r3, [r7, #3]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	4013      	ands	r3, r2
 8008c96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c98:	68bb      	ldr	r3, [r7, #8]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b087      	sub	sp, #28
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	f003 030f 	and.w	r3, r3, #15
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd6:	01db      	lsls	r3, r3, #7
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008ce0:	78fb      	ldrb	r3, [r7, #3]
 8008ce2:	015a      	lsls	r2, r3, #5
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b083      	sub	sp, #12
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b085      	sub	sp, #20
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008d3c:	f023 0307 	bic.w	r3, r3, #7
 8008d40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3714      	adds	r7, #20
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	333c      	adds	r3, #60	@ 0x3c
 8008d76:	3304      	adds	r3, #4
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8008df0 <USB_EP0_OutStart+0x8c>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d90a      	bls.n	8008d9a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d94:	d101      	bne.n	8008d9a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e024      	b.n	8008de4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da0:	461a      	mov	r2, r3
 8008da2:	2300      	movs	r3, #0
 8008da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008db4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dc8:	f043 0318 	orr.w	r3, r3, #24
 8008dcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ddc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008de0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr
 8008df0:	4f54300a 	.word	0x4f54300a

08008df4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	3301      	adds	r3, #1
 8008e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4a13      	ldr	r2, [pc, #76]	@ (8008e58 <USB_CoreReset+0x64>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d901      	bls.n	8008e12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e01b      	b.n	8008e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	daf2      	bge.n	8008e00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f043 0201 	orr.w	r2, r3, #1
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4a09      	ldr	r2, [pc, #36]	@ (8008e58 <USB_CoreReset+0x64>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d901      	bls.n	8008e3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e006      	b.n	8008e4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d0f0      	beq.n	8008e2a <USB_CoreReset+0x36>

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	00030d40 	.word	0x00030d40

08008e5c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008e60:	4904      	ldr	r1, [pc, #16]	@ (8008e74 <MX_FATFS_Init+0x18>)
 8008e62:	4805      	ldr	r0, [pc, #20]	@ (8008e78 <MX_FATFS_Init+0x1c>)
 8008e64:	f002 f8a0 	bl	800afa8 <FATFS_LinkDriver>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	4b03      	ldr	r3, [pc, #12]	@ (8008e7c <MX_FATFS_Init+0x20>)
 8008e6e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008e70:	bf00      	nop
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	20000408 	.word	0x20000408
 8008e78:	20000040 	.word	0x20000040
 8008e7c:	20000404 	.word	0x20000404

08008e80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008e8a:	4b06      	ldr	r3, [pc, #24]	@ (8008ea4 <USER_initialize+0x24>)
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008e90:	4b04      	ldr	r3, [pc, #16]	@ (8008ea4 <USER_initialize+0x24>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	2000003d 	.word	0x2000003d

08008ea8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008eb2:	4b06      	ldr	r3, [pc, #24]	@ (8008ecc <USER_status+0x24>)
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008eb8:	4b04      	ldr	r3, [pc, #16]	@ (8008ecc <USER_status+0x24>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	2000003d 	.word	0x2000003d

08008ed0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008ee0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b085      	sub	sp, #20
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
 8008efa:	4603      	mov	r3, r0
 8008efc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008efe:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	603a      	str	r2, [r7, #0]
 8008f16:	71fb      	strb	r3, [r7, #7]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
    return res;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
	...

08008f30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f3c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008f40:	f002 feac 	bl	800bc9c <USBD_static_malloc>
 8008f44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d109      	bne.n	8008f60 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	32b0      	adds	r2, #176	@ 0xb0
 8008f56:	2100      	movs	r1, #0
 8008f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e0d4      	b.n	800910a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008f60:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008f64:	2100      	movs	r1, #0
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f003 fbd9 	bl	800c71e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	32b0      	adds	r2, #176	@ 0xb0
 8008f76:	68f9      	ldr	r1, [r7, #12]
 8008f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	32b0      	adds	r2, #176	@ 0xb0
 8008f86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7c1b      	ldrb	r3, [r3, #16]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d138      	bne.n	800900a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008f98:	4b5e      	ldr	r3, [pc, #376]	@ (8009114 <USBD_CDC_Init+0x1e4>)
 8008f9a:	7819      	ldrb	r1, [r3, #0]
 8008f9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f002 fc66 	bl	800b874 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8009114 <USBD_CDC_Init+0x1e4>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	f003 020f 	and.w	r2, r3, #15
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	3324      	adds	r3, #36	@ 0x24
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008fc2:	4b55      	ldr	r3, [pc, #340]	@ (8009118 <USBD_CDC_Init+0x1e8>)
 8008fc4:	7819      	ldrb	r1, [r3, #0]
 8008fc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fca:	2202      	movs	r2, #2
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f002 fc51 	bl	800b874 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008fd2:	4b51      	ldr	r3, [pc, #324]	@ (8009118 <USBD_CDC_Init+0x1e8>)
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	f003 020f 	and.w	r2, r3, #15
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	440b      	add	r3, r1
 8008fe6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fea:	2201      	movs	r2, #1
 8008fec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008fee:	4b4b      	ldr	r3, [pc, #300]	@ (800911c <USBD_CDC_Init+0x1ec>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	f003 020f 	and.w	r2, r3, #15
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	440b      	add	r3, r1
 8009002:	3326      	adds	r3, #38	@ 0x26
 8009004:	2210      	movs	r2, #16
 8009006:	801a      	strh	r2, [r3, #0]
 8009008:	e035      	b.n	8009076 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800900a:	4b42      	ldr	r3, [pc, #264]	@ (8009114 <USBD_CDC_Init+0x1e4>)
 800900c:	7819      	ldrb	r1, [r3, #0]
 800900e:	2340      	movs	r3, #64	@ 0x40
 8009010:	2202      	movs	r2, #2
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f002 fc2e 	bl	800b874 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009018:	4b3e      	ldr	r3, [pc, #248]	@ (8009114 <USBD_CDC_Init+0x1e4>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	f003 020f 	and.w	r2, r3, #15
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	4613      	mov	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	3324      	adds	r3, #36	@ 0x24
 800902e:	2201      	movs	r2, #1
 8009030:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009032:	4b39      	ldr	r3, [pc, #228]	@ (8009118 <USBD_CDC_Init+0x1e8>)
 8009034:	7819      	ldrb	r1, [r3, #0]
 8009036:	2340      	movs	r3, #64	@ 0x40
 8009038:	2202      	movs	r2, #2
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f002 fc1a 	bl	800b874 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009040:	4b35      	ldr	r3, [pc, #212]	@ (8009118 <USBD_CDC_Init+0x1e8>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	f003 020f 	and.w	r2, r3, #15
 8009048:	6879      	ldr	r1, [r7, #4]
 800904a:	4613      	mov	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	440b      	add	r3, r1
 8009054:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009058:	2201      	movs	r2, #1
 800905a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800905c:	4b2f      	ldr	r3, [pc, #188]	@ (800911c <USBD_CDC_Init+0x1ec>)
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	f003 020f 	and.w	r2, r3, #15
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	440b      	add	r3, r1
 8009070:	3326      	adds	r3, #38	@ 0x26
 8009072:	2210      	movs	r2, #16
 8009074:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009076:	4b29      	ldr	r3, [pc, #164]	@ (800911c <USBD_CDC_Init+0x1ec>)
 8009078:	7819      	ldrb	r1, [r3, #0]
 800907a:	2308      	movs	r3, #8
 800907c:	2203      	movs	r2, #3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f002 fbf8 	bl	800b874 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009084:	4b25      	ldr	r3, [pc, #148]	@ (800911c <USBD_CDC_Init+0x1ec>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	f003 020f 	and.w	r2, r3, #15
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	440b      	add	r3, r1
 8009098:	3324      	adds	r3, #36	@ 0x24
 800909a:	2201      	movs	r2, #1
 800909c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	33b0      	adds	r3, #176	@ 0xb0
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80090d4:	2302      	movs	r3, #2
 80090d6:	e018      	b.n	800910a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	7c1b      	ldrb	r3, [r3, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10a      	bne.n	80090f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009118 <USBD_CDC_Init+0x1e8>)
 80090e2:	7819      	ldrb	r1, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80090ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f002 fd3a 	bl	800bb68 <USBD_LL_PrepareReceive>
 80090f4:	e008      	b.n	8009108 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80090f6:	4b08      	ldr	r3, [pc, #32]	@ (8009118 <USBD_CDC_Init+0x1e8>)
 80090f8:	7819      	ldrb	r1, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009100:	2340      	movs	r3, #64	@ 0x40
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f002 fd30 	bl	800bb68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	200000db 	.word	0x200000db
 8009118:	200000dc 	.word	0x200000dc
 800911c:	200000dd 	.word	0x200000dd

08009120 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800912c:	4b3a      	ldr	r3, [pc, #232]	@ (8009218 <USBD_CDC_DeInit+0xf8>)
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f002 fbdc 	bl	800b8f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009138:	4b37      	ldr	r3, [pc, #220]	@ (8009218 <USBD_CDC_DeInit+0xf8>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	f003 020f 	and.w	r2, r3, #15
 8009140:	6879      	ldr	r1, [r7, #4]
 8009142:	4613      	mov	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	440b      	add	r3, r1
 800914c:	3324      	adds	r3, #36	@ 0x24
 800914e:	2200      	movs	r2, #0
 8009150:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009152:	4b32      	ldr	r3, [pc, #200]	@ (800921c <USBD_CDC_DeInit+0xfc>)
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f002 fbc9 	bl	800b8f0 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800915e:	4b2f      	ldr	r3, [pc, #188]	@ (800921c <USBD_CDC_DeInit+0xfc>)
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	f003 020f 	and.w	r2, r3, #15
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4613      	mov	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009176:	2200      	movs	r2, #0
 8009178:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800917a:	4b29      	ldr	r3, [pc, #164]	@ (8009220 <USBD_CDC_DeInit+0x100>)
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f002 fbb5 	bl	800b8f0 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009186:	4b26      	ldr	r3, [pc, #152]	@ (8009220 <USBD_CDC_DeInit+0x100>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	f003 020f 	and.w	r2, r3, #15
 800918e:	6879      	ldr	r1, [r7, #4]
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	440b      	add	r3, r1
 800919a:	3324      	adds	r3, #36	@ 0x24
 800919c:	2200      	movs	r2, #0
 800919e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80091a0:	4b1f      	ldr	r3, [pc, #124]	@ (8009220 <USBD_CDC_DeInit+0x100>)
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	f003 020f 	and.w	r2, r3, #15
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	440b      	add	r3, r1
 80091b4:	3326      	adds	r3, #38	@ 0x26
 80091b6:	2200      	movs	r2, #0
 80091b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	32b0      	adds	r2, #176	@ 0xb0
 80091c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01f      	beq.n	800920c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	33b0      	adds	r3, #176	@ 0xb0
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	32b0      	adds	r2, #176	@ 0xb0
 80091ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 fd62 	bl	800bcb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	32b0      	adds	r2, #176	@ 0xb0
 80091fe:	2100      	movs	r1, #0
 8009200:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	200000db 	.word	0x200000db
 800921c:	200000dc 	.word	0x200000dc
 8009220:	200000dd 	.word	0x200000dd

08009224 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	32b0      	adds	r2, #176	@ 0xb0
 8009238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009250:	2303      	movs	r3, #3
 8009252:	e0bf      	b.n	80093d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800925c:	2b00      	cmp	r3, #0
 800925e:	d050      	beq.n	8009302 <USBD_CDC_Setup+0xde>
 8009260:	2b20      	cmp	r3, #32
 8009262:	f040 80af 	bne.w	80093c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	88db      	ldrh	r3, [r3, #6]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d03a      	beq.n	80092e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	b25b      	sxtb	r3, r3
 8009274:	2b00      	cmp	r3, #0
 8009276:	da1b      	bge.n	80092b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	33b0      	adds	r3, #176	@ 0xb0
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800928e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	88d2      	ldrh	r2, [r2, #6]
 8009294:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	88db      	ldrh	r3, [r3, #6]
 800929a:	2b07      	cmp	r3, #7
 800929c:	bf28      	it	cs
 800929e:	2307      	movcs	r3, #7
 80092a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	89fa      	ldrh	r2, [r7, #14]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 fdb1 	bl	800ae10 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80092ae:	e090      	b.n	80093d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	785a      	ldrb	r2, [r3, #1]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	88db      	ldrh	r3, [r3, #6]
 80092be:	2b3f      	cmp	r3, #63	@ 0x3f
 80092c0:	d803      	bhi.n	80092ca <USBD_CDC_Setup+0xa6>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	88db      	ldrh	r3, [r3, #6]
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	e000      	b.n	80092cc <USBD_CDC_Setup+0xa8>
 80092ca:	2240      	movs	r2, #64	@ 0x40
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80092d2:	6939      	ldr	r1, [r7, #16]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80092da:	461a      	mov	r2, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 fdc3 	bl	800ae68 <USBD_CtlPrepareRx>
      break;
 80092e2:	e076      	b.n	80093d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	33b0      	adds	r3, #176	@ 0xb0
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	7850      	ldrb	r0, [r2, #1]
 80092fa:	2200      	movs	r2, #0
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	4798      	blx	r3
      break;
 8009300:	e067      	b.n	80093d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	785b      	ldrb	r3, [r3, #1]
 8009306:	2b0b      	cmp	r3, #11
 8009308:	d851      	bhi.n	80093ae <USBD_CDC_Setup+0x18a>
 800930a:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <USBD_CDC_Setup+0xec>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009341 	.word	0x08009341
 8009314:	080093bd 	.word	0x080093bd
 8009318:	080093af 	.word	0x080093af
 800931c:	080093af 	.word	0x080093af
 8009320:	080093af 	.word	0x080093af
 8009324:	080093af 	.word	0x080093af
 8009328:	080093af 	.word	0x080093af
 800932c:	080093af 	.word	0x080093af
 8009330:	080093af 	.word	0x080093af
 8009334:	080093af 	.word	0x080093af
 8009338:	0800936b 	.word	0x0800936b
 800933c:	08009395 	.word	0x08009395
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b03      	cmp	r3, #3
 800934a:	d107      	bne.n	800935c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800934c:	f107 030a 	add.w	r3, r7, #10
 8009350:	2202      	movs	r2, #2
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 fd5b 	bl	800ae10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800935a:	e032      	b.n	80093c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f001 fce5 	bl	800ad2e <USBD_CtlError>
            ret = USBD_FAIL;
 8009364:	2303      	movs	r3, #3
 8009366:	75fb      	strb	r3, [r7, #23]
          break;
 8009368:	e02b      	b.n	80093c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b03      	cmp	r3, #3
 8009374:	d107      	bne.n	8009386 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009376:	f107 030d 	add.w	r3, r7, #13
 800937a:	2201      	movs	r2, #1
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 fd46 	bl	800ae10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009384:	e01d      	b.n	80093c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 fcd0 	bl	800ad2e <USBD_CtlError>
            ret = USBD_FAIL;
 800938e:	2303      	movs	r3, #3
 8009390:	75fb      	strb	r3, [r7, #23]
          break;
 8009392:	e016      	b.n	80093c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800939a:	b2db      	uxtb	r3, r3
 800939c:	2b03      	cmp	r3, #3
 800939e:	d00f      	beq.n	80093c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fcc3 	bl	800ad2e <USBD_CtlError>
            ret = USBD_FAIL;
 80093a8:	2303      	movs	r3, #3
 80093aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093ac:	e008      	b.n	80093c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f001 fcbc 	bl	800ad2e <USBD_CtlError>
          ret = USBD_FAIL;
 80093b6:	2303      	movs	r3, #3
 80093b8:	75fb      	strb	r3, [r7, #23]
          break;
 80093ba:	e002      	b.n	80093c2 <USBD_CDC_Setup+0x19e>
          break;
 80093bc:	bf00      	nop
 80093be:	e008      	b.n	80093d2 <USBD_CDC_Setup+0x1ae>
          break;
 80093c0:	bf00      	nop
      }
      break;
 80093c2:	e006      	b.n	80093d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 fcb1 	bl	800ad2e <USBD_CtlError>
      ret = USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	75fb      	strb	r3, [r7, #23]
      break;
 80093d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	32b0      	adds	r2, #176	@ 0xb0
 80093fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009402:	2303      	movs	r3, #3
 8009404:	e065      	b.n	80094d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	32b0      	adds	r2, #176	@ 0xb0
 8009410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009414:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	f003 020f 	and.w	r2, r3, #15
 800941c:	6879      	ldr	r1, [r7, #4]
 800941e:	4613      	mov	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	440b      	add	r3, r1
 8009428:	3318      	adds	r3, #24
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d02f      	beq.n	8009490 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	f003 020f 	and.w	r2, r3, #15
 8009436:	6879      	ldr	r1, [r7, #4]
 8009438:	4613      	mov	r3, r2
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	440b      	add	r3, r1
 8009442:	3318      	adds	r3, #24
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	78fb      	ldrb	r3, [r7, #3]
 8009448:	f003 010f 	and.w	r1, r3, #15
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	460b      	mov	r3, r1
 8009450:	00db      	lsls	r3, r3, #3
 8009452:	440b      	add	r3, r1
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4403      	add	r3, r0
 8009458:	3344      	adds	r3, #68	@ 0x44
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009466:	2b00      	cmp	r3, #0
 8009468:	d112      	bne.n	8009490 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	f003 020f 	and.w	r2, r3, #15
 8009470:	6879      	ldr	r1, [r7, #4]
 8009472:	4613      	mov	r3, r2
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	440b      	add	r3, r1
 800947c:	3318      	adds	r3, #24
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009482:	78f9      	ldrb	r1, [r7, #3]
 8009484:	2300      	movs	r3, #0
 8009486:	2200      	movs	r2, #0
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f002 fb35 	bl	800baf8 <USBD_LL_Transmit>
 800948e:	e01f      	b.n	80094d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	33b0      	adds	r3, #176	@ 0xb0
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d010      	beq.n	80094d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	33b0      	adds	r3, #176	@ 0xb0
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80094cc:	78fa      	ldrb	r2, [r7, #3]
 80094ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	32b0      	adds	r2, #176	@ 0xb0
 80094f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	32b0      	adds	r2, #176	@ 0xb0
 8009500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009508:	2303      	movs	r3, #3
 800950a:	e01a      	b.n	8009542 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f002 fb61 	bl	800bbd8 <USBD_LL_GetRxDataSize>
 8009516:	4602      	mov	r2, r0
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	33b0      	adds	r3, #176	@ 0xb0
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800953c:	4611      	mov	r1, r2
 800953e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	32b0      	adds	r2, #176	@ 0xb0
 800955c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009560:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009568:	2303      	movs	r3, #3
 800956a:	e024      	b.n	80095b6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	33b0      	adds	r3, #176	@ 0xb0
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d019      	beq.n	80095b4 <USBD_CDC_EP0_RxReady+0x6a>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009586:	2bff      	cmp	r3, #255	@ 0xff
 8009588:	d014      	beq.n	80095b4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	33b0      	adds	r3, #176	@ 0xb0
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80095a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80095aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	22ff      	movs	r2, #255	@ 0xff
 80095b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
	...

080095c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80095c8:	2182      	movs	r1, #130	@ 0x82
 80095ca:	4818      	ldr	r0, [pc, #96]	@ (800962c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095cc:	f000 fd4f 	bl	800a06e <USBD_GetEpDesc>
 80095d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80095d2:	2101      	movs	r1, #1
 80095d4:	4815      	ldr	r0, [pc, #84]	@ (800962c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095d6:	f000 fd4a 	bl	800a06e <USBD_GetEpDesc>
 80095da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80095dc:	2181      	movs	r1, #129	@ 0x81
 80095de:	4813      	ldr	r0, [pc, #76]	@ (800962c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80095e0:	f000 fd45 	bl	800a06e <USBD_GetEpDesc>
 80095e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	2210      	movs	r2, #16
 80095f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d006      	beq.n	8009606 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009600:	711a      	strb	r2, [r3, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d006      	beq.n	800961a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009614:	711a      	strb	r2, [r3, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2243      	movs	r2, #67	@ 0x43
 800961e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009620:	4b02      	ldr	r3, [pc, #8]	@ (800962c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20000098 	.word	0x20000098

08009630 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009638:	2182      	movs	r1, #130	@ 0x82
 800963a:	4818      	ldr	r0, [pc, #96]	@ (800969c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800963c:	f000 fd17 	bl	800a06e <USBD_GetEpDesc>
 8009640:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009642:	2101      	movs	r1, #1
 8009644:	4815      	ldr	r0, [pc, #84]	@ (800969c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009646:	f000 fd12 	bl	800a06e <USBD_GetEpDesc>
 800964a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800964c:	2181      	movs	r1, #129	@ 0x81
 800964e:	4813      	ldr	r0, [pc, #76]	@ (800969c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009650:	f000 fd0d 	bl	800a06e <USBD_GetEpDesc>
 8009654:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2210      	movs	r2, #16
 8009660:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d006      	beq.n	8009676 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	2200      	movs	r2, #0
 800966c:	711a      	strb	r2, [r3, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f042 0202 	orr.w	r2, r2, #2
 8009674:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d006      	beq.n	800968a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	711a      	strb	r2, [r3, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f042 0202 	orr.w	r2, r2, #2
 8009688:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2243      	movs	r2, #67	@ 0x43
 800968e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009690:	4b02      	ldr	r3, [pc, #8]	@ (800969c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20000098 	.word	0x20000098

080096a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80096a8:	2182      	movs	r1, #130	@ 0x82
 80096aa:	4818      	ldr	r0, [pc, #96]	@ (800970c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096ac:	f000 fcdf 	bl	800a06e <USBD_GetEpDesc>
 80096b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80096b2:	2101      	movs	r1, #1
 80096b4:	4815      	ldr	r0, [pc, #84]	@ (800970c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096b6:	f000 fcda 	bl	800a06e <USBD_GetEpDesc>
 80096ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80096bc:	2181      	movs	r1, #129	@ 0x81
 80096be:	4813      	ldr	r0, [pc, #76]	@ (800970c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80096c0:	f000 fcd5 	bl	800a06e <USBD_GetEpDesc>
 80096c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d002      	beq.n	80096d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	2210      	movs	r2, #16
 80096d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d006      	beq.n	80096e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	2200      	movs	r2, #0
 80096dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096e0:	711a      	strb	r2, [r3, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d006      	beq.n	80096fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096f4:	711a      	strb	r2, [r3, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2243      	movs	r2, #67	@ 0x43
 80096fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009700:	4b02      	ldr	r3, [pc, #8]	@ (800970c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009702:	4618      	mov	r0, r3
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000098 	.word	0x20000098

08009710 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	220a      	movs	r2, #10
 800971c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800971e:	4b03      	ldr	r3, [pc, #12]	@ (800972c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	20000054 	.word	0x20000054

08009730 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009740:	2303      	movs	r3, #3
 8009742:	e009      	b.n	8009758 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	33b0      	adds	r3, #176	@ 0xb0
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4413      	add	r3, r2
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	32b0      	adds	r2, #176	@ 0xb0
 800977a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d101      	bne.n	800978a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009786:	2303      	movs	r3, #3
 8009788:	e008      	b.n	800979c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	371c      	adds	r7, #28
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	32b0      	adds	r2, #176	@ 0xb0
 80097bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e004      	b.n	80097d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
	...

080097e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	32b0      	adds	r2, #176	@ 0xb0
 80097f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80097fc:	2301      	movs	r3, #1
 80097fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009806:	2303      	movs	r3, #3
 8009808:	e025      	b.n	8009856 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009810:	2b00      	cmp	r3, #0
 8009812:	d11f      	bne.n	8009854 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2201      	movs	r2, #1
 8009818:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800981c:	4b10      	ldr	r3, [pc, #64]	@ (8009860 <USBD_CDC_TransmitPacket+0x7c>)
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	f003 020f 	and.w	r2, r3, #15
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4403      	add	r3, r0
 8009836:	3318      	adds	r3, #24
 8009838:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800983a:	4b09      	ldr	r3, [pc, #36]	@ (8009860 <USBD_CDC_TransmitPacket+0x7c>)
 800983c:	7819      	ldrb	r1, [r3, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f002 f954 	bl	800baf8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009854:	7bfb      	ldrb	r3, [r7, #15]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	200000db 	.word	0x200000db

08009864 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	32b0      	adds	r2, #176	@ 0xb0
 8009876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	32b0      	adds	r2, #176	@ 0xb0
 8009886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800988e:	2303      	movs	r3, #3
 8009890:	e018      	b.n	80098c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	7c1b      	ldrb	r3, [r3, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10a      	bne.n	80098b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800989a:	4b0c      	ldr	r3, [pc, #48]	@ (80098cc <USBD_CDC_ReceivePacket+0x68>)
 800989c:	7819      	ldrb	r1, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f002 f95d 	bl	800bb68 <USBD_LL_PrepareReceive>
 80098ae:	e008      	b.n	80098c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098b0:	4b06      	ldr	r3, [pc, #24]	@ (80098cc <USBD_CDC_ReceivePacket+0x68>)
 80098b2:	7819      	ldrb	r1, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098ba:	2340      	movs	r3, #64	@ 0x40
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f002 f953 	bl	800bb68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	200000dc 	.word	0x200000dc

080098d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e01f      	b.n	8009928 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	79fa      	ldrb	r2, [r7, #7]
 800991a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f001 ff2b 	bl	800b778 <USBD_LL_Init>
 8009922:	4603      	mov	r3, r0
 8009924:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009926:	7dfb      	ldrb	r3, [r7, #23]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800993a:	2300      	movs	r3, #0
 800993c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009944:	2303      	movs	r3, #3
 8009946:	e025      	b.n	8009994 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	32ae      	adds	r2, #174	@ 0xae
 800995a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800995e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00f      	beq.n	8009984 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	32ae      	adds	r2, #174	@ 0xae
 800996e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009974:	f107 020e 	add.w	r2, r7, #14
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	4602      	mov	r2, r0
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 ff33 	bl	800b810 <USBD_LL_Start>
 80099aa:	4603      	mov	r3, r0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80099be:	4618      	mov	r0, r3
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	460b      	mov	r3, r1
 80099d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d009      	beq.n	80099f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	78fa      	ldrb	r2, [r7, #3]
 80099ee:	4611      	mov	r1, r2
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	4798      	blx	r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	78fa      	ldrb	r2, [r7, #3]
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	4798      	blx	r3
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f001 f936 	bl	800acba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2201      	movs	r2, #1
 8009a52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a6a:	f003 031f 	and.w	r3, r3, #31
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d01a      	beq.n	8009aa8 <USBD_LL_SetupStage+0x72>
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d822      	bhi.n	8009abc <USBD_LL_SetupStage+0x86>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d002      	beq.n	8009a80 <USBD_LL_SetupStage+0x4a>
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d00a      	beq.n	8009a94 <USBD_LL_SetupStage+0x5e>
 8009a7e:	e01d      	b.n	8009abc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fb63 	bl	800a154 <USBD_StdDevReq>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
      break;
 8009a92:	e020      	b.n	8009ad6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fbcb 	bl	800a238 <USBD_StdItfReq>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]
      break;
 8009aa6:	e016      	b.n	8009ad6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009aae:	4619      	mov	r1, r3
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fc2d 	bl	800a310 <USBD_StdEPReq>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aba:	e00c      	b.n	8009ad6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ac2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	4619      	mov	r1, r3
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 ff46 	bl	800b95c <USBD_LL_StallEP>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ad4:	bf00      	nop
  }

  return ret;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	607a      	str	r2, [r7, #4]
 8009aec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009af2:	7afb      	ldrb	r3, [r7, #11]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d16e      	bne.n	8009bd6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009afe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b06:	2b03      	cmp	r3, #3
 8009b08:	f040 8098 	bne.w	8009c3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d913      	bls.n	8009b40 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	1ad2      	subs	r2, r2, r3
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	68da      	ldr	r2, [r3, #12]
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	bf28      	it	cs
 8009b32:	4613      	movcs	r3, r2
 8009b34:	461a      	mov	r2, r3
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f001 f9b2 	bl	800aea2 <USBD_CtlContinueRx>
 8009b3e:	e07d      	b.n	8009c3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009b46:	f003 031f 	and.w	r3, r3, #31
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d014      	beq.n	8009b78 <USBD_LL_DataOutStage+0x98>
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d81d      	bhi.n	8009b8e <USBD_LL_DataOutStage+0xae>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <USBD_LL_DataOutStage+0x7c>
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d003      	beq.n	8009b62 <USBD_LL_DataOutStage+0x82>
 8009b5a:	e018      	b.n	8009b8e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	75bb      	strb	r3, [r7, #22]
            break;
 8009b60:	e018      	b.n	8009b94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 fa64 	bl	800a03a <USBD_CoreFindIF>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75bb      	strb	r3, [r7, #22]
            break;
 8009b76:	e00d      	b.n	8009b94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	4619      	mov	r1, r3
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 fa66 	bl	800a054 <USBD_CoreFindEP>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75bb      	strb	r3, [r7, #22]
            break;
 8009b8c:	e002      	b.n	8009b94 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75bb      	strb	r3, [r7, #22]
            break;
 8009b92:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009b94:	7dbb      	ldrb	r3, [r7, #22]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d119      	bne.n	8009bce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d113      	bne.n	8009bce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009ba6:	7dba      	ldrb	r2, [r7, #22]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	32ae      	adds	r2, #174	@ 0xae
 8009bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00b      	beq.n	8009bce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009bb6:	7dba      	ldrb	r2, [r7, #22]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009bbe:	7dba      	ldrb	r2, [r7, #22]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	32ae      	adds	r2, #174	@ 0xae
 8009bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f001 f978 	bl	800aec4 <USBD_CtlSendStatus>
 8009bd4:	e032      	b.n	8009c3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009bd6:	7afb      	ldrb	r3, [r7, #11]
 8009bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	4619      	mov	r1, r3
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fa37 	bl	800a054 <USBD_CoreFindEP>
 8009be6:	4603      	mov	r3, r0
 8009be8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bea:	7dbb      	ldrb	r3, [r7, #22]
 8009bec:	2bff      	cmp	r3, #255	@ 0xff
 8009bee:	d025      	beq.n	8009c3c <USBD_LL_DataOutStage+0x15c>
 8009bf0:	7dbb      	ldrb	r3, [r7, #22]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d122      	bne.n	8009c3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d117      	bne.n	8009c32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009c02:	7dba      	ldrb	r2, [r7, #22]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	32ae      	adds	r2, #174	@ 0xae
 8009c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00f      	beq.n	8009c32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009c12:	7dba      	ldrb	r2, [r7, #22]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009c1a:	7dba      	ldrb	r2, [r7, #22]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	32ae      	adds	r2, #174	@ 0xae
 8009c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	7afa      	ldrb	r2, [r7, #11]
 8009c28:	4611      	mov	r1, r2
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	4798      	blx	r3
 8009c2e:	4603      	mov	r3, r0
 8009c30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	e000      	b.n	8009c3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b086      	sub	sp, #24
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	60f8      	str	r0, [r7, #12]
 8009c4e:	460b      	mov	r3, r1
 8009c50:	607a      	str	r2, [r7, #4]
 8009c52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009c54:	7afb      	ldrb	r3, [r7, #11]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d16f      	bne.n	8009d3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3314      	adds	r3, #20
 8009c5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d15a      	bne.n	8009d20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	689a      	ldr	r2, [r3, #8]
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d914      	bls.n	8009ca0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	689a      	ldr	r2, [r3, #8]
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	1ad2      	subs	r2, r2, r3
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	6879      	ldr	r1, [r7, #4]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f001 f8da 	bl	800ae46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c92:	2300      	movs	r3, #0
 8009c94:	2200      	movs	r2, #0
 8009c96:	2100      	movs	r1, #0
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f001 ff65 	bl	800bb68 <USBD_LL_PrepareReceive>
 8009c9e:	e03f      	b.n	8009d20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d11c      	bne.n	8009ce6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d316      	bcc.n	8009ce6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d20f      	bcs.n	8009ce6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2100      	movs	r1, #0
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f001 f8bb 	bl	800ae46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cd8:	2300      	movs	r3, #0
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2100      	movs	r1, #0
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f001 ff42 	bl	800bb68 <USBD_LL_PrepareReceive>
 8009ce4:	e01c      	b.n	8009d20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d10f      	bne.n	8009d12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d009      	beq.n	8009d12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d12:	2180      	movs	r1, #128	@ 0x80
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f001 fe21 	bl	800b95c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f001 f8e5 	bl	800aeea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d03a      	beq.n	8009da0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f7ff fe42 	bl	80099b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009d38:	e032      	b.n	8009da0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009d3a:	7afb      	ldrb	r3, [r7, #11]
 8009d3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	4619      	mov	r1, r3
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f000 f985 	bl	800a054 <USBD_CoreFindEP>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	2bff      	cmp	r3, #255	@ 0xff
 8009d52:	d025      	beq.n	8009da0 <USBD_LL_DataInStage+0x15a>
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d122      	bne.n	8009da0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d11c      	bne.n	8009da0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009d66:	7dfa      	ldrb	r2, [r7, #23]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	32ae      	adds	r2, #174	@ 0xae
 8009d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d014      	beq.n	8009da0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009d76:	7dfa      	ldrb	r2, [r7, #23]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009d7e:	7dfa      	ldrb	r2, [r7, #23]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	32ae      	adds	r2, #174	@ 0xae
 8009d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	7afa      	ldrb	r2, [r7, #11]
 8009d8c:	4611      	mov	r1, r2
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	4798      	blx	r3
 8009d92:	4603      	mov	r3, r0
 8009d94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009d96:	7dbb      	ldrb	r3, [r7, #22]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009d9c:	7dbb      	ldrb	r3, [r7, #22]
 8009d9e:	e000      	b.n	8009da2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d014      	beq.n	8009e10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00e      	beq.n	8009e10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	6852      	ldr	r2, [r2, #4]
 8009dfe:	b2d2      	uxtb	r2, r2
 8009e00:	4611      	mov	r1, r2
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	4798      	blx	r3
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e10:	2340      	movs	r3, #64	@ 0x40
 8009e12:	2200      	movs	r2, #0
 8009e14:	2100      	movs	r1, #0
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f001 fd2c 	bl	800b874 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2240      	movs	r2, #64	@ 0x40
 8009e28:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e2c:	2340      	movs	r3, #64	@ 0x40
 8009e2e:	2200      	movs	r2, #0
 8009e30:	2180      	movs	r1, #128	@ 0x80
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f001 fd1e 	bl	800b874 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2240      	movs	r2, #64	@ 0x40
 8009e42:	621a      	str	r2, [r3, #32]

  return ret;
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	460b      	mov	r3, r1
 8009e58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	78fa      	ldrb	r2, [r7, #3]
 8009e5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d006      	beq.n	8009e90 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2204      	movs	r2, #4
 8009e94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d106      	bne.n	8009ec8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d110      	bne.n	8009f0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009efa:	69db      	ldr	r3, [r3, #28]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d005      	beq.n	8009f0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f06:	69db      	ldr	r3, [r3, #28]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	32ae      	adds	r2, #174	@ 0xae
 8009f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e01c      	b.n	8009f72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	2b03      	cmp	r3, #3
 8009f42:	d115      	bne.n	8009f70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	32ae      	adds	r2, #174	@ 0xae
 8009f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00b      	beq.n	8009f70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	32ae      	adds	r2, #174	@ 0xae
 8009f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f66:	6a1b      	ldr	r3, [r3, #32]
 8009f68:	78fa      	ldrb	r2, [r7, #3]
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	460b      	mov	r3, r1
 8009f84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	32ae      	adds	r2, #174	@ 0xae
 8009f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e01c      	b.n	8009fd6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b03      	cmp	r3, #3
 8009fa6:	d115      	bne.n	8009fd4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	32ae      	adds	r2, #174	@ 0xae
 8009fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00b      	beq.n	8009fd4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	32ae      	adds	r2, #174	@ 0xae
 8009fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fcc:	78fa      	ldrb	r2, [r7, #3]
 8009fce:	4611      	mov	r1, r2
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009fde:	b480      	push	{r7}
 8009fe0:	b083      	sub	sp, #12
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00e      	beq.n	800a030 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	6852      	ldr	r2, [r2, #4]
 800a01e:	b2d2      	uxtb	r2, r2
 800a020:	4611      	mov	r1, r2
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	4798      	blx	r3
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a02c:	2303      	movs	r3, #3
 800a02e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a030:	7bfb      	ldrb	r3, [r7, #15]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b083      	sub	sp, #12
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a046:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a048:	4618      	mov	r0, r3
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a060:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a062:	4618      	mov	r0, r3
 800a064:	370c      	adds	r7, #12
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b086      	sub	sp, #24
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
 800a076:	460b      	mov	r3, r1
 800a078:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a082:	2300      	movs	r3, #0
 800a084:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	885b      	ldrh	r3, [r3, #2]
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	7812      	ldrb	r2, [r2, #0]
 800a090:	4293      	cmp	r3, r2
 800a092:	d91f      	bls.n	800a0d4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a09a:	e013      	b.n	800a0c4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a09c:	f107 030a 	add.w	r3, r7, #10
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6978      	ldr	r0, [r7, #20]
 800a0a4:	f000 f81b 	bl	800a0de <USBD_GetNextDesc>
 800a0a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	2b05      	cmp	r3, #5
 800a0b0:	d108      	bne.n	800a0c4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	789b      	ldrb	r3, [r3, #2]
 800a0ba:	78fa      	ldrb	r2, [r7, #3]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d008      	beq.n	800a0d2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	885b      	ldrh	r3, [r3, #2]
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	897b      	ldrh	r3, [r7, #10]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d8e5      	bhi.n	800a09c <USBD_GetEpDesc+0x2e>
 800a0d0:	e000      	b.n	800a0d4 <USBD_GetEpDesc+0x66>
          break;
 800a0d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a0d4:	693b      	ldr	r3, [r7, #16]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b085      	sub	sp, #20
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
 800a0e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	881b      	ldrh	r3, [r3, #0]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	7812      	ldrb	r2, [r2, #0]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	461a      	mov	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4413      	add	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a108:	68fb      	ldr	r3, [r7, #12]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a116:	b480      	push	{r7}
 800a118:	b087      	sub	sp, #28
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	3301      	adds	r3, #1
 800a12c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a134:	8a3b      	ldrh	r3, [r7, #16]
 800a136:	021b      	lsls	r3, r3, #8
 800a138:	b21a      	sxth	r2, r3
 800a13a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a13e:	4313      	orrs	r3, r2
 800a140:	b21b      	sxth	r3, r3
 800a142:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a144:	89fb      	ldrh	r3, [r7, #14]
}
 800a146:	4618      	mov	r0, r3
 800a148:	371c      	adds	r7, #28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
	...

0800a154 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a16a:	2b40      	cmp	r3, #64	@ 0x40
 800a16c:	d005      	beq.n	800a17a <USBD_StdDevReq+0x26>
 800a16e:	2b40      	cmp	r3, #64	@ 0x40
 800a170:	d857      	bhi.n	800a222 <USBD_StdDevReq+0xce>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00f      	beq.n	800a196 <USBD_StdDevReq+0x42>
 800a176:	2b20      	cmp	r3, #32
 800a178:	d153      	bne.n	800a222 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	32ae      	adds	r2, #174	@ 0xae
 800a184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	4798      	blx	r3
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]
      break;
 800a194:	e04a      	b.n	800a22c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	785b      	ldrb	r3, [r3, #1]
 800a19a:	2b09      	cmp	r3, #9
 800a19c:	d83b      	bhi.n	800a216 <USBD_StdDevReq+0xc2>
 800a19e:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a4 <USBD_StdDevReq+0x50>)
 800a1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a4:	0800a1f9 	.word	0x0800a1f9
 800a1a8:	0800a20d 	.word	0x0800a20d
 800a1ac:	0800a217 	.word	0x0800a217
 800a1b0:	0800a203 	.word	0x0800a203
 800a1b4:	0800a217 	.word	0x0800a217
 800a1b8:	0800a1d7 	.word	0x0800a1d7
 800a1bc:	0800a1cd 	.word	0x0800a1cd
 800a1c0:	0800a217 	.word	0x0800a217
 800a1c4:	0800a1ef 	.word	0x0800a1ef
 800a1c8:	0800a1e1 	.word	0x0800a1e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa3c 	bl	800a64c <USBD_GetDescriptor>
          break;
 800a1d4:	e024      	b.n	800a220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a1d6:	6839      	ldr	r1, [r7, #0]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fbcb 	bl	800a974 <USBD_SetAddress>
          break;
 800a1de:	e01f      	b.n	800a220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 fc0a 	bl	800a9fc <USBD_SetConfig>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]
          break;
 800a1ec:	e018      	b.n	800a220 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fcad 	bl	800ab50 <USBD_GetConfig>
          break;
 800a1f6:	e013      	b.n	800a220 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a1f8:	6839      	ldr	r1, [r7, #0]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fcde 	bl	800abbc <USBD_GetStatus>
          break;
 800a200:	e00e      	b.n	800a220 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fd0d 	bl	800ac24 <USBD_SetFeature>
          break;
 800a20a:	e009      	b.n	800a220 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fd31 	bl	800ac76 <USBD_ClrFeature>
          break;
 800a214:	e004      	b.n	800a220 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fd88 	bl	800ad2e <USBD_CtlError>
          break;
 800a21e:	bf00      	nop
      }
      break;
 800a220:	e004      	b.n	800a22c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a222:	6839      	ldr	r1, [r7, #0]
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fd82 	bl	800ad2e <USBD_CtlError>
      break;
 800a22a:	bf00      	nop
  }

  return ret;
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop

0800a238 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a24e:	2b40      	cmp	r3, #64	@ 0x40
 800a250:	d005      	beq.n	800a25e <USBD_StdItfReq+0x26>
 800a252:	2b40      	cmp	r3, #64	@ 0x40
 800a254:	d852      	bhi.n	800a2fc <USBD_StdItfReq+0xc4>
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <USBD_StdItfReq+0x26>
 800a25a:	2b20      	cmp	r3, #32
 800a25c:	d14e      	bne.n	800a2fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a264:	b2db      	uxtb	r3, r3
 800a266:	3b01      	subs	r3, #1
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d840      	bhi.n	800a2ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	889b      	ldrh	r3, [r3, #4]
 800a270:	b2db      	uxtb	r3, r3
 800a272:	2b01      	cmp	r3, #1
 800a274:	d836      	bhi.n	800a2e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	889b      	ldrh	r3, [r3, #4]
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f7ff fedb 	bl	800a03a <USBD_CoreFindIF>
 800a284:	4603      	mov	r3, r0
 800a286:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	2bff      	cmp	r3, #255	@ 0xff
 800a28c:	d01d      	beq.n	800a2ca <USBD_StdItfReq+0x92>
 800a28e:	7bbb      	ldrb	r3, [r7, #14]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d11a      	bne.n	800a2ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a294:	7bba      	ldrb	r2, [r7, #14]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	32ae      	adds	r2, #174	@ 0xae
 800a29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00f      	beq.n	800a2c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a2a4:	7bba      	ldrb	r2, [r7, #14]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a2ac:	7bba      	ldrb	r2, [r7, #14]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	32ae      	adds	r2, #174	@ 0xae
 800a2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	4798      	blx	r3
 800a2be:	4603      	mov	r3, r0
 800a2c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2c2:	e004      	b.n	800a2ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a2c8:	e001      	b.n	800a2ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	88db      	ldrh	r3, [r3, #6]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d110      	bne.n	800a2f8 <USBD_StdItfReq+0xc0>
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10d      	bne.n	800a2f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 fdf1 	bl	800aec4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a2e2:	e009      	b.n	800a2f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a2e4:	6839      	ldr	r1, [r7, #0]
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fd21 	bl	800ad2e <USBD_CtlError>
          break;
 800a2ec:	e004      	b.n	800a2f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fd1c 	bl	800ad2e <USBD_CtlError>
          break;
 800a2f6:	e000      	b.n	800a2fa <USBD_StdItfReq+0xc2>
          break;
 800a2f8:	bf00      	nop
      }
      break;
 800a2fa:	e004      	b.n	800a306 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fd15 	bl	800ad2e <USBD_CtlError>
      break;
 800a304:	bf00      	nop
  }

  return ret;
 800a306:	7bfb      	ldrb	r3, [r7, #15]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	889b      	ldrh	r3, [r3, #4]
 800a322:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a32c:	2b40      	cmp	r3, #64	@ 0x40
 800a32e:	d007      	beq.n	800a340 <USBD_StdEPReq+0x30>
 800a330:	2b40      	cmp	r3, #64	@ 0x40
 800a332:	f200 817f 	bhi.w	800a634 <USBD_StdEPReq+0x324>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d02a      	beq.n	800a390 <USBD_StdEPReq+0x80>
 800a33a:	2b20      	cmp	r3, #32
 800a33c:	f040 817a 	bne.w	800a634 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff fe85 	bl	800a054 <USBD_CoreFindEP>
 800a34a:	4603      	mov	r3, r0
 800a34c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a34e:	7b7b      	ldrb	r3, [r7, #13]
 800a350:	2bff      	cmp	r3, #255	@ 0xff
 800a352:	f000 8174 	beq.w	800a63e <USBD_StdEPReq+0x32e>
 800a356:	7b7b      	ldrb	r3, [r7, #13]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f040 8170 	bne.w	800a63e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a35e:	7b7a      	ldrb	r2, [r7, #13]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a366:	7b7a      	ldrb	r2, [r7, #13]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	32ae      	adds	r2, #174	@ 0xae
 800a36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	f000 8163 	beq.w	800a63e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a378:	7b7a      	ldrb	r2, [r7, #13]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	32ae      	adds	r2, #174	@ 0xae
 800a37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	6839      	ldr	r1, [r7, #0]
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	4798      	blx	r3
 800a38a:	4603      	mov	r3, r0
 800a38c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a38e:	e156      	b.n	800a63e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	2b03      	cmp	r3, #3
 800a396:	d008      	beq.n	800a3aa <USBD_StdEPReq+0x9a>
 800a398:	2b03      	cmp	r3, #3
 800a39a:	f300 8145 	bgt.w	800a628 <USBD_StdEPReq+0x318>
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 809b 	beq.w	800a4da <USBD_StdEPReq+0x1ca>
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d03c      	beq.n	800a422 <USBD_StdEPReq+0x112>
 800a3a8:	e13e      	b.n	800a628 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d002      	beq.n	800a3bc <USBD_StdEPReq+0xac>
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d016      	beq.n	800a3e8 <USBD_StdEPReq+0xd8>
 800a3ba:	e02c      	b.n	800a416 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00d      	beq.n	800a3de <USBD_StdEPReq+0xce>
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	2b80      	cmp	r3, #128	@ 0x80
 800a3c6:	d00a      	beq.n	800a3de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a3c8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f001 fac5 	bl	800b95c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3d2:	2180      	movs	r1, #128	@ 0x80
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f001 fac1 	bl	800b95c <USBD_LL_StallEP>
 800a3da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a3dc:	e020      	b.n	800a420 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fca4 	bl	800ad2e <USBD_CtlError>
              break;
 800a3e6:	e01b      	b.n	800a420 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	885b      	ldrh	r3, [r3, #2]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10e      	bne.n	800a40e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a3f0:	7bbb      	ldrb	r3, [r7, #14]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00b      	beq.n	800a40e <USBD_StdEPReq+0xfe>
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
 800a3f8:	2b80      	cmp	r3, #128	@ 0x80
 800a3fa:	d008      	beq.n	800a40e <USBD_StdEPReq+0xfe>
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	88db      	ldrh	r3, [r3, #6]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d104      	bne.n	800a40e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a404:	7bbb      	ldrb	r3, [r7, #14]
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f001 faa7 	bl	800b95c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fd58 	bl	800aec4 <USBD_CtlSendStatus>

              break;
 800a414:	e004      	b.n	800a420 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fc88 	bl	800ad2e <USBD_CtlError>
              break;
 800a41e:	bf00      	nop
          }
          break;
 800a420:	e107      	b.n	800a632 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d002      	beq.n	800a434 <USBD_StdEPReq+0x124>
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d016      	beq.n	800a460 <USBD_StdEPReq+0x150>
 800a432:	e04b      	b.n	800a4cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a434:	7bbb      	ldrb	r3, [r7, #14]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00d      	beq.n	800a456 <USBD_StdEPReq+0x146>
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	2b80      	cmp	r3, #128	@ 0x80
 800a43e:	d00a      	beq.n	800a456 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f001 fa89 	bl	800b95c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a44a:	2180      	movs	r1, #128	@ 0x80
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f001 fa85 	bl	800b95c <USBD_LL_StallEP>
 800a452:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a454:	e040      	b.n	800a4d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 fc68 	bl	800ad2e <USBD_CtlError>
              break;
 800a45e:	e03b      	b.n	800a4d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	885b      	ldrh	r3, [r3, #2]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d136      	bne.n	800a4d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	4619      	mov	r1, r3
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f001 faa6 	bl	800b9c8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 fd21 	bl	800aec4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff fde4 	bl	800a054 <USBD_CoreFindEP>
 800a48c:	4603      	mov	r3, r0
 800a48e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a490:	7b7b      	ldrb	r3, [r7, #13]
 800a492:	2bff      	cmp	r3, #255	@ 0xff
 800a494:	d01f      	beq.n	800a4d6 <USBD_StdEPReq+0x1c6>
 800a496:	7b7b      	ldrb	r3, [r7, #13]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d11c      	bne.n	800a4d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a49c:	7b7a      	ldrb	r2, [r7, #13]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a4a4:	7b7a      	ldrb	r2, [r7, #13]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	32ae      	adds	r2, #174	@ 0xae
 800a4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d010      	beq.n	800a4d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a4b4:	7b7a      	ldrb	r2, [r7, #13]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	32ae      	adds	r2, #174	@ 0xae
 800a4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	4798      	blx	r3
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a4ca:	e004      	b.n	800a4d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fc2d 	bl	800ad2e <USBD_CtlError>
              break;
 800a4d4:	e000      	b.n	800a4d8 <USBD_StdEPReq+0x1c8>
              break;
 800a4d6:	bf00      	nop
          }
          break;
 800a4d8:	e0ab      	b.n	800a632 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d002      	beq.n	800a4ec <USBD_StdEPReq+0x1dc>
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d032      	beq.n	800a550 <USBD_StdEPReq+0x240>
 800a4ea:	e097      	b.n	800a61c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4ec:	7bbb      	ldrb	r3, [r7, #14]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <USBD_StdEPReq+0x1f2>
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	2b80      	cmp	r3, #128	@ 0x80
 800a4f6:	d004      	beq.n	800a502 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fc17 	bl	800ad2e <USBD_CtlError>
                break;
 800a500:	e091      	b.n	800a626 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a506:	2b00      	cmp	r3, #0
 800a508:	da0b      	bge.n	800a522 <USBD_StdEPReq+0x212>
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a510:	4613      	mov	r3, r2
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	4413      	add	r3, r2
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	3310      	adds	r3, #16
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	4413      	add	r3, r2
 800a51e:	3304      	adds	r3, #4
 800a520:	e00b      	b.n	800a53a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a522:	7bbb      	ldrb	r3, [r7, #14]
 800a524:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a528:	4613      	mov	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	4413      	add	r3, r2
 800a538:	3304      	adds	r3, #4
 800a53a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	2202      	movs	r2, #2
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fc61 	bl	800ae10 <USBD_CtlSendData>
              break;
 800a54e:	e06a      	b.n	800a626 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a554:	2b00      	cmp	r3, #0
 800a556:	da11      	bge.n	800a57c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	f003 020f 	and.w	r2, r3, #15
 800a55e:	6879      	ldr	r1, [r7, #4]
 800a560:	4613      	mov	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	440b      	add	r3, r1
 800a56a:	3324      	adds	r3, #36	@ 0x24
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d117      	bne.n	800a5a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fbda 	bl	800ad2e <USBD_CtlError>
                  break;
 800a57a:	e054      	b.n	800a626 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	f003 020f 	and.w	r2, r3, #15
 800a582:	6879      	ldr	r1, [r7, #4]
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	440b      	add	r3, r1
 800a58e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d104      	bne.n	800a5a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fbc7 	bl	800ad2e <USBD_CtlError>
                  break;
 800a5a0:	e041      	b.n	800a626 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	da0b      	bge.n	800a5c2 <USBD_StdEPReq+0x2b2>
 800a5aa:	7bbb      	ldrb	r3, [r7, #14]
 800a5ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	3310      	adds	r3, #16
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	4413      	add	r3, r2
 800a5be:	3304      	adds	r3, #4
 800a5c0:	e00b      	b.n	800a5da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	3304      	adds	r3, #4
 800a5da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d002      	beq.n	800a5e8 <USBD_StdEPReq+0x2d8>
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	2b80      	cmp	r3, #128	@ 0x80
 800a5e6:	d103      	bne.n	800a5f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	e00e      	b.n	800a60e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f001 fa1d 	bl	800ba34 <USBD_LL_IsStallEP>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2201      	movs	r2, #1
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	e002      	b.n	800a60e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2202      	movs	r2, #2
 800a612:	4619      	mov	r1, r3
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fbfb 	bl	800ae10 <USBD_CtlSendData>
              break;
 800a61a:	e004      	b.n	800a626 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fb85 	bl	800ad2e <USBD_CtlError>
              break;
 800a624:	bf00      	nop
          }
          break;
 800a626:	e004      	b.n	800a632 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a628:	6839      	ldr	r1, [r7, #0]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fb7f 	bl	800ad2e <USBD_CtlError>
          break;
 800a630:	bf00      	nop
      }
      break;
 800a632:	e005      	b.n	800a640 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 fb79 	bl	800ad2e <USBD_CtlError>
      break;
 800a63c:	e000      	b.n	800a640 <USBD_StdEPReq+0x330>
      break;
 800a63e:	bf00      	nop
  }

  return ret;
 800a640:	7bfb      	ldrb	r3, [r7, #15]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a656:	2300      	movs	r3, #0
 800a658:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a65e:	2300      	movs	r3, #0
 800a660:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	885b      	ldrh	r3, [r3, #2]
 800a666:	0a1b      	lsrs	r3, r3, #8
 800a668:	b29b      	uxth	r3, r3
 800a66a:	3b01      	subs	r3, #1
 800a66c:	2b0e      	cmp	r3, #14
 800a66e:	f200 8152 	bhi.w	800a916 <USBD_GetDescriptor+0x2ca>
 800a672:	a201      	add	r2, pc, #4	@ (adr r2, 800a678 <USBD_GetDescriptor+0x2c>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a6e9 	.word	0x0800a6e9
 800a67c:	0800a701 	.word	0x0800a701
 800a680:	0800a741 	.word	0x0800a741
 800a684:	0800a917 	.word	0x0800a917
 800a688:	0800a917 	.word	0x0800a917
 800a68c:	0800a8b7 	.word	0x0800a8b7
 800a690:	0800a8e3 	.word	0x0800a8e3
 800a694:	0800a917 	.word	0x0800a917
 800a698:	0800a917 	.word	0x0800a917
 800a69c:	0800a917 	.word	0x0800a917
 800a6a0:	0800a917 	.word	0x0800a917
 800a6a4:	0800a917 	.word	0x0800a917
 800a6a8:	0800a917 	.word	0x0800a917
 800a6ac:	0800a917 	.word	0x0800a917
 800a6b0:	0800a6b5 	.word	0x0800a6b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00b      	beq.n	800a6d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	7c12      	ldrb	r2, [r2, #16]
 800a6cc:	f107 0108 	add.w	r1, r7, #8
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	4798      	blx	r3
 800a6d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6d6:	e126      	b.n	800a926 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fb27 	bl	800ad2e <USBD_CtlError>
        err++;
 800a6e0:	7afb      	ldrb	r3, [r7, #11]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	72fb      	strb	r3, [r7, #11]
      break;
 800a6e6:	e11e      	b.n	800a926 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	7c12      	ldrb	r2, [r2, #16]
 800a6f4:	f107 0108 	add.w	r1, r7, #8
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4798      	blx	r3
 800a6fc:	60f8      	str	r0, [r7, #12]
      break;
 800a6fe:	e112      	b.n	800a926 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	7c1b      	ldrb	r3, [r3, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10d      	bne.n	800a724 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a710:	f107 0208 	add.w	r2, r7, #8
 800a714:	4610      	mov	r0, r2
 800a716:	4798      	blx	r3
 800a718:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3301      	adds	r3, #1
 800a71e:	2202      	movs	r2, #2
 800a720:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a722:	e100      	b.n	800a926 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72c:	f107 0208 	add.w	r2, r7, #8
 800a730:	4610      	mov	r0, r2
 800a732:	4798      	blx	r3
 800a734:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3301      	adds	r3, #1
 800a73a:	2202      	movs	r2, #2
 800a73c:	701a      	strb	r2, [r3, #0]
      break;
 800a73e:	e0f2      	b.n	800a926 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	885b      	ldrh	r3, [r3, #2]
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b05      	cmp	r3, #5
 800a748:	f200 80ac 	bhi.w	800a8a4 <USBD_GetDescriptor+0x258>
 800a74c:	a201      	add	r2, pc, #4	@ (adr r2, 800a754 <USBD_GetDescriptor+0x108>)
 800a74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a752:	bf00      	nop
 800a754:	0800a76d 	.word	0x0800a76d
 800a758:	0800a7a1 	.word	0x0800a7a1
 800a75c:	0800a7d5 	.word	0x0800a7d5
 800a760:	0800a809 	.word	0x0800a809
 800a764:	0800a83d 	.word	0x0800a83d
 800a768:	0800a871 	.word	0x0800a871
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00b      	beq.n	800a790 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	7c12      	ldrb	r2, [r2, #16]
 800a784:	f107 0108 	add.w	r1, r7, #8
 800a788:	4610      	mov	r0, r2
 800a78a:	4798      	blx	r3
 800a78c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a78e:	e091      	b.n	800a8b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 facb 	bl	800ad2e <USBD_CtlError>
            err++;
 800a798:	7afb      	ldrb	r3, [r7, #11]
 800a79a:	3301      	adds	r3, #1
 800a79c:	72fb      	strb	r3, [r7, #11]
          break;
 800a79e:	e089      	b.n	800a8b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00b      	beq.n	800a7c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	7c12      	ldrb	r2, [r2, #16]
 800a7b8:	f107 0108 	add.w	r1, r7, #8
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4798      	blx	r3
 800a7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7c2:	e077      	b.n	800a8b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fab1 	bl	800ad2e <USBD_CtlError>
            err++;
 800a7cc:	7afb      	ldrb	r3, [r7, #11]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800a7d2:	e06f      	b.n	800a8b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00b      	beq.n	800a7f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	7c12      	ldrb	r2, [r2, #16]
 800a7ec:	f107 0108 	add.w	r1, r7, #8
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7f6:	e05d      	b.n	800a8b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7f8:	6839      	ldr	r1, [r7, #0]
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fa97 	bl	800ad2e <USBD_CtlError>
            err++;
 800a800:	7afb      	ldrb	r3, [r7, #11]
 800a802:	3301      	adds	r3, #1
 800a804:	72fb      	strb	r3, [r7, #11]
          break;
 800a806:	e055      	b.n	800a8b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	7c12      	ldrb	r2, [r2, #16]
 800a820:	f107 0108 	add.w	r1, r7, #8
 800a824:	4610      	mov	r0, r2
 800a826:	4798      	blx	r3
 800a828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a82a:	e043      	b.n	800a8b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fa7d 	bl	800ad2e <USBD_CtlError>
            err++;
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	3301      	adds	r3, #1
 800a838:	72fb      	strb	r3, [r7, #11]
          break;
 800a83a:	e03b      	b.n	800a8b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	7c12      	ldrb	r2, [r2, #16]
 800a854:	f107 0108 	add.w	r1, r7, #8
 800a858:	4610      	mov	r0, r2
 800a85a:	4798      	blx	r3
 800a85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a85e:	e029      	b.n	800a8b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fa63 	bl	800ad2e <USBD_CtlError>
            err++;
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	3301      	adds	r3, #1
 800a86c:	72fb      	strb	r3, [r7, #11]
          break;
 800a86e:	e021      	b.n	800a8b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	7c12      	ldrb	r2, [r2, #16]
 800a888:	f107 0108 	add.w	r1, r7, #8
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
 800a890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a892:	e00f      	b.n	800a8b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa49 	bl	800ad2e <USBD_CtlError>
            err++;
 800a89c:	7afb      	ldrb	r3, [r7, #11]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8a2:	e007      	b.n	800a8b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a8a4:	6839      	ldr	r1, [r7, #0]
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 fa41 	bl	800ad2e <USBD_CtlError>
          err++;
 800a8ac:	7afb      	ldrb	r3, [r7, #11]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a8b2:	bf00      	nop
      }
      break;
 800a8b4:	e037      	b.n	800a926 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	7c1b      	ldrb	r3, [r3, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8c6:	f107 0208 	add.w	r2, r7, #8
 800a8ca:	4610      	mov	r0, r2
 800a8cc:	4798      	blx	r3
 800a8ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8d0:	e029      	b.n	800a926 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fa2a 	bl	800ad2e <USBD_CtlError>
        err++;
 800a8da:	7afb      	ldrb	r3, [r7, #11]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	72fb      	strb	r3, [r7, #11]
      break;
 800a8e0:	e021      	b.n	800a926 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	7c1b      	ldrb	r3, [r3, #16]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d10d      	bne.n	800a906 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f2:	f107 0208 	add.w	r2, r7, #8
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	4798      	blx	r3
 800a8fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3301      	adds	r3, #1
 800a900:	2207      	movs	r2, #7
 800a902:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a904:	e00f      	b.n	800a926 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fa10 	bl	800ad2e <USBD_CtlError>
        err++;
 800a90e:	7afb      	ldrb	r3, [r7, #11]
 800a910:	3301      	adds	r3, #1
 800a912:	72fb      	strb	r3, [r7, #11]
      break;
 800a914:	e007      	b.n	800a926 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 fa08 	bl	800ad2e <USBD_CtlError>
      err++;
 800a91e:	7afb      	ldrb	r3, [r7, #11]
 800a920:	3301      	adds	r3, #1
 800a922:	72fb      	strb	r3, [r7, #11]
      break;
 800a924:	bf00      	nop
  }

  if (err != 0U)
 800a926:	7afb      	ldrb	r3, [r7, #11]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d11e      	bne.n	800a96a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	88db      	ldrh	r3, [r3, #6]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d016      	beq.n	800a962 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a934:	893b      	ldrh	r3, [r7, #8]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00e      	beq.n	800a958 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	88da      	ldrh	r2, [r3, #6]
 800a93e:	893b      	ldrh	r3, [r7, #8]
 800a940:	4293      	cmp	r3, r2
 800a942:	bf28      	it	cs
 800a944:	4613      	movcs	r3, r2
 800a946:	b29b      	uxth	r3, r3
 800a948:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a94a:	893b      	ldrh	r3, [r7, #8]
 800a94c:	461a      	mov	r2, r3
 800a94e:	68f9      	ldr	r1, [r7, #12]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fa5d 	bl	800ae10 <USBD_CtlSendData>
 800a956:	e009      	b.n	800a96c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f9e7 	bl	800ad2e <USBD_CtlError>
 800a960:	e004      	b.n	800a96c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 faae 	bl	800aec4 <USBD_CtlSendStatus>
 800a968:	e000      	b.n	800a96c <USBD_GetDescriptor+0x320>
    return;
 800a96a:	bf00      	nop
  }
}
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop

0800a974 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	889b      	ldrh	r3, [r3, #4]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d131      	bne.n	800a9ea <USBD_SetAddress+0x76>
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	88db      	ldrh	r3, [r3, #6]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d12d      	bne.n	800a9ea <USBD_SetAddress+0x76>
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	885b      	ldrh	r3, [r3, #2]
 800a992:	2b7f      	cmp	r3, #127	@ 0x7f
 800a994:	d829      	bhi.n	800a9ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	885b      	ldrh	r3, [r3, #2]
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	d104      	bne.n	800a9b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f9bc 	bl	800ad2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9b6:	e01d      	b.n	800a9f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	7bfa      	ldrb	r2, [r7, #15]
 800a9bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f001 f861 	bl	800ba8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fa7a 	bl	800aec4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d004      	beq.n	800a9e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9de:	e009      	b.n	800a9f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9e8:	e004      	b.n	800a9f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 f99e 	bl	800ad2e <USBD_CtlError>
  }
}
 800a9f2:	bf00      	nop
 800a9f4:	bf00      	nop
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	885b      	ldrh	r3, [r3, #2]
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	4b4e      	ldr	r3, [pc, #312]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aa12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa14:	4b4d      	ldr	r3, [pc, #308]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d905      	bls.n	800aa28 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f985 	bl	800ad2e <USBD_CtlError>
    return USBD_FAIL;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e08c      	b.n	800ab42 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d002      	beq.n	800aa3a <USBD_SetConfig+0x3e>
 800aa34:	2b03      	cmp	r3, #3
 800aa36:	d029      	beq.n	800aa8c <USBD_SetConfig+0x90>
 800aa38:	e075      	b.n	800ab26 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa3a:	4b44      	ldr	r3, [pc, #272]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d020      	beq.n	800aa84 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aa42:	4b42      	ldr	r3, [pc, #264]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa4c:	4b3f      	ldr	r3, [pc, #252]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	4619      	mov	r1, r3
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7fe ffb9 	bl	80099ca <USBD_SetClassConfig>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d008      	beq.n	800aa74 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f962 	bl	800ad2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa72:	e065      	b.n	800ab40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fa25 	bl	800aec4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2203      	movs	r2, #3
 800aa7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aa82:	e05d      	b.n	800ab40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fa1d 	bl	800aec4 <USBD_CtlSendStatus>
      break;
 800aa8a:	e059      	b.n	800ab40 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa8c:	4b2f      	ldr	r3, [pc, #188]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d112      	bne.n	800aaba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2202      	movs	r2, #2
 800aa98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800aa9c:	4b2b      	ldr	r3, [pc, #172]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aaa6:	4b29      	ldr	r3, [pc, #164]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7fe ffa8 	bl	8009a02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fa06 	bl	800aec4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aab8:	e042      	b.n	800ab40 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aaba:	4b24      	ldr	r3, [pc, #144]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d02a      	beq.n	800ab1e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7fe ff96 	bl	8009a02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aad6:	4b1d      	ldr	r3, [pc, #116]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aae0:	4b1a      	ldr	r3, [pc, #104]	@ (800ab4c <USBD_SetConfig+0x150>)
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7fe ff6f 	bl	80099ca <USBD_SetClassConfig>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00f      	beq.n	800ab16 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f918 	bl	800ad2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7fe ff7b 	bl	8009a02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ab14:	e014      	b.n	800ab40 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f9d4 	bl	800aec4 <USBD_CtlSendStatus>
      break;
 800ab1c:	e010      	b.n	800ab40 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 f9d0 	bl	800aec4 <USBD_CtlSendStatus>
      break;
 800ab24:	e00c      	b.n	800ab40 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f900 	bl	800ad2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab2e:	4b07      	ldr	r3, [pc, #28]	@ (800ab4c <USBD_SetConfig+0x150>)
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7fe ff64 	bl	8009a02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab3e:	bf00      	nop
  }

  return ret;
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	2000040c 	.word	0x2000040c

0800ab50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	88db      	ldrh	r3, [r3, #6]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d004      	beq.n	800ab6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f8e2 	bl	800ad2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab6a:	e023      	b.n	800abb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	dc02      	bgt.n	800ab7e <USBD_GetConfig+0x2e>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dc03      	bgt.n	800ab84 <USBD_GetConfig+0x34>
 800ab7c:	e015      	b.n	800abaa <USBD_GetConfig+0x5a>
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d00b      	beq.n	800ab9a <USBD_GetConfig+0x4a>
 800ab82:	e012      	b.n	800abaa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	2201      	movs	r2, #1
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f93c 	bl	800ae10 <USBD_CtlSendData>
        break;
 800ab98:	e00c      	b.n	800abb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	2201      	movs	r2, #1
 800aba0:	4619      	mov	r1, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f934 	bl	800ae10 <USBD_CtlSendData>
        break;
 800aba8:	e004      	b.n	800abb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800abaa:	6839      	ldr	r1, [r7, #0]
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f8be 	bl	800ad2e <USBD_CtlError>
        break;
 800abb2:	bf00      	nop
}
 800abb4:	bf00      	nop
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	3b01      	subs	r3, #1
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d81e      	bhi.n	800ac12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	88db      	ldrh	r3, [r3, #6]
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d004      	beq.n	800abe6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 f8a5 	bl	800ad2e <USBD_CtlError>
        break;
 800abe4:	e01a      	b.n	800ac1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d005      	beq.n	800ac02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	f043 0202 	orr.w	r2, r3, #2
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	330c      	adds	r3, #12
 800ac06:	2202      	movs	r2, #2
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f900 	bl	800ae10 <USBD_CtlSendData>
      break;
 800ac10:	e004      	b.n	800ac1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 f88a 	bl	800ad2e <USBD_CtlError>
      break;
 800ac1a:	bf00      	nop
  }
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	885b      	ldrh	r3, [r3, #2]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d107      	bne.n	800ac46 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f940 	bl	800aec4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ac44:	e013      	b.n	800ac6e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	885b      	ldrh	r3, [r3, #2]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d10b      	bne.n	800ac66 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	889b      	ldrh	r3, [r3, #4]
 800ac52:	0a1b      	lsrs	r3, r3, #8
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f930 	bl	800aec4 <USBD_CtlSendStatus>
}
 800ac64:	e003      	b.n	800ac6e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f860 	bl	800ad2e <USBD_CtlError>
}
 800ac6e:	bf00      	nop
 800ac70:	3708      	adds	r7, #8
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b082      	sub	sp, #8
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d80b      	bhi.n	800aca6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	885b      	ldrh	r3, [r3, #2]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d10c      	bne.n	800acb0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f910 	bl	800aec4 <USBD_CtlSendStatus>
      }
      break;
 800aca4:	e004      	b.n	800acb0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f840 	bl	800ad2e <USBD_CtlError>
      break;
 800acae:	e000      	b.n	800acb2 <USBD_ClrFeature+0x3c>
      break;
 800acb0:	bf00      	nop
  }
}
 800acb2:	bf00      	nop
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b084      	sub	sp, #16
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	781a      	ldrb	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	3301      	adds	r3, #1
 800acd4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	781a      	ldrb	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	3301      	adds	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7ff fa16 	bl	800a116 <SWAPBYTE>
 800acea:	4603      	mov	r3, r0
 800acec:	461a      	mov	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3301      	adds	r3, #1
 800acf6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	3301      	adds	r3, #1
 800acfc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	f7ff fa09 	bl	800a116 <SWAPBYTE>
 800ad04:	4603      	mov	r3, r0
 800ad06:	461a      	mov	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3301      	adds	r3, #1
 800ad16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff f9fc 	bl	800a116 <SWAPBYTE>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	461a      	mov	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	80da      	strh	r2, [r3, #6]
}
 800ad26:	bf00      	nop
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad38:	2180      	movs	r1, #128	@ 0x80
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fe0e 	bl	800b95c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad40:	2100      	movs	r1, #0
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fe0a 	bl	800b95c <USBD_LL_StallEP>
}
 800ad48:	bf00      	nop
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d036      	beq.n	800add4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ad6a:	6938      	ldr	r0, [r7, #16]
 800ad6c:	f000 f836 	bl	800addc <USBD_GetLen>
 800ad70:	4603      	mov	r3, r0
 800ad72:	3301      	adds	r3, #1
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	005b      	lsls	r3, r3, #1
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	4413      	add	r3, r2
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	7812      	ldrb	r2, [r2, #0]
 800ad88:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ad90:	7dfb      	ldrb	r3, [r7, #23]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	4413      	add	r3, r2
 800ad96:	2203      	movs	r2, #3
 800ad98:	701a      	strb	r2, [r3, #0]
  idx++;
 800ad9a:	7dfb      	ldrb	r3, [r7, #23]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ada0:	e013      	b.n	800adca <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ada2:	7dfb      	ldrb	r3, [r7, #23]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	4413      	add	r3, r2
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	7812      	ldrb	r2, [r2, #0]
 800adac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	3301      	adds	r3, #1
 800adb2:	613b      	str	r3, [r7, #16]
    idx++;
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
 800adb6:	3301      	adds	r3, #1
 800adb8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	4413      	add	r3, r2
 800adc0:	2200      	movs	r2, #0
 800adc2:	701a      	strb	r2, [r3, #0]
    idx++;
 800adc4:	7dfb      	ldrb	r3, [r7, #23]
 800adc6:	3301      	adds	r3, #1
 800adc8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e7      	bne.n	800ada2 <USBD_GetString+0x52>
 800add2:	e000      	b.n	800add6 <USBD_GetString+0x86>
    return;
 800add4:	bf00      	nop
  }
}
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800adec:	e005      	b.n	800adfa <USBD_GetLen+0x1e>
  {
    len++;
 800adee:	7bfb      	ldrb	r3, [r7, #15]
 800adf0:	3301      	adds	r3, #1
 800adf2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	3301      	adds	r3, #1
 800adf8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1f5      	bne.n	800adee <USBD_GetLen+0x12>
  }

  return len;
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2202      	movs	r2, #2
 800ae20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	687a      	ldr	r2, [r7, #4]
 800ae2e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	2100      	movs	r1, #0
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 fe5e 	bl	800baf8 <USBD_LL_Transmit>

  return USBD_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b084      	sub	sp, #16
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	60b9      	str	r1, [r7, #8]
 800ae50:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	2100      	movs	r1, #0
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f000 fe4d 	bl	800baf8 <USBD_LL_Transmit>

  return USBD_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2203      	movs	r2, #3
 800ae78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	687a      	ldr	r2, [r7, #4]
 800ae80:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	2100      	movs	r1, #0
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f000 fe68 	bl	800bb68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 fe57 	bl	800bb68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2204      	movs	r2, #4
 800aed0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aed4:	2300      	movs	r3, #0
 800aed6:	2200      	movs	r2, #0
 800aed8:	2100      	movs	r1, #0
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fe0c 	bl	800baf8 <USBD_LL_Transmit>

  return USBD_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2205      	movs	r2, #5
 800aef6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aefa:	2300      	movs	r3, #0
 800aefc:	2200      	movs	r2, #0
 800aefe:	2100      	movs	r1, #0
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fe31 	bl	800bb68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	4613      	mov	r3, r2
 800af1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800af1e:	2301      	movs	r3, #1
 800af20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800af26:	4b1f      	ldr	r3, [pc, #124]	@ (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af28:	7a5b      	ldrb	r3, [r3, #9]
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d131      	bne.n	800af94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800af30:	4b1c      	ldr	r3, [pc, #112]	@ (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af32:	7a5b      	ldrb	r3, [r3, #9]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	461a      	mov	r2, r3
 800af38:	4b1a      	ldr	r3, [pc, #104]	@ (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af3a:	2100      	movs	r1, #0
 800af3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800af3e:	4b19      	ldr	r3, [pc, #100]	@ (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af40:	7a5b      	ldrb	r3, [r3, #9]
 800af42:	b2db      	uxtb	r3, r3
 800af44:	4a17      	ldr	r2, [pc, #92]	@ (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800af4e:	4b15      	ldr	r3, [pc, #84]	@ (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af50:	7a5b      	ldrb	r3, [r3, #9]
 800af52:	b2db      	uxtb	r3, r3
 800af54:	461a      	mov	r2, r3
 800af56:	4b13      	ldr	r3, [pc, #76]	@ (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af58:	4413      	add	r3, r2
 800af5a:	79fa      	ldrb	r2, [r7, #7]
 800af5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800af5e:	4b11      	ldr	r3, [pc, #68]	@ (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af60:	7a5b      	ldrb	r3, [r3, #9]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	1c5a      	adds	r2, r3, #1
 800af66:	b2d1      	uxtb	r1, r2
 800af68:	4a0e      	ldr	r2, [pc, #56]	@ (800afa4 <FATFS_LinkDriverEx+0x94>)
 800af6a:	7251      	strb	r1, [r2, #9]
 800af6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800af6e:	7dbb      	ldrb	r3, [r7, #22]
 800af70:	3330      	adds	r3, #48	@ 0x30
 800af72:	b2da      	uxtb	r2, r3
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	3301      	adds	r3, #1
 800af7c:	223a      	movs	r2, #58	@ 0x3a
 800af7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	3302      	adds	r3, #2
 800af84:	222f      	movs	r2, #47	@ 0x2f
 800af86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	3303      	adds	r3, #3
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800af90:	2300      	movs	r3, #0
 800af92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800af94:	7dfb      	ldrb	r3, [r7, #23]
}
 800af96:	4618      	mov	r0, r3
 800af98:	371c      	adds	r7, #28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000410 	.word	0x20000410

0800afa8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800afb2:	2200      	movs	r2, #0
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff ffaa 	bl	800af10 <FATFS_LinkDriverEx>
 800afbc:	4603      	mov	r3, r0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800afcc:	2200      	movs	r2, #0
 800afce:	4912      	ldr	r1, [pc, #72]	@ (800b018 <MX_USB_DEVICE_Init+0x50>)
 800afd0:	4812      	ldr	r0, [pc, #72]	@ (800b01c <MX_USB_DEVICE_Init+0x54>)
 800afd2:	f7fe fc7d 	bl	80098d0 <USBD_Init>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800afdc:	f7f7 fd26 	bl	8002a2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800afe0:	490f      	ldr	r1, [pc, #60]	@ (800b020 <MX_USB_DEVICE_Init+0x58>)
 800afe2:	480e      	ldr	r0, [pc, #56]	@ (800b01c <MX_USB_DEVICE_Init+0x54>)
 800afe4:	f7fe fca4 	bl	8009930 <USBD_RegisterClass>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800afee:	f7f7 fd1d 	bl	8002a2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aff2:	490c      	ldr	r1, [pc, #48]	@ (800b024 <MX_USB_DEVICE_Init+0x5c>)
 800aff4:	4809      	ldr	r0, [pc, #36]	@ (800b01c <MX_USB_DEVICE_Init+0x54>)
 800aff6:	f7fe fb9b 	bl	8009730 <USBD_CDC_RegisterInterface>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b000:	f7f7 fd14 	bl	8002a2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b004:	4805      	ldr	r0, [pc, #20]	@ (800b01c <MX_USB_DEVICE_Init+0x54>)
 800b006:	f7fe fcc9 	bl	800999c <USBD_Start>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b010:	f7f7 fd0c 	bl	8002a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b014:	bf00      	nop
 800b016:	bd80      	pop	{r7, pc}
 800b018:	20000100 	.word	0x20000100
 800b01c:	2000041c 	.word	0x2000041c
 800b020:	20000060 	.word	0x20000060
 800b024:	200000ec 	.word	0x200000ec

0800b028 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b02c:	2200      	movs	r2, #0
 800b02e:	4905      	ldr	r1, [pc, #20]	@ (800b044 <CDC_Init_FS+0x1c>)
 800b030:	4805      	ldr	r0, [pc, #20]	@ (800b048 <CDC_Init_FS+0x20>)
 800b032:	f7fe fb97 	bl	8009764 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b036:	4905      	ldr	r1, [pc, #20]	@ (800b04c <CDC_Init_FS+0x24>)
 800b038:	4803      	ldr	r0, [pc, #12]	@ (800b048 <CDC_Init_FS+0x20>)
 800b03a:	f7fe fbb5 	bl	80097a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b03e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b040:	4618      	mov	r0, r3
 800b042:	bd80      	pop	{r7, pc}
 800b044:	20000ef8 	.word	0x20000ef8
 800b048:	2000041c 	.word	0x2000041c
 800b04c:	200006f8 	.word	0x200006f8

0800b050 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b050:	b480      	push	{r7}
 800b052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b054:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b056:	4618      	mov	r0, r3
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	4603      	mov	r3, r0
 800b068:	6039      	str	r1, [r7, #0]
 800b06a:	71fb      	strb	r3, [r7, #7]
 800b06c:	4613      	mov	r3, r2
 800b06e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	2b23      	cmp	r3, #35	@ 0x23
 800b074:	d84a      	bhi.n	800b10c <CDC_Control_FS+0xac>
 800b076:	a201      	add	r2, pc, #4	@ (adr r2, 800b07c <CDC_Control_FS+0x1c>)
 800b078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07c:	0800b10d 	.word	0x0800b10d
 800b080:	0800b10d 	.word	0x0800b10d
 800b084:	0800b10d 	.word	0x0800b10d
 800b088:	0800b10d 	.word	0x0800b10d
 800b08c:	0800b10d 	.word	0x0800b10d
 800b090:	0800b10d 	.word	0x0800b10d
 800b094:	0800b10d 	.word	0x0800b10d
 800b098:	0800b10d 	.word	0x0800b10d
 800b09c:	0800b10d 	.word	0x0800b10d
 800b0a0:	0800b10d 	.word	0x0800b10d
 800b0a4:	0800b10d 	.word	0x0800b10d
 800b0a8:	0800b10d 	.word	0x0800b10d
 800b0ac:	0800b10d 	.word	0x0800b10d
 800b0b0:	0800b10d 	.word	0x0800b10d
 800b0b4:	0800b10d 	.word	0x0800b10d
 800b0b8:	0800b10d 	.word	0x0800b10d
 800b0bc:	0800b10d 	.word	0x0800b10d
 800b0c0:	0800b10d 	.word	0x0800b10d
 800b0c4:	0800b10d 	.word	0x0800b10d
 800b0c8:	0800b10d 	.word	0x0800b10d
 800b0cc:	0800b10d 	.word	0x0800b10d
 800b0d0:	0800b10d 	.word	0x0800b10d
 800b0d4:	0800b10d 	.word	0x0800b10d
 800b0d8:	0800b10d 	.word	0x0800b10d
 800b0dc:	0800b10d 	.word	0x0800b10d
 800b0e0:	0800b10d 	.word	0x0800b10d
 800b0e4:	0800b10d 	.word	0x0800b10d
 800b0e8:	0800b10d 	.word	0x0800b10d
 800b0ec:	0800b10d 	.word	0x0800b10d
 800b0f0:	0800b10d 	.word	0x0800b10d
 800b0f4:	0800b10d 	.word	0x0800b10d
 800b0f8:	0800b10d 	.word	0x0800b10d
 800b0fc:	0800b10d 	.word	0x0800b10d
 800b100:	0800b10d 	.word	0x0800b10d
 800b104:	0800b10d 	.word	0x0800b10d
 800b108:	0800b10d 	.word	0x0800b10d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b10c:	bf00      	nop
  }

  return (USBD_OK);
 800b10e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b110:	4618      	mov	r0, r3
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b126:	6879      	ldr	r1, [r7, #4]
 800b128:	481e      	ldr	r0, [pc, #120]	@ (800b1a4 <CDC_Receive_FS+0x88>)
 800b12a:	f7fe fb3d 	bl	80097a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b12e:	481d      	ldr	r0, [pc, #116]	@ (800b1a4 <CDC_Receive_FS+0x88>)
 800b130:	f7fe fb98 	bl	8009864 <USBD_CDC_ReceivePacket>

  if (COM_STATUS && ECHO)
 800b134:	4b1c      	ldr	r3, [pc, #112]	@ (800b1a8 <CDC_Receive_FS+0x8c>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d006      	beq.n	800b14a <CDC_Receive_FS+0x2e>
    CDC_Transmit_FS(Buf, *Len);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	b29b      	uxth	r3, r3
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f839 	bl	800b1bc <CDC_Transmit_FS>

  for (uint32_t i = 0; i < *Len; i++)
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
 800b14e:	e01e      	b.n	800b18e <CDC_Receive_FS+0x72>
  {
    *com_write_ptr = Buf[i];
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	441a      	add	r2, r3
 800b156:	4b15      	ldr	r3, [pc, #84]	@ (800b1ac <CDC_Receive_FS+0x90>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	7812      	ldrb	r2, [r2, #0]
 800b15c:	701a      	strb	r2, [r3, #0]
    com_write_ptr++;
 800b15e:	4b13      	ldr	r3, [pc, #76]	@ (800b1ac <CDC_Receive_FS+0x90>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3301      	adds	r3, #1
 800b164:	4a11      	ldr	r2, [pc, #68]	@ (800b1ac <CDC_Receive_FS+0x90>)
 800b166:	6013      	str	r3, [r2, #0]
    if (com_write_ptr == com_buf + RX_BUFFER_SIZE)
 800b168:	4b10      	ldr	r3, [pc, #64]	@ (800b1ac <CDC_Receive_FS+0x90>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4a10      	ldr	r2, [pc, #64]	@ (800b1b0 <CDC_Receive_FS+0x94>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d102      	bne.n	800b178 <CDC_Receive_FS+0x5c>
      com_write_ptr = com_buf;
 800b172:	4b0e      	ldr	r3, [pc, #56]	@ (800b1ac <CDC_Receive_FS+0x90>)
 800b174:	4a0f      	ldr	r2, [pc, #60]	@ (800b1b4 <CDC_Receive_FS+0x98>)
 800b176:	601a      	str	r2, [r3, #0]
	if (com_write_ptr == com_read_ptr) return USBD_BUSY;
 800b178:	4b0c      	ldr	r3, [pc, #48]	@ (800b1ac <CDC_Receive_FS+0x90>)
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	4b0e      	ldr	r3, [pc, #56]	@ (800b1b8 <CDC_Receive_FS+0x9c>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	429a      	cmp	r2, r3
 800b182:	d101      	bne.n	800b188 <CDC_Receive_FS+0x6c>
 800b184:	2301      	movs	r3, #1
 800b186:	e008      	b.n	800b19a <CDC_Receive_FS+0x7e>
  for (uint32_t i = 0; i < *Len; i++)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	3301      	adds	r3, #1
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	429a      	cmp	r2, r3
 800b196:	d3db      	bcc.n	800b150 <CDC_Receive_FS+0x34>
  }

  return (USBD_OK);
 800b198:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	2000041c 	.word	0x2000041c
 800b1a8:	200000e8 	.word	0x200000e8
 800b1ac:	200000e4 	.word	0x200000e4
 800b1b0:	200026f8 	.word	0x200026f8
 800b1b4:	200016f8 	.word	0x200016f8
 800b1b8:	200000e0 	.word	0x200000e0

0800b1bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b204 <CDC_Transmit_FS+0x48>)
 800b1ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e00b      	b.n	800b1fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b1e2:	887b      	ldrh	r3, [r7, #2]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	6879      	ldr	r1, [r7, #4]
 800b1e8:	4806      	ldr	r0, [pc, #24]	@ (800b204 <CDC_Transmit_FS+0x48>)
 800b1ea:	f7fe fabb 	bl	8009764 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b1ee:	4805      	ldr	r0, [pc, #20]	@ (800b204 <CDC_Transmit_FS+0x48>)
 800b1f0:	f7fe faf8 	bl	80097e4 <USBD_CDC_TransmitPacket>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	2000041c 	.word	0x2000041c

0800b208 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b208:	b480      	push	{r7}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b216:	2300      	movs	r3, #0
 800b218:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b21a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	371c      	adds	r7, #28
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
	...

0800b22c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	6039      	str	r1, [r7, #0]
 800b236:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	2212      	movs	r2, #18
 800b23c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b23e:	4b03      	ldr	r3, [pc, #12]	@ (800b24c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	20000120 	.word	0x20000120

0800b250 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	6039      	str	r1, [r7, #0]
 800b25a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	2204      	movs	r2, #4
 800b260:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b262:	4b03      	ldr	r3, [pc, #12]	@ (800b270 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	20000140 	.word	0x20000140

0800b274 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d105      	bne.n	800b292 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	4907      	ldr	r1, [pc, #28]	@ (800b2a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b28a:	4808      	ldr	r0, [pc, #32]	@ (800b2ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b28c:	f7ff fd60 	bl	800ad50 <USBD_GetString>
 800b290:	e004      	b.n	800b29c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b292:	683a      	ldr	r2, [r7, #0]
 800b294:	4904      	ldr	r1, [pc, #16]	@ (800b2a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800b296:	4805      	ldr	r0, [pc, #20]	@ (800b2ac <USBD_FS_ProductStrDescriptor+0x38>)
 800b298:	f7ff fd5a 	bl	800ad50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b29c:	4b02      	ldr	r3, [pc, #8]	@ (800b2a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	200026f8 	.word	0x200026f8
 800b2ac:	0800ff14 	.word	0x0800ff14

0800b2b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	6039      	str	r1, [r7, #0]
 800b2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b2bc:	683a      	ldr	r2, [r7, #0]
 800b2be:	4904      	ldr	r1, [pc, #16]	@ (800b2d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b2c0:	4804      	ldr	r0, [pc, #16]	@ (800b2d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b2c2:	f7ff fd45 	bl	800ad50 <USBD_GetString>
  return USBD_StrDesc;
 800b2c6:	4b02      	ldr	r3, [pc, #8]	@ (800b2d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	200026f8 	.word	0x200026f8
 800b2d4:	0800ff2c 	.word	0x0800ff2c

0800b2d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	6039      	str	r1, [r7, #0]
 800b2e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	221a      	movs	r2, #26
 800b2e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2ea:	f000 f855 	bl	800b398 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2ee:	4b02      	ldr	r3, [pc, #8]	@ (800b2f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20000144 	.word	0x20000144

0800b2fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	4603      	mov	r3, r0
 800b304:	6039      	str	r1, [r7, #0]
 800b306:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b308:	79fb      	ldrb	r3, [r7, #7]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d105      	bne.n	800b31a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	4907      	ldr	r1, [pc, #28]	@ (800b330 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b312:	4808      	ldr	r0, [pc, #32]	@ (800b334 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b314:	f7ff fd1c 	bl	800ad50 <USBD_GetString>
 800b318:	e004      	b.n	800b324 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	4904      	ldr	r1, [pc, #16]	@ (800b330 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b31e:	4805      	ldr	r0, [pc, #20]	@ (800b334 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b320:	f7ff fd16 	bl	800ad50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b324:	4b02      	ldr	r3, [pc, #8]	@ (800b330 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b326:	4618      	mov	r0, r3
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	200026f8 	.word	0x200026f8
 800b334:	0800ff40 	.word	0x0800ff40

0800b338 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b082      	sub	sp, #8
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	6039      	str	r1, [r7, #0]
 800b342:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d105      	bne.n	800b356 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	4907      	ldr	r1, [pc, #28]	@ (800b36c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b34e:	4808      	ldr	r0, [pc, #32]	@ (800b370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b350:	f7ff fcfe 	bl	800ad50 <USBD_GetString>
 800b354:	e004      	b.n	800b360 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	4904      	ldr	r1, [pc, #16]	@ (800b36c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b35a:	4805      	ldr	r0, [pc, #20]	@ (800b370 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b35c:	f7ff fcf8 	bl	800ad50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b360:	4b02      	ldr	r3, [pc, #8]	@ (800b36c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	200026f8 	.word	0x200026f8
 800b370:	0800ff4c 	.word	0x0800ff4c

0800b374 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	6039      	str	r1, [r7, #0]
 800b37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	220c      	movs	r2, #12
 800b384:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b386:	4b03      	ldr	r3, [pc, #12]	@ (800b394 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	20000134 	.word	0x20000134

0800b398 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d009      	beq.n	800b3c0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b3ac:	2208      	movs	r2, #8
 800b3ae:	4906      	ldr	r1, [pc, #24]	@ (800b3c8 <Get_SerialNum+0x30>)
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 f80d 	bl	800b3d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b3b6:	2204      	movs	r2, #4
 800b3b8:	4904      	ldr	r1, [pc, #16]	@ (800b3cc <Get_SerialNum+0x34>)
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f808 	bl	800b3d0 <IntToUnicode>
  }
}
 800b3c0:	bf00      	nop
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	20000146 	.word	0x20000146
 800b3cc:	20000156 	.word	0x20000156

0800b3d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	4613      	mov	r3, r2
 800b3dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	75fb      	strb	r3, [r7, #23]
 800b3e6:	e027      	b.n	800b438 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	0f1b      	lsrs	r3, r3, #28
 800b3ec:	2b09      	cmp	r3, #9
 800b3ee:	d80b      	bhi.n	800b408 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	0f1b      	lsrs	r3, r3, #28
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	440b      	add	r3, r1
 800b400:	3230      	adds	r2, #48	@ 0x30
 800b402:	b2d2      	uxtb	r2, r2
 800b404:	701a      	strb	r2, [r3, #0]
 800b406:	e00a      	b.n	800b41e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	0f1b      	lsrs	r3, r3, #28
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	005b      	lsls	r3, r3, #1
 800b412:	4619      	mov	r1, r3
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	440b      	add	r3, r1
 800b418:	3237      	adds	r2, #55	@ 0x37
 800b41a:	b2d2      	uxtb	r2, r2
 800b41c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	011b      	lsls	r3, r3, #4
 800b422:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b424:	7dfb      	ldrb	r3, [r7, #23]
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	3301      	adds	r3, #1
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	4413      	add	r3, r2
 800b42e:	2200      	movs	r2, #0
 800b430:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b432:	7dfb      	ldrb	r3, [r7, #23]
 800b434:	3301      	adds	r3, #1
 800b436:	75fb      	strb	r3, [r7, #23]
 800b438:	7dfa      	ldrb	r2, [r7, #23]
 800b43a:	79fb      	ldrb	r3, [r7, #7]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d3d3      	bcc.n	800b3e8 <IntToUnicode+0x18>
  }
}
 800b440:	bf00      	nop
 800b442:	bf00      	nop
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
	...

0800b450 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b0ac      	sub	sp, #176	@ 0xb0
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b458:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	605a      	str	r2, [r3, #4]
 800b462:	609a      	str	r2, [r3, #8]
 800b464:	60da      	str	r2, [r3, #12]
 800b466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b468:	f107 0314 	add.w	r3, r7, #20
 800b46c:	2288      	movs	r2, #136	@ 0x88
 800b46e:	2100      	movs	r1, #0
 800b470:	4618      	mov	r0, r3
 800b472:	f001 f954 	bl	800c71e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b47e:	d173      	bne.n	800b568 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b484:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b486:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800b48a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b48e:	2301      	movs	r3, #1
 800b490:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b492:	2301      	movs	r3, #1
 800b494:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b496:	2318      	movs	r3, #24
 800b498:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b49a:	2307      	movs	r3, #7
 800b49c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b49e:	2302      	movs	r3, #2
 800b4a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b4a6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b4aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b4ac:	f107 0314 	add.w	r3, r7, #20
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fb fa39 	bl	8006928 <HAL_RCCEx_PeriphCLKConfig>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800b4bc:	f7f7 fab6 	bl	8002a2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4c0:	4b2b      	ldr	r3, [pc, #172]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b4c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4c4:	4a2a      	ldr	r2, [pc, #168]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b4c6:	f043 0301 	orr.w	r3, r3, #1
 800b4ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b4cc:	4b28      	ldr	r3, [pc, #160]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b4ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4d0:	f003 0301 	and.w	r3, r3, #1
 800b4d4:	613b      	str	r3, [r7, #16]
 800b4d6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b4d8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b4dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b4f2:	230a      	movs	r3, #10
 800b4f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b502:	f7f8 fa19 	bl	8003938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b506:	4b1a      	ldr	r3, [pc, #104]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b50a:	4a19      	ldr	r2, [pc, #100]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b50c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b510:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b512:	4b17      	ldr	r3, [pc, #92]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b51e:	4b14      	ldr	r3, [pc, #80]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b526:	2b00      	cmp	r3, #0
 800b528:	d114      	bne.n	800b554 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b52a:	4b11      	ldr	r3, [pc, #68]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b52c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b52e:	4a10      	ldr	r2, [pc, #64]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b534:	6593      	str	r3, [r2, #88]	@ 0x58
 800b536:	4b0e      	ldr	r3, [pc, #56]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b53a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b53e:	60bb      	str	r3, [r7, #8]
 800b540:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800b542:	f7f9 fe9b 	bl	800527c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b546:	4b0a      	ldr	r3, [pc, #40]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b54a:	4a09      	ldr	r2, [pc, #36]	@ (800b570 <HAL_PCD_MspInit+0x120>)
 800b54c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b550:	6593      	str	r3, [r2, #88]	@ 0x58
 800b552:	e001      	b.n	800b558 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b554:	f7f9 fe92 	bl	800527c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b558:	2200      	movs	r2, #0
 800b55a:	2100      	movs	r1, #0
 800b55c:	2043      	movs	r0, #67	@ 0x43
 800b55e:	f7f8 f976 	bl	800384e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b562:	2043      	movs	r0, #67	@ 0x43
 800b564:	f7f8 f98f 	bl	8003886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b568:	bf00      	nop
 800b56a:	37b0      	adds	r7, #176	@ 0xb0
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	40021000 	.word	0x40021000

0800b574 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800b588:	4619      	mov	r1, r3
 800b58a:	4610      	mov	r0, r2
 800b58c:	f7fe fa53 	bl	8009a36 <USBD_LL_SetupStage>
}
 800b590:	bf00      	nop
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b5aa:	78fa      	ldrb	r2, [r7, #3]
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	00db      	lsls	r3, r3, #3
 800b5b2:	4413      	add	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	440b      	add	r3, r1
 800b5b8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	78fb      	ldrb	r3, [r7, #3]
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	f7fe fa8d 	bl	8009ae0 <USBD_LL_DataOutStage>
}
 800b5c6:	bf00      	nop
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ce:	b580      	push	{r7, lr}
 800b5d0:	b082      	sub	sp, #8
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800b5e0:	78fa      	ldrb	r2, [r7, #3]
 800b5e2:	6879      	ldr	r1, [r7, #4]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	4413      	add	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	3348      	adds	r3, #72	@ 0x48
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	78fb      	ldrb	r3, [r7, #3]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f7fe fb26 	bl	8009c46 <USBD_LL_DataInStage>
}
 800b5fa:	bf00      	nop
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b610:	4618      	mov	r0, r3
 800b612:	f7fe fc60 	bl	8009ed6 <USBD_LL_SOF>
}
 800b616:	bf00      	nop
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}

0800b61e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b084      	sub	sp, #16
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b626:	2301      	movs	r3, #1
 800b628:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d001      	beq.n	800b636 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b632:	f7f7 f9fb 	bl	8002a2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b63c:	7bfa      	ldrb	r2, [r7, #15]
 800b63e:	4611      	mov	r1, r2
 800b640:	4618      	mov	r0, r3
 800b642:	f7fe fc04 	bl	8009e4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b64c:	4618      	mov	r0, r3
 800b64e:	f7fe fbac 	bl	8009daa <USBD_LL_Reset>
}
 800b652:	bf00      	nop
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
	...

0800b65c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	6812      	ldr	r2, [r2, #0]
 800b672:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b676:	f043 0301 	orr.w	r3, r3, #1
 800b67a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fbf3 	bl	8009e6e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a1b      	ldr	r3, [r3, #32]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d005      	beq.n	800b69c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b690:	4b04      	ldr	r3, [pc, #16]	@ (800b6a4 <HAL_PCD_SuspendCallback+0x48>)
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	4a03      	ldr	r2, [pc, #12]	@ (800b6a4 <HAL_PCD_SuspendCallback+0x48>)
 800b696:	f043 0306 	orr.w	r3, r3, #6
 800b69a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b69c:	bf00      	nop
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	e000ed00 	.word	0xe000ed00

0800b6a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	6812      	ldr	r2, [r2, #0]
 800b6be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b6c2:	f023 0301 	bic.w	r3, r3, #1
 800b6c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d007      	beq.n	800b6e0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6d0:	4b08      	ldr	r3, [pc, #32]	@ (800b6f4 <HAL_PCD_ResumeCallback+0x4c>)
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	4a07      	ldr	r2, [pc, #28]	@ (800b6f4 <HAL_PCD_ResumeCallback+0x4c>)
 800b6d6:	f023 0306 	bic.w	r3, r3, #6
 800b6da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b6dc:	f000 faf6 	bl	800bccc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fe fbdd 	bl	8009ea6 <USBD_LL_Resume>
}
 800b6ec:	bf00      	nop
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	e000ed00 	.word	0xe000ed00

0800b6f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	460b      	mov	r3, r1
 800b702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b70a:	78fa      	ldrb	r2, [r7, #3]
 800b70c:	4611      	mov	r1, r2
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe fc33 	bl	8009f7a <USBD_LL_IsoOUTIncomplete>
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b72e:	78fa      	ldrb	r2, [r7, #3]
 800b730:	4611      	mov	r1, r2
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe fbef 	bl	8009f16 <USBD_LL_IsoINIncomplete>
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe fc45 	bl	8009fde <USBD_LL_DevConnected>
}
 800b754:	bf00      	nop
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe fc42 	bl	8009ff4 <USBD_LL_DevDisconnected>
}
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d13c      	bne.n	800b802 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b788:	4a20      	ldr	r2, [pc, #128]	@ (800b80c <USBD_LL_Init+0x94>)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a1e      	ldr	r2, [pc, #120]	@ (800b80c <USBD_LL_Init+0x94>)
 800b794:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b798:	4b1c      	ldr	r3, [pc, #112]	@ (800b80c <USBD_LL_Init+0x94>)
 800b79a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b79e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b7a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7a2:	2206      	movs	r2, #6
 800b7a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b7a6:	4b19      	ldr	r3, [pc, #100]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b7ac:	4b17      	ldr	r3, [pc, #92]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b7b2:	4b16      	ldr	r3, [pc, #88]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b7b8:	4b14      	ldr	r3, [pc, #80]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b7be:	4b13      	ldr	r3, [pc, #76]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b7c4:	4b11      	ldr	r3, [pc, #68]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b7ca:	4b10      	ldr	r3, [pc, #64]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b7d0:	4b0e      	ldr	r3, [pc, #56]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b7d6:	480d      	ldr	r0, [pc, #52]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7d8:	f7f8 faa0 	bl	8003d1c <HAL_PCD_Init>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b7e2:	f7f7 f923 	bl	8002a2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b7e6:	2180      	movs	r1, #128	@ 0x80
 800b7e8:	4808      	ldr	r0, [pc, #32]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7ea:	f7f9 fc0a 	bl	8005002 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b7ee:	2240      	movs	r2, #64	@ 0x40
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	4806      	ldr	r0, [pc, #24]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7f4:	f7f9 fbbe 	bl	8004f74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b7f8:	2280      	movs	r2, #128	@ 0x80
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	4803      	ldr	r0, [pc, #12]	@ (800b80c <USBD_LL_Init+0x94>)
 800b7fe:	f7f9 fbb9 	bl	8004f74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3708      	adds	r7, #8
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	200028f8 	.word	0x200028f8

0800b810 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b818:	2300      	movs	r3, #0
 800b81a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b826:	4618      	mov	r0, r3
 800b828:	f7f8 fb9c 	bl	8003f64 <HAL_PCD_Start>
 800b82c:	4603      	mov	r3, r0
 800b82e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b830:	7bbb      	ldrb	r3, [r7, #14]
 800b832:	2b03      	cmp	r3, #3
 800b834:	d816      	bhi.n	800b864 <USBD_LL_Start+0x54>
 800b836:	a201      	add	r2, pc, #4	@ (adr r2, 800b83c <USBD_LL_Start+0x2c>)
 800b838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83c:	0800b84d 	.word	0x0800b84d
 800b840:	0800b853 	.word	0x0800b853
 800b844:	0800b859 	.word	0x0800b859
 800b848:	0800b85f 	.word	0x0800b85f
    case HAL_OK :
      usb_status = USBD_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	73fb      	strb	r3, [r7, #15]
    break;
 800b850:	e00b      	b.n	800b86a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b852:	2303      	movs	r3, #3
 800b854:	73fb      	strb	r3, [r7, #15]
    break;
 800b856:	e008      	b.n	800b86a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b858:	2301      	movs	r3, #1
 800b85a:	73fb      	strb	r3, [r7, #15]
    break;
 800b85c:	e005      	b.n	800b86a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b85e:	2303      	movs	r3, #3
 800b860:	73fb      	strb	r3, [r7, #15]
    break;
 800b862:	e002      	b.n	800b86a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b864:	2303      	movs	r3, #3
 800b866:	73fb      	strb	r3, [r7, #15]
    break;
 800b868:	bf00      	nop
  }
  return usb_status;
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	4608      	mov	r0, r1
 800b87e:	4611      	mov	r1, r2
 800b880:	461a      	mov	r2, r3
 800b882:	4603      	mov	r3, r0
 800b884:	70fb      	strb	r3, [r7, #3]
 800b886:	460b      	mov	r3, r1
 800b888:	70bb      	strb	r3, [r7, #2]
 800b88a:	4613      	mov	r3, r2
 800b88c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b88e:	2300      	movs	r3, #0
 800b890:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b89c:	78bb      	ldrb	r3, [r7, #2]
 800b89e:	883a      	ldrh	r2, [r7, #0]
 800b8a0:	78f9      	ldrb	r1, [r7, #3]
 800b8a2:	f7f9 f846 	bl	8004932 <HAL_PCD_EP_Open>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d817      	bhi.n	800b8e0 <USBD_LL_OpenEP+0x6c>
 800b8b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8b8 <USBD_LL_OpenEP+0x44>)
 800b8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b6:	bf00      	nop
 800b8b8:	0800b8c9 	.word	0x0800b8c9
 800b8bc:	0800b8cf 	.word	0x0800b8cf
 800b8c0:	0800b8d5 	.word	0x0800b8d5
 800b8c4:	0800b8db 	.word	0x0800b8db
    case HAL_OK :
      usb_status = USBD_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b8cc:	e00b      	b.n	800b8e6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8d2:	e008      	b.n	800b8e6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8d8:	e005      	b.n	800b8e6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b8de:	e002      	b.n	800b8e6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e4:	bf00      	nop
  }
  return usb_status;
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b90a:	78fa      	ldrb	r2, [r7, #3]
 800b90c:	4611      	mov	r1, r2
 800b90e:	4618      	mov	r0, r3
 800b910:	f7f9 f877 	bl	8004a02 <HAL_PCD_EP_Close>
 800b914:	4603      	mov	r3, r0
 800b916:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	2b03      	cmp	r3, #3
 800b91c:	d816      	bhi.n	800b94c <USBD_LL_CloseEP+0x5c>
 800b91e:	a201      	add	r2, pc, #4	@ (adr r2, 800b924 <USBD_LL_CloseEP+0x34>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b935 	.word	0x0800b935
 800b928:	0800b93b 	.word	0x0800b93b
 800b92c:	0800b941 	.word	0x0800b941
 800b930:	0800b947 	.word	0x0800b947
    case HAL_OK :
      usb_status = USBD_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
    break;
 800b938:	e00b      	b.n	800b952 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b93a:	2303      	movs	r3, #3
 800b93c:	73fb      	strb	r3, [r7, #15]
    break;
 800b93e:	e008      	b.n	800b952 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b940:	2301      	movs	r3, #1
 800b942:	73fb      	strb	r3, [r7, #15]
    break;
 800b944:	e005      	b.n	800b952 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b946:	2303      	movs	r3, #3
 800b948:	73fb      	strb	r3, [r7, #15]
    break;
 800b94a:	e002      	b.n	800b952 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b94c:	2303      	movs	r3, #3
 800b94e:	73fb      	strb	r3, [r7, #15]
    break;
 800b950:	bf00      	nop
  }
  return usb_status;
 800b952:	7bfb      	ldrb	r3, [r7, #15]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b968:	2300      	movs	r3, #0
 800b96a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b976:	78fa      	ldrb	r2, [r7, #3]
 800b978:	4611      	mov	r1, r2
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7f9 f906 	bl	8004b8c <HAL_PCD_EP_SetStall>
 800b980:	4603      	mov	r3, r0
 800b982:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	2b03      	cmp	r3, #3
 800b988:	d816      	bhi.n	800b9b8 <USBD_LL_StallEP+0x5c>
 800b98a:	a201      	add	r2, pc, #4	@ (adr r2, 800b990 <USBD_LL_StallEP+0x34>)
 800b98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b990:	0800b9a1 	.word	0x0800b9a1
 800b994:	0800b9a7 	.word	0x0800b9a7
 800b998:	0800b9ad 	.word	0x0800b9ad
 800b99c:	0800b9b3 	.word	0x0800b9b3
    case HAL_OK :
      usb_status = USBD_OK;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9a4:	e00b      	b.n	800b9be <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b9aa:	e008      	b.n	800b9be <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b0:	e005      	b.n	800b9be <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b9b6:	e002      	b.n	800b9be <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b9bc:	bf00      	nop
  }
  return usb_status;
 800b9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9e2:	78fa      	ldrb	r2, [r7, #3]
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7f9 f932 	bl	8004c50 <HAL_PCD_EP_ClrStall>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	2b03      	cmp	r3, #3
 800b9f4:	d816      	bhi.n	800ba24 <USBD_LL_ClearStallEP+0x5c>
 800b9f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9fc <USBD_LL_ClearStallEP+0x34>)
 800b9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fc:	0800ba0d 	.word	0x0800ba0d
 800ba00:	0800ba13 	.word	0x0800ba13
 800ba04:	0800ba19 	.word	0x0800ba19
 800ba08:	0800ba1f 	.word	0x0800ba1f
    case HAL_OK :
      usb_status = USBD_OK;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba10:	e00b      	b.n	800ba2a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba12:	2303      	movs	r3, #3
 800ba14:	73fb      	strb	r3, [r7, #15]
    break;
 800ba16:	e008      	b.n	800ba2a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba1c:	e005      	b.n	800ba2a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	73fb      	strb	r3, [r7, #15]
    break;
 800ba22:	e002      	b.n	800ba2a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba24:	2303      	movs	r3, #3
 800ba26:	73fb      	strb	r3, [r7, #15]
    break;
 800ba28:	bf00      	nop
  }
  return usb_status;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	da0b      	bge.n	800ba68 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba56:	68f9      	ldr	r1, [r7, #12]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	00db      	lsls	r3, r3, #3
 800ba5c:	4413      	add	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	440b      	add	r3, r1
 800ba62:	333e      	adds	r3, #62	@ 0x3e
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	e00b      	b.n	800ba80 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba6e:	68f9      	ldr	r1, [r7, #12]
 800ba70:	4613      	mov	r3, r2
 800ba72:	00db      	lsls	r3, r3, #3
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	440b      	add	r3, r1
 800ba7a:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800ba7e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	460b      	mov	r3, r1
 800ba96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800baa6:	78fa      	ldrb	r2, [r7, #3]
 800baa8:	4611      	mov	r1, r2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7f8 ff1c 	bl	80048e8 <HAL_PCD_SetAddress>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d816      	bhi.n	800bae8 <USBD_LL_SetUSBAddress+0x5c>
 800baba:	a201      	add	r2, pc, #4	@ (adr r2, 800bac0 <USBD_LL_SetUSBAddress+0x34>)
 800babc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac0:	0800bad1 	.word	0x0800bad1
 800bac4:	0800bad7 	.word	0x0800bad7
 800bac8:	0800badd 	.word	0x0800badd
 800bacc:	0800bae3 	.word	0x0800bae3
    case HAL_OK :
      usb_status = USBD_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73fb      	strb	r3, [r7, #15]
    break;
 800bad4:	e00b      	b.n	800baee <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bad6:	2303      	movs	r3, #3
 800bad8:	73fb      	strb	r3, [r7, #15]
    break;
 800bada:	e008      	b.n	800baee <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800badc:	2301      	movs	r3, #1
 800bade:	73fb      	strb	r3, [r7, #15]
    break;
 800bae0:	e005      	b.n	800baee <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bae2:	2303      	movs	r3, #3
 800bae4:	73fb      	strb	r3, [r7, #15]
    break;
 800bae6:	e002      	b.n	800baee <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bae8:	2303      	movs	r3, #3
 800baea:	73fb      	strb	r3, [r7, #15]
    break;
 800baec:	bf00      	nop
  }
  return usb_status;
 800baee:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	603b      	str	r3, [r7, #0]
 800bb04:	460b      	mov	r3, r1
 800bb06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb16:	7af9      	ldrb	r1, [r7, #11]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	f7f9 f805 	bl	8004b2a <HAL_PCD_EP_Transmit>
 800bb20:	4603      	mov	r3, r0
 800bb22:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bb24:	7dbb      	ldrb	r3, [r7, #22]
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d816      	bhi.n	800bb58 <USBD_LL_Transmit+0x60>
 800bb2a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb30 <USBD_LL_Transmit+0x38>)
 800bb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb30:	0800bb41 	.word	0x0800bb41
 800bb34:	0800bb47 	.word	0x0800bb47
 800bb38:	0800bb4d 	.word	0x0800bb4d
 800bb3c:	0800bb53 	.word	0x0800bb53
    case HAL_OK :
      usb_status = USBD_OK;
 800bb40:	2300      	movs	r3, #0
 800bb42:	75fb      	strb	r3, [r7, #23]
    break;
 800bb44:	e00b      	b.n	800bb5e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb46:	2303      	movs	r3, #3
 800bb48:	75fb      	strb	r3, [r7, #23]
    break;
 800bb4a:	e008      	b.n	800bb5e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	75fb      	strb	r3, [r7, #23]
    break;
 800bb50:	e005      	b.n	800bb5e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb52:	2303      	movs	r3, #3
 800bb54:	75fb      	strb	r3, [r7, #23]
    break;
 800bb56:	e002      	b.n	800bb5e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	75fb      	strb	r3, [r7, #23]
    break;
 800bb5c:	bf00      	nop
  }
  return usb_status;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	607a      	str	r2, [r7, #4]
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	460b      	mov	r3, r1
 800bb76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb86:	7af9      	ldrb	r1, [r7, #11]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	f7f8 ff83 	bl	8004a96 <HAL_PCD_EP_Receive>
 800bb90:	4603      	mov	r3, r0
 800bb92:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bb94:	7dbb      	ldrb	r3, [r7, #22]
 800bb96:	2b03      	cmp	r3, #3
 800bb98:	d816      	bhi.n	800bbc8 <USBD_LL_PrepareReceive+0x60>
 800bb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bba0 <USBD_LL_PrepareReceive+0x38>)
 800bb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba0:	0800bbb1 	.word	0x0800bbb1
 800bba4:	0800bbb7 	.word	0x0800bbb7
 800bba8:	0800bbbd 	.word	0x0800bbbd
 800bbac:	0800bbc3 	.word	0x0800bbc3
    case HAL_OK :
      usb_status = USBD_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	75fb      	strb	r3, [r7, #23]
    break;
 800bbb4:	e00b      	b.n	800bbce <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbb6:	2303      	movs	r3, #3
 800bbb8:	75fb      	strb	r3, [r7, #23]
    break;
 800bbba:	e008      	b.n	800bbce <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	75fb      	strb	r3, [r7, #23]
    break;
 800bbc0:	e005      	b.n	800bbce <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	75fb      	strb	r3, [r7, #23]
    break;
 800bbc6:	e002      	b.n	800bbce <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	75fb      	strb	r3, [r7, #23]
    break;
 800bbcc:	bf00      	nop
  }
  return usb_status;
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbea:	78fa      	ldrb	r2, [r7, #3]
 800bbec:	4611      	mov	r1, r2
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7f8 ff83 	bl	8004afa <HAL_PCD_EP_GetRxCount>
 800bbf4:	4603      	mov	r3, r0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
	...

0800bc00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bc0c:	78fb      	ldrb	r3, [r7, #3]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d002      	beq.n	800bc18 <HAL_PCDEx_LPM_Callback+0x18>
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d01f      	beq.n	800bc56 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bc16:	e03b      	b.n	800bc90 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6a1b      	ldr	r3, [r3, #32]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d007      	beq.n	800bc30 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bc20:	f000 f854 	bl	800bccc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc24:	4b1c      	ldr	r3, [pc, #112]	@ (800bc98 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	4a1b      	ldr	r2, [pc, #108]	@ (800bc98 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc2a:	f023 0306 	bic.w	r3, r3, #6
 800bc2e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	6812      	ldr	r2, [r2, #0]
 800bc3e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc42:	f023 0301 	bic.w	r3, r3, #1
 800bc46:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe f929 	bl	8009ea6 <USBD_LL_Resume>
    break;
 800bc54:	e01c      	b.n	800bc90 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	6812      	ldr	r2, [r2, #0]
 800bc64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc68:	f043 0301 	orr.w	r3, r3, #1
 800bc6c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fe f8fa 	bl	8009e6e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d005      	beq.n	800bc8e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc82:	4b05      	ldr	r3, [pc, #20]	@ (800bc98 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	4a04      	ldr	r2, [pc, #16]	@ (800bc98 <HAL_PCDEx_LPM_Callback+0x98>)
 800bc88:	f043 0306 	orr.w	r3, r3, #6
 800bc8c:	6113      	str	r3, [r2, #16]
    break;
 800bc8e:	bf00      	nop
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	e000ed00 	.word	0xe000ed00

0800bc9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bca4:	4b03      	ldr	r3, [pc, #12]	@ (800bcb4 <USBD_static_malloc+0x18>)
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	20002e04 	.word	0x20002e04

0800bcb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]

}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bcd0:	f7f6 fb07 	bl	80022e2 <SystemClock_Config>
}
 800bcd4:	bf00      	nop
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <malloc>:
 800bcd8:	4b02      	ldr	r3, [pc, #8]	@ (800bce4 <malloc+0xc>)
 800bcda:	4601      	mov	r1, r0
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	f000 b82d 	b.w	800bd3c <_malloc_r>
 800bce2:	bf00      	nop
 800bce4:	2000016c 	.word	0x2000016c

0800bce8 <free>:
 800bce8:	4b02      	ldr	r3, [pc, #8]	@ (800bcf4 <free+0xc>)
 800bcea:	4601      	mov	r1, r0
 800bcec:	6818      	ldr	r0, [r3, #0]
 800bcee:	f000 be23 	b.w	800c938 <_free_r>
 800bcf2:	bf00      	nop
 800bcf4:	2000016c 	.word	0x2000016c

0800bcf8 <sbrk_aligned>:
 800bcf8:	b570      	push	{r4, r5, r6, lr}
 800bcfa:	4e0f      	ldr	r6, [pc, #60]	@ (800bd38 <sbrk_aligned+0x40>)
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	6831      	ldr	r1, [r6, #0]
 800bd00:	4605      	mov	r5, r0
 800bd02:	b911      	cbnz	r1, 800bd0a <sbrk_aligned+0x12>
 800bd04:	f000 fda4 	bl	800c850 <_sbrk_r>
 800bd08:	6030      	str	r0, [r6, #0]
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	f000 fd9f 	bl	800c850 <_sbrk_r>
 800bd12:	1c43      	adds	r3, r0, #1
 800bd14:	d103      	bne.n	800bd1e <sbrk_aligned+0x26>
 800bd16:	f04f 34ff 	mov.w	r4, #4294967295
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	bd70      	pop	{r4, r5, r6, pc}
 800bd1e:	1cc4      	adds	r4, r0, #3
 800bd20:	f024 0403 	bic.w	r4, r4, #3
 800bd24:	42a0      	cmp	r0, r4
 800bd26:	d0f8      	beq.n	800bd1a <sbrk_aligned+0x22>
 800bd28:	1a21      	subs	r1, r4, r0
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	f000 fd90 	bl	800c850 <_sbrk_r>
 800bd30:	3001      	adds	r0, #1
 800bd32:	d1f2      	bne.n	800bd1a <sbrk_aligned+0x22>
 800bd34:	e7ef      	b.n	800bd16 <sbrk_aligned+0x1e>
 800bd36:	bf00      	nop
 800bd38:	20003024 	.word	0x20003024

0800bd3c <_malloc_r>:
 800bd3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd40:	1ccd      	adds	r5, r1, #3
 800bd42:	f025 0503 	bic.w	r5, r5, #3
 800bd46:	3508      	adds	r5, #8
 800bd48:	2d0c      	cmp	r5, #12
 800bd4a:	bf38      	it	cc
 800bd4c:	250c      	movcc	r5, #12
 800bd4e:	2d00      	cmp	r5, #0
 800bd50:	4606      	mov	r6, r0
 800bd52:	db01      	blt.n	800bd58 <_malloc_r+0x1c>
 800bd54:	42a9      	cmp	r1, r5
 800bd56:	d904      	bls.n	800bd62 <_malloc_r+0x26>
 800bd58:	230c      	movs	r3, #12
 800bd5a:	6033      	str	r3, [r6, #0]
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be38 <_malloc_r+0xfc>
 800bd66:	f000 f869 	bl	800be3c <__malloc_lock>
 800bd6a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd6e:	461c      	mov	r4, r3
 800bd70:	bb44      	cbnz	r4, 800bdc4 <_malloc_r+0x88>
 800bd72:	4629      	mov	r1, r5
 800bd74:	4630      	mov	r0, r6
 800bd76:	f7ff ffbf 	bl	800bcf8 <sbrk_aligned>
 800bd7a:	1c43      	adds	r3, r0, #1
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	d158      	bne.n	800be32 <_malloc_r+0xf6>
 800bd80:	f8d8 4000 	ldr.w	r4, [r8]
 800bd84:	4627      	mov	r7, r4
 800bd86:	2f00      	cmp	r7, #0
 800bd88:	d143      	bne.n	800be12 <_malloc_r+0xd6>
 800bd8a:	2c00      	cmp	r4, #0
 800bd8c:	d04b      	beq.n	800be26 <_malloc_r+0xea>
 800bd8e:	6823      	ldr	r3, [r4, #0]
 800bd90:	4639      	mov	r1, r7
 800bd92:	4630      	mov	r0, r6
 800bd94:	eb04 0903 	add.w	r9, r4, r3
 800bd98:	f000 fd5a 	bl	800c850 <_sbrk_r>
 800bd9c:	4581      	cmp	r9, r0
 800bd9e:	d142      	bne.n	800be26 <_malloc_r+0xea>
 800bda0:	6821      	ldr	r1, [r4, #0]
 800bda2:	1a6d      	subs	r5, r5, r1
 800bda4:	4629      	mov	r1, r5
 800bda6:	4630      	mov	r0, r6
 800bda8:	f7ff ffa6 	bl	800bcf8 <sbrk_aligned>
 800bdac:	3001      	adds	r0, #1
 800bdae:	d03a      	beq.n	800be26 <_malloc_r+0xea>
 800bdb0:	6823      	ldr	r3, [r4, #0]
 800bdb2:	442b      	add	r3, r5
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	f8d8 3000 	ldr.w	r3, [r8]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	bb62      	cbnz	r2, 800be18 <_malloc_r+0xdc>
 800bdbe:	f8c8 7000 	str.w	r7, [r8]
 800bdc2:	e00f      	b.n	800bde4 <_malloc_r+0xa8>
 800bdc4:	6822      	ldr	r2, [r4, #0]
 800bdc6:	1b52      	subs	r2, r2, r5
 800bdc8:	d420      	bmi.n	800be0c <_malloc_r+0xd0>
 800bdca:	2a0b      	cmp	r2, #11
 800bdcc:	d917      	bls.n	800bdfe <_malloc_r+0xc2>
 800bdce:	1961      	adds	r1, r4, r5
 800bdd0:	42a3      	cmp	r3, r4
 800bdd2:	6025      	str	r5, [r4, #0]
 800bdd4:	bf18      	it	ne
 800bdd6:	6059      	strne	r1, [r3, #4]
 800bdd8:	6863      	ldr	r3, [r4, #4]
 800bdda:	bf08      	it	eq
 800bddc:	f8c8 1000 	streq.w	r1, [r8]
 800bde0:	5162      	str	r2, [r4, r5]
 800bde2:	604b      	str	r3, [r1, #4]
 800bde4:	4630      	mov	r0, r6
 800bde6:	f000 f82f 	bl	800be48 <__malloc_unlock>
 800bdea:	f104 000b 	add.w	r0, r4, #11
 800bdee:	1d23      	adds	r3, r4, #4
 800bdf0:	f020 0007 	bic.w	r0, r0, #7
 800bdf4:	1ac2      	subs	r2, r0, r3
 800bdf6:	bf1c      	itt	ne
 800bdf8:	1a1b      	subne	r3, r3, r0
 800bdfa:	50a3      	strne	r3, [r4, r2]
 800bdfc:	e7af      	b.n	800bd5e <_malloc_r+0x22>
 800bdfe:	6862      	ldr	r2, [r4, #4]
 800be00:	42a3      	cmp	r3, r4
 800be02:	bf0c      	ite	eq
 800be04:	f8c8 2000 	streq.w	r2, [r8]
 800be08:	605a      	strne	r2, [r3, #4]
 800be0a:	e7eb      	b.n	800bde4 <_malloc_r+0xa8>
 800be0c:	4623      	mov	r3, r4
 800be0e:	6864      	ldr	r4, [r4, #4]
 800be10:	e7ae      	b.n	800bd70 <_malloc_r+0x34>
 800be12:	463c      	mov	r4, r7
 800be14:	687f      	ldr	r7, [r7, #4]
 800be16:	e7b6      	b.n	800bd86 <_malloc_r+0x4a>
 800be18:	461a      	mov	r2, r3
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	42a3      	cmp	r3, r4
 800be1e:	d1fb      	bne.n	800be18 <_malloc_r+0xdc>
 800be20:	2300      	movs	r3, #0
 800be22:	6053      	str	r3, [r2, #4]
 800be24:	e7de      	b.n	800bde4 <_malloc_r+0xa8>
 800be26:	230c      	movs	r3, #12
 800be28:	6033      	str	r3, [r6, #0]
 800be2a:	4630      	mov	r0, r6
 800be2c:	f000 f80c 	bl	800be48 <__malloc_unlock>
 800be30:	e794      	b.n	800bd5c <_malloc_r+0x20>
 800be32:	6005      	str	r5, [r0, #0]
 800be34:	e7d6      	b.n	800bde4 <_malloc_r+0xa8>
 800be36:	bf00      	nop
 800be38:	20003028 	.word	0x20003028

0800be3c <__malloc_lock>:
 800be3c:	4801      	ldr	r0, [pc, #4]	@ (800be44 <__malloc_lock+0x8>)
 800be3e:	f000 bd54 	b.w	800c8ea <__retarget_lock_acquire_recursive>
 800be42:	bf00      	nop
 800be44:	2000316c 	.word	0x2000316c

0800be48 <__malloc_unlock>:
 800be48:	4801      	ldr	r0, [pc, #4]	@ (800be50 <__malloc_unlock+0x8>)
 800be4a:	f000 bd4f 	b.w	800c8ec <__retarget_lock_release_recursive>
 800be4e:	bf00      	nop
 800be50:	2000316c 	.word	0x2000316c

0800be54 <_strtol_l.constprop.0>:
 800be54:	2b24      	cmp	r3, #36	@ 0x24
 800be56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be5a:	4686      	mov	lr, r0
 800be5c:	4690      	mov	r8, r2
 800be5e:	d801      	bhi.n	800be64 <_strtol_l.constprop.0+0x10>
 800be60:	2b01      	cmp	r3, #1
 800be62:	d106      	bne.n	800be72 <_strtol_l.constprop.0+0x1e>
 800be64:	f000 fd16 	bl	800c894 <__errno>
 800be68:	2316      	movs	r3, #22
 800be6a:	6003      	str	r3, [r0, #0]
 800be6c:	2000      	movs	r0, #0
 800be6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be72:	4834      	ldr	r0, [pc, #208]	@ (800bf44 <_strtol_l.constprop.0+0xf0>)
 800be74:	460d      	mov	r5, r1
 800be76:	462a      	mov	r2, r5
 800be78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be7c:	5d06      	ldrb	r6, [r0, r4]
 800be7e:	f016 0608 	ands.w	r6, r6, #8
 800be82:	d1f8      	bne.n	800be76 <_strtol_l.constprop.0+0x22>
 800be84:	2c2d      	cmp	r4, #45	@ 0x2d
 800be86:	d12d      	bne.n	800bee4 <_strtol_l.constprop.0+0x90>
 800be88:	782c      	ldrb	r4, [r5, #0]
 800be8a:	2601      	movs	r6, #1
 800be8c:	1c95      	adds	r5, r2, #2
 800be8e:	f033 0210 	bics.w	r2, r3, #16
 800be92:	d109      	bne.n	800bea8 <_strtol_l.constprop.0+0x54>
 800be94:	2c30      	cmp	r4, #48	@ 0x30
 800be96:	d12a      	bne.n	800beee <_strtol_l.constprop.0+0x9a>
 800be98:	782a      	ldrb	r2, [r5, #0]
 800be9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800be9e:	2a58      	cmp	r2, #88	@ 0x58
 800bea0:	d125      	bne.n	800beee <_strtol_l.constprop.0+0x9a>
 800bea2:	786c      	ldrb	r4, [r5, #1]
 800bea4:	2310      	movs	r3, #16
 800bea6:	3502      	adds	r5, #2
 800bea8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800beac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800beb0:	2200      	movs	r2, #0
 800beb2:	fbbc f9f3 	udiv	r9, ip, r3
 800beb6:	4610      	mov	r0, r2
 800beb8:	fb03 ca19 	mls	sl, r3, r9, ip
 800bebc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bec0:	2f09      	cmp	r7, #9
 800bec2:	d81b      	bhi.n	800befc <_strtol_l.constprop.0+0xa8>
 800bec4:	463c      	mov	r4, r7
 800bec6:	42a3      	cmp	r3, r4
 800bec8:	dd27      	ble.n	800bf1a <_strtol_l.constprop.0+0xc6>
 800beca:	1c57      	adds	r7, r2, #1
 800becc:	d007      	beq.n	800bede <_strtol_l.constprop.0+0x8a>
 800bece:	4581      	cmp	r9, r0
 800bed0:	d320      	bcc.n	800bf14 <_strtol_l.constprop.0+0xc0>
 800bed2:	d101      	bne.n	800bed8 <_strtol_l.constprop.0+0x84>
 800bed4:	45a2      	cmp	sl, r4
 800bed6:	db1d      	blt.n	800bf14 <_strtol_l.constprop.0+0xc0>
 800bed8:	fb00 4003 	mla	r0, r0, r3, r4
 800bedc:	2201      	movs	r2, #1
 800bede:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bee2:	e7eb      	b.n	800bebc <_strtol_l.constprop.0+0x68>
 800bee4:	2c2b      	cmp	r4, #43	@ 0x2b
 800bee6:	bf04      	itt	eq
 800bee8:	782c      	ldrbeq	r4, [r5, #0]
 800beea:	1c95      	addeq	r5, r2, #2
 800beec:	e7cf      	b.n	800be8e <_strtol_l.constprop.0+0x3a>
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1da      	bne.n	800bea8 <_strtol_l.constprop.0+0x54>
 800bef2:	2c30      	cmp	r4, #48	@ 0x30
 800bef4:	bf0c      	ite	eq
 800bef6:	2308      	moveq	r3, #8
 800bef8:	230a      	movne	r3, #10
 800befa:	e7d5      	b.n	800bea8 <_strtol_l.constprop.0+0x54>
 800befc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf00:	2f19      	cmp	r7, #25
 800bf02:	d801      	bhi.n	800bf08 <_strtol_l.constprop.0+0xb4>
 800bf04:	3c37      	subs	r4, #55	@ 0x37
 800bf06:	e7de      	b.n	800bec6 <_strtol_l.constprop.0+0x72>
 800bf08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf0c:	2f19      	cmp	r7, #25
 800bf0e:	d804      	bhi.n	800bf1a <_strtol_l.constprop.0+0xc6>
 800bf10:	3c57      	subs	r4, #87	@ 0x57
 800bf12:	e7d8      	b.n	800bec6 <_strtol_l.constprop.0+0x72>
 800bf14:	f04f 32ff 	mov.w	r2, #4294967295
 800bf18:	e7e1      	b.n	800bede <_strtol_l.constprop.0+0x8a>
 800bf1a:	1c53      	adds	r3, r2, #1
 800bf1c:	d108      	bne.n	800bf30 <_strtol_l.constprop.0+0xdc>
 800bf1e:	2322      	movs	r3, #34	@ 0x22
 800bf20:	f8ce 3000 	str.w	r3, [lr]
 800bf24:	4660      	mov	r0, ip
 800bf26:	f1b8 0f00 	cmp.w	r8, #0
 800bf2a:	d0a0      	beq.n	800be6e <_strtol_l.constprop.0+0x1a>
 800bf2c:	1e69      	subs	r1, r5, #1
 800bf2e:	e006      	b.n	800bf3e <_strtol_l.constprop.0+0xea>
 800bf30:	b106      	cbz	r6, 800bf34 <_strtol_l.constprop.0+0xe0>
 800bf32:	4240      	negs	r0, r0
 800bf34:	f1b8 0f00 	cmp.w	r8, #0
 800bf38:	d099      	beq.n	800be6e <_strtol_l.constprop.0+0x1a>
 800bf3a:	2a00      	cmp	r2, #0
 800bf3c:	d1f6      	bne.n	800bf2c <_strtol_l.constprop.0+0xd8>
 800bf3e:	f8c8 1000 	str.w	r1, [r8]
 800bf42:	e794      	b.n	800be6e <_strtol_l.constprop.0+0x1a>
 800bf44:	0800ffa9 	.word	0x0800ffa9

0800bf48 <_strtol_r>:
 800bf48:	f7ff bf84 	b.w	800be54 <_strtol_l.constprop.0>

0800bf4c <strtol>:
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	460a      	mov	r2, r1
 800bf50:	4601      	mov	r1, r0
 800bf52:	4802      	ldr	r0, [pc, #8]	@ (800bf5c <strtol+0x10>)
 800bf54:	6800      	ldr	r0, [r0, #0]
 800bf56:	f7ff bf7d 	b.w	800be54 <_strtol_l.constprop.0>
 800bf5a:	bf00      	nop
 800bf5c:	2000016c 	.word	0x2000016c

0800bf60 <_strtoul_l.constprop.0>:
 800bf60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf64:	4e34      	ldr	r6, [pc, #208]	@ (800c038 <_strtoul_l.constprop.0+0xd8>)
 800bf66:	4686      	mov	lr, r0
 800bf68:	460d      	mov	r5, r1
 800bf6a:	4628      	mov	r0, r5
 800bf6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf70:	5d37      	ldrb	r7, [r6, r4]
 800bf72:	f017 0708 	ands.w	r7, r7, #8
 800bf76:	d1f8      	bne.n	800bf6a <_strtoul_l.constprop.0+0xa>
 800bf78:	2c2d      	cmp	r4, #45	@ 0x2d
 800bf7a:	d12f      	bne.n	800bfdc <_strtoul_l.constprop.0+0x7c>
 800bf7c:	782c      	ldrb	r4, [r5, #0]
 800bf7e:	2701      	movs	r7, #1
 800bf80:	1c85      	adds	r5, r0, #2
 800bf82:	f033 0010 	bics.w	r0, r3, #16
 800bf86:	d109      	bne.n	800bf9c <_strtoul_l.constprop.0+0x3c>
 800bf88:	2c30      	cmp	r4, #48	@ 0x30
 800bf8a:	d12c      	bne.n	800bfe6 <_strtoul_l.constprop.0+0x86>
 800bf8c:	7828      	ldrb	r0, [r5, #0]
 800bf8e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800bf92:	2858      	cmp	r0, #88	@ 0x58
 800bf94:	d127      	bne.n	800bfe6 <_strtoul_l.constprop.0+0x86>
 800bf96:	786c      	ldrb	r4, [r5, #1]
 800bf98:	2310      	movs	r3, #16
 800bf9a:	3502      	adds	r5, #2
 800bf9c:	f04f 38ff 	mov.w	r8, #4294967295
 800bfa0:	2600      	movs	r6, #0
 800bfa2:	fbb8 f8f3 	udiv	r8, r8, r3
 800bfa6:	fb03 f908 	mul.w	r9, r3, r8
 800bfaa:	ea6f 0909 	mvn.w	r9, r9
 800bfae:	4630      	mov	r0, r6
 800bfb0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bfb4:	f1bc 0f09 	cmp.w	ip, #9
 800bfb8:	d81c      	bhi.n	800bff4 <_strtoul_l.constprop.0+0x94>
 800bfba:	4664      	mov	r4, ip
 800bfbc:	42a3      	cmp	r3, r4
 800bfbe:	dd2a      	ble.n	800c016 <_strtoul_l.constprop.0+0xb6>
 800bfc0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800bfc4:	d007      	beq.n	800bfd6 <_strtoul_l.constprop.0+0x76>
 800bfc6:	4580      	cmp	r8, r0
 800bfc8:	d322      	bcc.n	800c010 <_strtoul_l.constprop.0+0xb0>
 800bfca:	d101      	bne.n	800bfd0 <_strtoul_l.constprop.0+0x70>
 800bfcc:	45a1      	cmp	r9, r4
 800bfce:	db1f      	blt.n	800c010 <_strtoul_l.constprop.0+0xb0>
 800bfd0:	fb00 4003 	mla	r0, r0, r3, r4
 800bfd4:	2601      	movs	r6, #1
 800bfd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfda:	e7e9      	b.n	800bfb0 <_strtoul_l.constprop.0+0x50>
 800bfdc:	2c2b      	cmp	r4, #43	@ 0x2b
 800bfde:	bf04      	itt	eq
 800bfe0:	782c      	ldrbeq	r4, [r5, #0]
 800bfe2:	1c85      	addeq	r5, r0, #2
 800bfe4:	e7cd      	b.n	800bf82 <_strtoul_l.constprop.0+0x22>
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1d8      	bne.n	800bf9c <_strtoul_l.constprop.0+0x3c>
 800bfea:	2c30      	cmp	r4, #48	@ 0x30
 800bfec:	bf0c      	ite	eq
 800bfee:	2308      	moveq	r3, #8
 800bff0:	230a      	movne	r3, #10
 800bff2:	e7d3      	b.n	800bf9c <_strtoul_l.constprop.0+0x3c>
 800bff4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bff8:	f1bc 0f19 	cmp.w	ip, #25
 800bffc:	d801      	bhi.n	800c002 <_strtoul_l.constprop.0+0xa2>
 800bffe:	3c37      	subs	r4, #55	@ 0x37
 800c000:	e7dc      	b.n	800bfbc <_strtoul_l.constprop.0+0x5c>
 800c002:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c006:	f1bc 0f19 	cmp.w	ip, #25
 800c00a:	d804      	bhi.n	800c016 <_strtoul_l.constprop.0+0xb6>
 800c00c:	3c57      	subs	r4, #87	@ 0x57
 800c00e:	e7d5      	b.n	800bfbc <_strtoul_l.constprop.0+0x5c>
 800c010:	f04f 36ff 	mov.w	r6, #4294967295
 800c014:	e7df      	b.n	800bfd6 <_strtoul_l.constprop.0+0x76>
 800c016:	1c73      	adds	r3, r6, #1
 800c018:	d106      	bne.n	800c028 <_strtoul_l.constprop.0+0xc8>
 800c01a:	2322      	movs	r3, #34	@ 0x22
 800c01c:	f8ce 3000 	str.w	r3, [lr]
 800c020:	4630      	mov	r0, r6
 800c022:	b932      	cbnz	r2, 800c032 <_strtoul_l.constprop.0+0xd2>
 800c024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c028:	b107      	cbz	r7, 800c02c <_strtoul_l.constprop.0+0xcc>
 800c02a:	4240      	negs	r0, r0
 800c02c:	2a00      	cmp	r2, #0
 800c02e:	d0f9      	beq.n	800c024 <_strtoul_l.constprop.0+0xc4>
 800c030:	b106      	cbz	r6, 800c034 <_strtoul_l.constprop.0+0xd4>
 800c032:	1e69      	subs	r1, r5, #1
 800c034:	6011      	str	r1, [r2, #0]
 800c036:	e7f5      	b.n	800c024 <_strtoul_l.constprop.0+0xc4>
 800c038:	0800ffa9 	.word	0x0800ffa9

0800c03c <_strtoul_r>:
 800c03c:	f7ff bf90 	b.w	800bf60 <_strtoul_l.constprop.0>

0800c040 <strtoul>:
 800c040:	4613      	mov	r3, r2
 800c042:	460a      	mov	r2, r1
 800c044:	4601      	mov	r1, r0
 800c046:	4802      	ldr	r0, [pc, #8]	@ (800c050 <strtoul+0x10>)
 800c048:	6800      	ldr	r0, [r0, #0]
 800c04a:	f7ff bf89 	b.w	800bf60 <_strtoul_l.constprop.0>
 800c04e:	bf00      	nop
 800c050:	2000016c 	.word	0x2000016c

0800c054 <_scanf_float>:
 800c054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c058:	b087      	sub	sp, #28
 800c05a:	4617      	mov	r7, r2
 800c05c:	9303      	str	r3, [sp, #12]
 800c05e:	688b      	ldr	r3, [r1, #8]
 800c060:	1e5a      	subs	r2, r3, #1
 800c062:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c066:	bf81      	itttt	hi
 800c068:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c06c:	eb03 0b05 	addhi.w	fp, r3, r5
 800c070:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c074:	608b      	strhi	r3, [r1, #8]
 800c076:	680b      	ldr	r3, [r1, #0]
 800c078:	460a      	mov	r2, r1
 800c07a:	f04f 0500 	mov.w	r5, #0
 800c07e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c082:	f842 3b1c 	str.w	r3, [r2], #28
 800c086:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c08a:	4680      	mov	r8, r0
 800c08c:	460c      	mov	r4, r1
 800c08e:	bf98      	it	ls
 800c090:	f04f 0b00 	movls.w	fp, #0
 800c094:	9201      	str	r2, [sp, #4]
 800c096:	4616      	mov	r6, r2
 800c098:	46aa      	mov	sl, r5
 800c09a:	46a9      	mov	r9, r5
 800c09c:	9502      	str	r5, [sp, #8]
 800c09e:	68a2      	ldr	r2, [r4, #8]
 800c0a0:	b152      	cbz	r2, 800c0b8 <_scanf_float+0x64>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2b4e      	cmp	r3, #78	@ 0x4e
 800c0a8:	d864      	bhi.n	800c174 <_scanf_float+0x120>
 800c0aa:	2b40      	cmp	r3, #64	@ 0x40
 800c0ac:	d83c      	bhi.n	800c128 <_scanf_float+0xd4>
 800c0ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c0b2:	b2c8      	uxtb	r0, r1
 800c0b4:	280e      	cmp	r0, #14
 800c0b6:	d93a      	bls.n	800c12e <_scanf_float+0xda>
 800c0b8:	f1b9 0f00 	cmp.w	r9, #0
 800c0bc:	d003      	beq.n	800c0c6 <_scanf_float+0x72>
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0ca:	f1ba 0f01 	cmp.w	sl, #1
 800c0ce:	f200 8117 	bhi.w	800c300 <_scanf_float+0x2ac>
 800c0d2:	9b01      	ldr	r3, [sp, #4]
 800c0d4:	429e      	cmp	r6, r3
 800c0d6:	f200 8108 	bhi.w	800c2ea <_scanf_float+0x296>
 800c0da:	2001      	movs	r0, #1
 800c0dc:	b007      	add	sp, #28
 800c0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c0e6:	2a0d      	cmp	r2, #13
 800c0e8:	d8e6      	bhi.n	800c0b8 <_scanf_float+0x64>
 800c0ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c0f0 <_scanf_float+0x9c>)
 800c0ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0f0:	0800c237 	.word	0x0800c237
 800c0f4:	0800c0b9 	.word	0x0800c0b9
 800c0f8:	0800c0b9 	.word	0x0800c0b9
 800c0fc:	0800c0b9 	.word	0x0800c0b9
 800c100:	0800c297 	.word	0x0800c297
 800c104:	0800c26f 	.word	0x0800c26f
 800c108:	0800c0b9 	.word	0x0800c0b9
 800c10c:	0800c0b9 	.word	0x0800c0b9
 800c110:	0800c245 	.word	0x0800c245
 800c114:	0800c0b9 	.word	0x0800c0b9
 800c118:	0800c0b9 	.word	0x0800c0b9
 800c11c:	0800c0b9 	.word	0x0800c0b9
 800c120:	0800c0b9 	.word	0x0800c0b9
 800c124:	0800c1fd 	.word	0x0800c1fd
 800c128:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c12c:	e7db      	b.n	800c0e6 <_scanf_float+0x92>
 800c12e:	290e      	cmp	r1, #14
 800c130:	d8c2      	bhi.n	800c0b8 <_scanf_float+0x64>
 800c132:	a001      	add	r0, pc, #4	@ (adr r0, 800c138 <_scanf_float+0xe4>)
 800c134:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c138:	0800c1ed 	.word	0x0800c1ed
 800c13c:	0800c0b9 	.word	0x0800c0b9
 800c140:	0800c1ed 	.word	0x0800c1ed
 800c144:	0800c283 	.word	0x0800c283
 800c148:	0800c0b9 	.word	0x0800c0b9
 800c14c:	0800c195 	.word	0x0800c195
 800c150:	0800c1d3 	.word	0x0800c1d3
 800c154:	0800c1d3 	.word	0x0800c1d3
 800c158:	0800c1d3 	.word	0x0800c1d3
 800c15c:	0800c1d3 	.word	0x0800c1d3
 800c160:	0800c1d3 	.word	0x0800c1d3
 800c164:	0800c1d3 	.word	0x0800c1d3
 800c168:	0800c1d3 	.word	0x0800c1d3
 800c16c:	0800c1d3 	.word	0x0800c1d3
 800c170:	0800c1d3 	.word	0x0800c1d3
 800c174:	2b6e      	cmp	r3, #110	@ 0x6e
 800c176:	d809      	bhi.n	800c18c <_scanf_float+0x138>
 800c178:	2b60      	cmp	r3, #96	@ 0x60
 800c17a:	d8b2      	bhi.n	800c0e2 <_scanf_float+0x8e>
 800c17c:	2b54      	cmp	r3, #84	@ 0x54
 800c17e:	d07b      	beq.n	800c278 <_scanf_float+0x224>
 800c180:	2b59      	cmp	r3, #89	@ 0x59
 800c182:	d199      	bne.n	800c0b8 <_scanf_float+0x64>
 800c184:	2d07      	cmp	r5, #7
 800c186:	d197      	bne.n	800c0b8 <_scanf_float+0x64>
 800c188:	2508      	movs	r5, #8
 800c18a:	e02c      	b.n	800c1e6 <_scanf_float+0x192>
 800c18c:	2b74      	cmp	r3, #116	@ 0x74
 800c18e:	d073      	beq.n	800c278 <_scanf_float+0x224>
 800c190:	2b79      	cmp	r3, #121	@ 0x79
 800c192:	e7f6      	b.n	800c182 <_scanf_float+0x12e>
 800c194:	6821      	ldr	r1, [r4, #0]
 800c196:	05c8      	lsls	r0, r1, #23
 800c198:	d51b      	bpl.n	800c1d2 <_scanf_float+0x17e>
 800c19a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c19e:	6021      	str	r1, [r4, #0]
 800c1a0:	f109 0901 	add.w	r9, r9, #1
 800c1a4:	f1bb 0f00 	cmp.w	fp, #0
 800c1a8:	d003      	beq.n	800c1b2 <_scanf_float+0x15e>
 800c1aa:	3201      	adds	r2, #1
 800c1ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1b0:	60a2      	str	r2, [r4, #8]
 800c1b2:	68a3      	ldr	r3, [r4, #8]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	60a3      	str	r3, [r4, #8]
 800c1b8:	6923      	ldr	r3, [r4, #16]
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	6123      	str	r3, [r4, #16]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	607b      	str	r3, [r7, #4]
 800c1c6:	f340 8087 	ble.w	800c2d8 <_scanf_float+0x284>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	603b      	str	r3, [r7, #0]
 800c1d0:	e765      	b.n	800c09e <_scanf_float+0x4a>
 800c1d2:	eb1a 0105 	adds.w	r1, sl, r5
 800c1d6:	f47f af6f 	bne.w	800c0b8 <_scanf_float+0x64>
 800c1da:	6822      	ldr	r2, [r4, #0]
 800c1dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c1e0:	6022      	str	r2, [r4, #0]
 800c1e2:	460d      	mov	r5, r1
 800c1e4:	468a      	mov	sl, r1
 800c1e6:	f806 3b01 	strb.w	r3, [r6], #1
 800c1ea:	e7e2      	b.n	800c1b2 <_scanf_float+0x15e>
 800c1ec:	6822      	ldr	r2, [r4, #0]
 800c1ee:	0610      	lsls	r0, r2, #24
 800c1f0:	f57f af62 	bpl.w	800c0b8 <_scanf_float+0x64>
 800c1f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c1f8:	6022      	str	r2, [r4, #0]
 800c1fa:	e7f4      	b.n	800c1e6 <_scanf_float+0x192>
 800c1fc:	f1ba 0f00 	cmp.w	sl, #0
 800c200:	d10e      	bne.n	800c220 <_scanf_float+0x1cc>
 800c202:	f1b9 0f00 	cmp.w	r9, #0
 800c206:	d10e      	bne.n	800c226 <_scanf_float+0x1d2>
 800c208:	6822      	ldr	r2, [r4, #0]
 800c20a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c20e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c212:	d108      	bne.n	800c226 <_scanf_float+0x1d2>
 800c214:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c218:	6022      	str	r2, [r4, #0]
 800c21a:	f04f 0a01 	mov.w	sl, #1
 800c21e:	e7e2      	b.n	800c1e6 <_scanf_float+0x192>
 800c220:	f1ba 0f02 	cmp.w	sl, #2
 800c224:	d055      	beq.n	800c2d2 <_scanf_float+0x27e>
 800c226:	2d01      	cmp	r5, #1
 800c228:	d002      	beq.n	800c230 <_scanf_float+0x1dc>
 800c22a:	2d04      	cmp	r5, #4
 800c22c:	f47f af44 	bne.w	800c0b8 <_scanf_float+0x64>
 800c230:	3501      	adds	r5, #1
 800c232:	b2ed      	uxtb	r5, r5
 800c234:	e7d7      	b.n	800c1e6 <_scanf_float+0x192>
 800c236:	f1ba 0f01 	cmp.w	sl, #1
 800c23a:	f47f af3d 	bne.w	800c0b8 <_scanf_float+0x64>
 800c23e:	f04f 0a02 	mov.w	sl, #2
 800c242:	e7d0      	b.n	800c1e6 <_scanf_float+0x192>
 800c244:	b97d      	cbnz	r5, 800c266 <_scanf_float+0x212>
 800c246:	f1b9 0f00 	cmp.w	r9, #0
 800c24a:	f47f af38 	bne.w	800c0be <_scanf_float+0x6a>
 800c24e:	6822      	ldr	r2, [r4, #0]
 800c250:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c254:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c258:	f040 8108 	bne.w	800c46c <_scanf_float+0x418>
 800c25c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c260:	6022      	str	r2, [r4, #0]
 800c262:	2501      	movs	r5, #1
 800c264:	e7bf      	b.n	800c1e6 <_scanf_float+0x192>
 800c266:	2d03      	cmp	r5, #3
 800c268:	d0e2      	beq.n	800c230 <_scanf_float+0x1dc>
 800c26a:	2d05      	cmp	r5, #5
 800c26c:	e7de      	b.n	800c22c <_scanf_float+0x1d8>
 800c26e:	2d02      	cmp	r5, #2
 800c270:	f47f af22 	bne.w	800c0b8 <_scanf_float+0x64>
 800c274:	2503      	movs	r5, #3
 800c276:	e7b6      	b.n	800c1e6 <_scanf_float+0x192>
 800c278:	2d06      	cmp	r5, #6
 800c27a:	f47f af1d 	bne.w	800c0b8 <_scanf_float+0x64>
 800c27e:	2507      	movs	r5, #7
 800c280:	e7b1      	b.n	800c1e6 <_scanf_float+0x192>
 800c282:	6822      	ldr	r2, [r4, #0]
 800c284:	0591      	lsls	r1, r2, #22
 800c286:	f57f af17 	bpl.w	800c0b8 <_scanf_float+0x64>
 800c28a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c28e:	6022      	str	r2, [r4, #0]
 800c290:	f8cd 9008 	str.w	r9, [sp, #8]
 800c294:	e7a7      	b.n	800c1e6 <_scanf_float+0x192>
 800c296:	6822      	ldr	r2, [r4, #0]
 800c298:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c29c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c2a0:	d006      	beq.n	800c2b0 <_scanf_float+0x25c>
 800c2a2:	0550      	lsls	r0, r2, #21
 800c2a4:	f57f af08 	bpl.w	800c0b8 <_scanf_float+0x64>
 800c2a8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ac:	f000 80de 	beq.w	800c46c <_scanf_float+0x418>
 800c2b0:	0591      	lsls	r1, r2, #22
 800c2b2:	bf58      	it	pl
 800c2b4:	9902      	ldrpl	r1, [sp, #8]
 800c2b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c2ba:	bf58      	it	pl
 800c2bc:	eba9 0101 	subpl.w	r1, r9, r1
 800c2c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c2c4:	bf58      	it	pl
 800c2c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c2ca:	6022      	str	r2, [r4, #0]
 800c2cc:	f04f 0900 	mov.w	r9, #0
 800c2d0:	e789      	b.n	800c1e6 <_scanf_float+0x192>
 800c2d2:	f04f 0a03 	mov.w	sl, #3
 800c2d6:	e786      	b.n	800c1e6 <_scanf_float+0x192>
 800c2d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c2dc:	4639      	mov	r1, r7
 800c2de:	4640      	mov	r0, r8
 800c2e0:	4798      	blx	r3
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	f43f aedb 	beq.w	800c09e <_scanf_float+0x4a>
 800c2e8:	e6e6      	b.n	800c0b8 <_scanf_float+0x64>
 800c2ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c2f2:	463a      	mov	r2, r7
 800c2f4:	4640      	mov	r0, r8
 800c2f6:	4798      	blx	r3
 800c2f8:	6923      	ldr	r3, [r4, #16]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	6123      	str	r3, [r4, #16]
 800c2fe:	e6e8      	b.n	800c0d2 <_scanf_float+0x7e>
 800c300:	1e6b      	subs	r3, r5, #1
 800c302:	2b06      	cmp	r3, #6
 800c304:	d824      	bhi.n	800c350 <_scanf_float+0x2fc>
 800c306:	2d02      	cmp	r5, #2
 800c308:	d836      	bhi.n	800c378 <_scanf_float+0x324>
 800c30a:	9b01      	ldr	r3, [sp, #4]
 800c30c:	429e      	cmp	r6, r3
 800c30e:	f67f aee4 	bls.w	800c0da <_scanf_float+0x86>
 800c312:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c316:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c31a:	463a      	mov	r2, r7
 800c31c:	4640      	mov	r0, r8
 800c31e:	4798      	blx	r3
 800c320:	6923      	ldr	r3, [r4, #16]
 800c322:	3b01      	subs	r3, #1
 800c324:	6123      	str	r3, [r4, #16]
 800c326:	e7f0      	b.n	800c30a <_scanf_float+0x2b6>
 800c328:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c32c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c330:	463a      	mov	r2, r7
 800c332:	4640      	mov	r0, r8
 800c334:	4798      	blx	r3
 800c336:	6923      	ldr	r3, [r4, #16]
 800c338:	3b01      	subs	r3, #1
 800c33a:	6123      	str	r3, [r4, #16]
 800c33c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c340:	fa5f fa8a 	uxtb.w	sl, sl
 800c344:	f1ba 0f02 	cmp.w	sl, #2
 800c348:	d1ee      	bne.n	800c328 <_scanf_float+0x2d4>
 800c34a:	3d03      	subs	r5, #3
 800c34c:	b2ed      	uxtb	r5, r5
 800c34e:	1b76      	subs	r6, r6, r5
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	05da      	lsls	r2, r3, #23
 800c354:	d530      	bpl.n	800c3b8 <_scanf_float+0x364>
 800c356:	055b      	lsls	r3, r3, #21
 800c358:	d511      	bpl.n	800c37e <_scanf_float+0x32a>
 800c35a:	9b01      	ldr	r3, [sp, #4]
 800c35c:	429e      	cmp	r6, r3
 800c35e:	f67f aebc 	bls.w	800c0da <_scanf_float+0x86>
 800c362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c36a:	463a      	mov	r2, r7
 800c36c:	4640      	mov	r0, r8
 800c36e:	4798      	blx	r3
 800c370:	6923      	ldr	r3, [r4, #16]
 800c372:	3b01      	subs	r3, #1
 800c374:	6123      	str	r3, [r4, #16]
 800c376:	e7f0      	b.n	800c35a <_scanf_float+0x306>
 800c378:	46aa      	mov	sl, r5
 800c37a:	46b3      	mov	fp, r6
 800c37c:	e7de      	b.n	800c33c <_scanf_float+0x2e8>
 800c37e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c382:	6923      	ldr	r3, [r4, #16]
 800c384:	2965      	cmp	r1, #101	@ 0x65
 800c386:	f103 33ff 	add.w	r3, r3, #4294967295
 800c38a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c38e:	6123      	str	r3, [r4, #16]
 800c390:	d00c      	beq.n	800c3ac <_scanf_float+0x358>
 800c392:	2945      	cmp	r1, #69	@ 0x45
 800c394:	d00a      	beq.n	800c3ac <_scanf_float+0x358>
 800c396:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c39a:	463a      	mov	r2, r7
 800c39c:	4640      	mov	r0, r8
 800c39e:	4798      	blx	r3
 800c3a0:	6923      	ldr	r3, [r4, #16]
 800c3a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	1eb5      	subs	r5, r6, #2
 800c3aa:	6123      	str	r3, [r4, #16]
 800c3ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3b0:	463a      	mov	r2, r7
 800c3b2:	4640      	mov	r0, r8
 800c3b4:	4798      	blx	r3
 800c3b6:	462e      	mov	r6, r5
 800c3b8:	6822      	ldr	r2, [r4, #0]
 800c3ba:	f012 0210 	ands.w	r2, r2, #16
 800c3be:	d001      	beq.n	800c3c4 <_scanf_float+0x370>
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	e68b      	b.n	800c0dc <_scanf_float+0x88>
 800c3c4:	7032      	strb	r2, [r6, #0]
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c3cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3d0:	d11c      	bne.n	800c40c <_scanf_float+0x3b8>
 800c3d2:	9b02      	ldr	r3, [sp, #8]
 800c3d4:	454b      	cmp	r3, r9
 800c3d6:	eba3 0209 	sub.w	r2, r3, r9
 800c3da:	d123      	bne.n	800c424 <_scanf_float+0x3d0>
 800c3dc:	9901      	ldr	r1, [sp, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	f001 f8f5 	bl	800d5d0 <_strtod_r>
 800c3e6:	9b03      	ldr	r3, [sp, #12]
 800c3e8:	6821      	ldr	r1, [r4, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f011 0f02 	tst.w	r1, #2
 800c3f0:	ec57 6b10 	vmov	r6, r7, d0
 800c3f4:	f103 0204 	add.w	r2, r3, #4
 800c3f8:	d01f      	beq.n	800c43a <_scanf_float+0x3e6>
 800c3fa:	9903      	ldr	r1, [sp, #12]
 800c3fc:	600a      	str	r2, [r1, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	e9c3 6700 	strd	r6, r7, [r3]
 800c404:	68e3      	ldr	r3, [r4, #12]
 800c406:	3301      	adds	r3, #1
 800c408:	60e3      	str	r3, [r4, #12]
 800c40a:	e7d9      	b.n	800c3c0 <_scanf_float+0x36c>
 800c40c:	9b04      	ldr	r3, [sp, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d0e4      	beq.n	800c3dc <_scanf_float+0x388>
 800c412:	9905      	ldr	r1, [sp, #20]
 800c414:	230a      	movs	r3, #10
 800c416:	3101      	adds	r1, #1
 800c418:	4640      	mov	r0, r8
 800c41a:	f7ff fd95 	bl	800bf48 <_strtol_r>
 800c41e:	9b04      	ldr	r3, [sp, #16]
 800c420:	9e05      	ldr	r6, [sp, #20]
 800c422:	1ac2      	subs	r2, r0, r3
 800c424:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c428:	429e      	cmp	r6, r3
 800c42a:	bf28      	it	cs
 800c42c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c430:	4910      	ldr	r1, [pc, #64]	@ (800c474 <_scanf_float+0x420>)
 800c432:	4630      	mov	r0, r6
 800c434:	f000 f8e4 	bl	800c600 <siprintf>
 800c438:	e7d0      	b.n	800c3dc <_scanf_float+0x388>
 800c43a:	f011 0f04 	tst.w	r1, #4
 800c43e:	9903      	ldr	r1, [sp, #12]
 800c440:	600a      	str	r2, [r1, #0]
 800c442:	d1dc      	bne.n	800c3fe <_scanf_float+0x3aa>
 800c444:	681d      	ldr	r5, [r3, #0]
 800c446:	4632      	mov	r2, r6
 800c448:	463b      	mov	r3, r7
 800c44a:	4630      	mov	r0, r6
 800c44c:	4639      	mov	r1, r7
 800c44e:	f7f4 fb7d 	bl	8000b4c <__aeabi_dcmpun>
 800c452:	b128      	cbz	r0, 800c460 <_scanf_float+0x40c>
 800c454:	4808      	ldr	r0, [pc, #32]	@ (800c478 <_scanf_float+0x424>)
 800c456:	f000 fa4b 	bl	800c8f0 <nanf>
 800c45a:	ed85 0a00 	vstr	s0, [r5]
 800c45e:	e7d1      	b.n	800c404 <_scanf_float+0x3b0>
 800c460:	4630      	mov	r0, r6
 800c462:	4639      	mov	r1, r7
 800c464:	f7f4 fba8 	bl	8000bb8 <__aeabi_d2f>
 800c468:	6028      	str	r0, [r5, #0]
 800c46a:	e7cb      	b.n	800c404 <_scanf_float+0x3b0>
 800c46c:	f04f 0900 	mov.w	r9, #0
 800c470:	e629      	b.n	800c0c6 <_scanf_float+0x72>
 800c472:	bf00      	nop
 800c474:	080100a9 	.word	0x080100a9
 800c478:	0801015a 	.word	0x0801015a

0800c47c <std>:
 800c47c:	2300      	movs	r3, #0
 800c47e:	b510      	push	{r4, lr}
 800c480:	4604      	mov	r4, r0
 800c482:	e9c0 3300 	strd	r3, r3, [r0]
 800c486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c48a:	6083      	str	r3, [r0, #8]
 800c48c:	8181      	strh	r1, [r0, #12]
 800c48e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c490:	81c2      	strh	r2, [r0, #14]
 800c492:	6183      	str	r3, [r0, #24]
 800c494:	4619      	mov	r1, r3
 800c496:	2208      	movs	r2, #8
 800c498:	305c      	adds	r0, #92	@ 0x5c
 800c49a:	f000 f940 	bl	800c71e <memset>
 800c49e:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d4 <std+0x58>)
 800c4a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d8 <std+0x5c>)
 800c4a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800c4dc <std+0x60>)
 800c4a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c4e0 <std+0x64>)
 800c4ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800c4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c4e4 <std+0x68>)
 800c4b0:	6224      	str	r4, [r4, #32]
 800c4b2:	429c      	cmp	r4, r3
 800c4b4:	d006      	beq.n	800c4c4 <std+0x48>
 800c4b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c4ba:	4294      	cmp	r4, r2
 800c4bc:	d002      	beq.n	800c4c4 <std+0x48>
 800c4be:	33d0      	adds	r3, #208	@ 0xd0
 800c4c0:	429c      	cmp	r4, r3
 800c4c2:	d105      	bne.n	800c4d0 <std+0x54>
 800c4c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4cc:	f000 ba0c 	b.w	800c8e8 <__retarget_lock_init_recursive>
 800c4d0:	bd10      	pop	{r4, pc}
 800c4d2:	bf00      	nop
 800c4d4:	0800c695 	.word	0x0800c695
 800c4d8:	0800c6bb 	.word	0x0800c6bb
 800c4dc:	0800c6f3 	.word	0x0800c6f3
 800c4e0:	0800c717 	.word	0x0800c717
 800c4e4:	2000302c 	.word	0x2000302c

0800c4e8 <stdio_exit_handler>:
 800c4e8:	4a02      	ldr	r2, [pc, #8]	@ (800c4f4 <stdio_exit_handler+0xc>)
 800c4ea:	4903      	ldr	r1, [pc, #12]	@ (800c4f8 <stdio_exit_handler+0x10>)
 800c4ec:	4803      	ldr	r0, [pc, #12]	@ (800c4fc <stdio_exit_handler+0x14>)
 800c4ee:	f000 b869 	b.w	800c5c4 <_fwalk_sglue>
 800c4f2:	bf00      	nop
 800c4f4:	20000160 	.word	0x20000160
 800c4f8:	0800e2e5 	.word	0x0800e2e5
 800c4fc:	20000170 	.word	0x20000170

0800c500 <cleanup_stdio>:
 800c500:	6841      	ldr	r1, [r0, #4]
 800c502:	4b0c      	ldr	r3, [pc, #48]	@ (800c534 <cleanup_stdio+0x34>)
 800c504:	4299      	cmp	r1, r3
 800c506:	b510      	push	{r4, lr}
 800c508:	4604      	mov	r4, r0
 800c50a:	d001      	beq.n	800c510 <cleanup_stdio+0x10>
 800c50c:	f001 feea 	bl	800e2e4 <_fflush_r>
 800c510:	68a1      	ldr	r1, [r4, #8]
 800c512:	4b09      	ldr	r3, [pc, #36]	@ (800c538 <cleanup_stdio+0x38>)
 800c514:	4299      	cmp	r1, r3
 800c516:	d002      	beq.n	800c51e <cleanup_stdio+0x1e>
 800c518:	4620      	mov	r0, r4
 800c51a:	f001 fee3 	bl	800e2e4 <_fflush_r>
 800c51e:	68e1      	ldr	r1, [r4, #12]
 800c520:	4b06      	ldr	r3, [pc, #24]	@ (800c53c <cleanup_stdio+0x3c>)
 800c522:	4299      	cmp	r1, r3
 800c524:	d004      	beq.n	800c530 <cleanup_stdio+0x30>
 800c526:	4620      	mov	r0, r4
 800c528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c52c:	f001 beda 	b.w	800e2e4 <_fflush_r>
 800c530:	bd10      	pop	{r4, pc}
 800c532:	bf00      	nop
 800c534:	2000302c 	.word	0x2000302c
 800c538:	20003094 	.word	0x20003094
 800c53c:	200030fc 	.word	0x200030fc

0800c540 <global_stdio_init.part.0>:
 800c540:	b510      	push	{r4, lr}
 800c542:	4b0b      	ldr	r3, [pc, #44]	@ (800c570 <global_stdio_init.part.0+0x30>)
 800c544:	4c0b      	ldr	r4, [pc, #44]	@ (800c574 <global_stdio_init.part.0+0x34>)
 800c546:	4a0c      	ldr	r2, [pc, #48]	@ (800c578 <global_stdio_init.part.0+0x38>)
 800c548:	601a      	str	r2, [r3, #0]
 800c54a:	4620      	mov	r0, r4
 800c54c:	2200      	movs	r2, #0
 800c54e:	2104      	movs	r1, #4
 800c550:	f7ff ff94 	bl	800c47c <std>
 800c554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c558:	2201      	movs	r2, #1
 800c55a:	2109      	movs	r1, #9
 800c55c:	f7ff ff8e 	bl	800c47c <std>
 800c560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c564:	2202      	movs	r2, #2
 800c566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c56a:	2112      	movs	r1, #18
 800c56c:	f7ff bf86 	b.w	800c47c <std>
 800c570:	20003164 	.word	0x20003164
 800c574:	2000302c 	.word	0x2000302c
 800c578:	0800c4e9 	.word	0x0800c4e9

0800c57c <__sfp_lock_acquire>:
 800c57c:	4801      	ldr	r0, [pc, #4]	@ (800c584 <__sfp_lock_acquire+0x8>)
 800c57e:	f000 b9b4 	b.w	800c8ea <__retarget_lock_acquire_recursive>
 800c582:	bf00      	nop
 800c584:	2000316d 	.word	0x2000316d

0800c588 <__sfp_lock_release>:
 800c588:	4801      	ldr	r0, [pc, #4]	@ (800c590 <__sfp_lock_release+0x8>)
 800c58a:	f000 b9af 	b.w	800c8ec <__retarget_lock_release_recursive>
 800c58e:	bf00      	nop
 800c590:	2000316d 	.word	0x2000316d

0800c594 <__sinit>:
 800c594:	b510      	push	{r4, lr}
 800c596:	4604      	mov	r4, r0
 800c598:	f7ff fff0 	bl	800c57c <__sfp_lock_acquire>
 800c59c:	6a23      	ldr	r3, [r4, #32]
 800c59e:	b11b      	cbz	r3, 800c5a8 <__sinit+0x14>
 800c5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5a4:	f7ff bff0 	b.w	800c588 <__sfp_lock_release>
 800c5a8:	4b04      	ldr	r3, [pc, #16]	@ (800c5bc <__sinit+0x28>)
 800c5aa:	6223      	str	r3, [r4, #32]
 800c5ac:	4b04      	ldr	r3, [pc, #16]	@ (800c5c0 <__sinit+0x2c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1f5      	bne.n	800c5a0 <__sinit+0xc>
 800c5b4:	f7ff ffc4 	bl	800c540 <global_stdio_init.part.0>
 800c5b8:	e7f2      	b.n	800c5a0 <__sinit+0xc>
 800c5ba:	bf00      	nop
 800c5bc:	0800c501 	.word	0x0800c501
 800c5c0:	20003164 	.word	0x20003164

0800c5c4 <_fwalk_sglue>:
 800c5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5c8:	4607      	mov	r7, r0
 800c5ca:	4688      	mov	r8, r1
 800c5cc:	4614      	mov	r4, r2
 800c5ce:	2600      	movs	r6, #0
 800c5d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5d4:	f1b9 0901 	subs.w	r9, r9, #1
 800c5d8:	d505      	bpl.n	800c5e6 <_fwalk_sglue+0x22>
 800c5da:	6824      	ldr	r4, [r4, #0]
 800c5dc:	2c00      	cmp	r4, #0
 800c5de:	d1f7      	bne.n	800c5d0 <_fwalk_sglue+0xc>
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e6:	89ab      	ldrh	r3, [r5, #12]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d907      	bls.n	800c5fc <_fwalk_sglue+0x38>
 800c5ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	d003      	beq.n	800c5fc <_fwalk_sglue+0x38>
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	4638      	mov	r0, r7
 800c5f8:	47c0      	blx	r8
 800c5fa:	4306      	orrs	r6, r0
 800c5fc:	3568      	adds	r5, #104	@ 0x68
 800c5fe:	e7e9      	b.n	800c5d4 <_fwalk_sglue+0x10>

0800c600 <siprintf>:
 800c600:	b40e      	push	{r1, r2, r3}
 800c602:	b500      	push	{lr}
 800c604:	b09c      	sub	sp, #112	@ 0x70
 800c606:	ab1d      	add	r3, sp, #116	@ 0x74
 800c608:	9002      	str	r0, [sp, #8]
 800c60a:	9006      	str	r0, [sp, #24]
 800c60c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c610:	4809      	ldr	r0, [pc, #36]	@ (800c638 <siprintf+0x38>)
 800c612:	9107      	str	r1, [sp, #28]
 800c614:	9104      	str	r1, [sp, #16]
 800c616:	4909      	ldr	r1, [pc, #36]	@ (800c63c <siprintf+0x3c>)
 800c618:	f853 2b04 	ldr.w	r2, [r3], #4
 800c61c:	9105      	str	r1, [sp, #20]
 800c61e:	6800      	ldr	r0, [r0, #0]
 800c620:	9301      	str	r3, [sp, #4]
 800c622:	a902      	add	r1, sp, #8
 800c624:	f001 f836 	bl	800d694 <_svfiprintf_r>
 800c628:	9b02      	ldr	r3, [sp, #8]
 800c62a:	2200      	movs	r2, #0
 800c62c:	701a      	strb	r2, [r3, #0]
 800c62e:	b01c      	add	sp, #112	@ 0x70
 800c630:	f85d eb04 	ldr.w	lr, [sp], #4
 800c634:	b003      	add	sp, #12
 800c636:	4770      	bx	lr
 800c638:	2000016c 	.word	0x2000016c
 800c63c:	ffff0208 	.word	0xffff0208

0800c640 <siscanf>:
 800c640:	b40e      	push	{r1, r2, r3}
 800c642:	b530      	push	{r4, r5, lr}
 800c644:	b09c      	sub	sp, #112	@ 0x70
 800c646:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c648:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c64c:	f854 5b04 	ldr.w	r5, [r4], #4
 800c650:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c654:	9002      	str	r0, [sp, #8]
 800c656:	9006      	str	r0, [sp, #24]
 800c658:	f7f3 fdc4 	bl	80001e4 <strlen>
 800c65c:	4b0b      	ldr	r3, [pc, #44]	@ (800c68c <siscanf+0x4c>)
 800c65e:	9003      	str	r0, [sp, #12]
 800c660:	9007      	str	r0, [sp, #28]
 800c662:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c664:	480a      	ldr	r0, [pc, #40]	@ (800c690 <siscanf+0x50>)
 800c666:	9401      	str	r4, [sp, #4]
 800c668:	2300      	movs	r3, #0
 800c66a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c66c:	9314      	str	r3, [sp, #80]	@ 0x50
 800c66e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c672:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c676:	462a      	mov	r2, r5
 800c678:	4623      	mov	r3, r4
 800c67a:	a902      	add	r1, sp, #8
 800c67c:	6800      	ldr	r0, [r0, #0]
 800c67e:	f001 f95d 	bl	800d93c <__ssvfiscanf_r>
 800c682:	b01c      	add	sp, #112	@ 0x70
 800c684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c688:	b003      	add	sp, #12
 800c68a:	4770      	bx	lr
 800c68c:	0800c6b7 	.word	0x0800c6b7
 800c690:	2000016c 	.word	0x2000016c

0800c694 <__sread>:
 800c694:	b510      	push	{r4, lr}
 800c696:	460c      	mov	r4, r1
 800c698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c69c:	f000 f8c6 	bl	800c82c <_read_r>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	bfab      	itete	ge
 800c6a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c6a8:	181b      	addge	r3, r3, r0
 800c6aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6ae:	bfac      	ite	ge
 800c6b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6b2:	81a3      	strhlt	r3, [r4, #12]
 800c6b4:	bd10      	pop	{r4, pc}

0800c6b6 <__seofread>:
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	4770      	bx	lr

0800c6ba <__swrite>:
 800c6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6be:	461f      	mov	r7, r3
 800c6c0:	898b      	ldrh	r3, [r1, #12]
 800c6c2:	05db      	lsls	r3, r3, #23
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	4616      	mov	r6, r2
 800c6ca:	d505      	bpl.n	800c6d8 <__swrite+0x1e>
 800c6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f000 f898 	bl	800c808 <_lseek_r>
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	4632      	mov	r2, r6
 800c6e6:	463b      	mov	r3, r7
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ee:	f000 b8bf 	b.w	800c870 <_write_r>

0800c6f2 <__sseek>:
 800c6f2:	b510      	push	{r4, lr}
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fa:	f000 f885 	bl	800c808 <_lseek_r>
 800c6fe:	1c43      	adds	r3, r0, #1
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	bf15      	itete	ne
 800c704:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c70a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c70e:	81a3      	strheq	r3, [r4, #12]
 800c710:	bf18      	it	ne
 800c712:	81a3      	strhne	r3, [r4, #12]
 800c714:	bd10      	pop	{r4, pc}

0800c716 <__sclose>:
 800c716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71a:	f000 b865 	b.w	800c7e8 <_close_r>

0800c71e <memset>:
 800c71e:	4402      	add	r2, r0
 800c720:	4603      	mov	r3, r0
 800c722:	4293      	cmp	r3, r2
 800c724:	d100      	bne.n	800c728 <memset+0xa>
 800c726:	4770      	bx	lr
 800c728:	f803 1b01 	strb.w	r1, [r3], #1
 800c72c:	e7f9      	b.n	800c722 <memset+0x4>
	...

0800c730 <strtok>:
 800c730:	4b16      	ldr	r3, [pc, #88]	@ (800c78c <strtok+0x5c>)
 800c732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c736:	681f      	ldr	r7, [r3, #0]
 800c738:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c73a:	4605      	mov	r5, r0
 800c73c:	460e      	mov	r6, r1
 800c73e:	b9ec      	cbnz	r4, 800c77c <strtok+0x4c>
 800c740:	2050      	movs	r0, #80	@ 0x50
 800c742:	f7ff fac9 	bl	800bcd8 <malloc>
 800c746:	4602      	mov	r2, r0
 800c748:	6478      	str	r0, [r7, #68]	@ 0x44
 800c74a:	b920      	cbnz	r0, 800c756 <strtok+0x26>
 800c74c:	4b10      	ldr	r3, [pc, #64]	@ (800c790 <strtok+0x60>)
 800c74e:	4811      	ldr	r0, [pc, #68]	@ (800c794 <strtok+0x64>)
 800c750:	215b      	movs	r1, #91	@ 0x5b
 800c752:	f000 f8d3 	bl	800c8fc <__assert_func>
 800c756:	e9c0 4400 	strd	r4, r4, [r0]
 800c75a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c75e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c762:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c766:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c76a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c76e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c772:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c776:	6184      	str	r4, [r0, #24]
 800c778:	7704      	strb	r4, [r0, #28]
 800c77a:	6244      	str	r4, [r0, #36]	@ 0x24
 800c77c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c77e:	4631      	mov	r1, r6
 800c780:	4628      	mov	r0, r5
 800c782:	2301      	movs	r3, #1
 800c784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c788:	f000 b806 	b.w	800c798 <__strtok_r>
 800c78c:	2000016c 	.word	0x2000016c
 800c790:	080100ae 	.word	0x080100ae
 800c794:	080100c5 	.word	0x080100c5

0800c798 <__strtok_r>:
 800c798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c79a:	4604      	mov	r4, r0
 800c79c:	b908      	cbnz	r0, 800c7a2 <__strtok_r+0xa>
 800c79e:	6814      	ldr	r4, [r2, #0]
 800c7a0:	b144      	cbz	r4, 800c7b4 <__strtok_r+0x1c>
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c7a8:	460f      	mov	r7, r1
 800c7aa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c7ae:	b91e      	cbnz	r6, 800c7b8 <__strtok_r+0x20>
 800c7b0:	b965      	cbnz	r5, 800c7cc <__strtok_r+0x34>
 800c7b2:	6015      	str	r5, [r2, #0]
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	e005      	b.n	800c7c4 <__strtok_r+0x2c>
 800c7b8:	42b5      	cmp	r5, r6
 800c7ba:	d1f6      	bne.n	800c7aa <__strtok_r+0x12>
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1f0      	bne.n	800c7a2 <__strtok_r+0xa>
 800c7c0:	6014      	str	r4, [r2, #0]
 800c7c2:	7003      	strb	r3, [r0, #0]
 800c7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7c6:	461c      	mov	r4, r3
 800c7c8:	e00c      	b.n	800c7e4 <__strtok_r+0x4c>
 800c7ca:	b915      	cbnz	r5, 800c7d2 <__strtok_r+0x3a>
 800c7cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7d0:	460e      	mov	r6, r1
 800c7d2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c7d6:	42ab      	cmp	r3, r5
 800c7d8:	d1f7      	bne.n	800c7ca <__strtok_r+0x32>
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d0f3      	beq.n	800c7c6 <__strtok_r+0x2e>
 800c7de:	2300      	movs	r3, #0
 800c7e0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c7e4:	6014      	str	r4, [r2, #0]
 800c7e6:	e7ed      	b.n	800c7c4 <__strtok_r+0x2c>

0800c7e8 <_close_r>:
 800c7e8:	b538      	push	{r3, r4, r5, lr}
 800c7ea:	4d06      	ldr	r5, [pc, #24]	@ (800c804 <_close_r+0x1c>)
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	4604      	mov	r4, r0
 800c7f0:	4608      	mov	r0, r1
 800c7f2:	602b      	str	r3, [r5, #0]
 800c7f4:	f7f6 fe12 	bl	800341c <_close>
 800c7f8:	1c43      	adds	r3, r0, #1
 800c7fa:	d102      	bne.n	800c802 <_close_r+0x1a>
 800c7fc:	682b      	ldr	r3, [r5, #0]
 800c7fe:	b103      	cbz	r3, 800c802 <_close_r+0x1a>
 800c800:	6023      	str	r3, [r4, #0]
 800c802:	bd38      	pop	{r3, r4, r5, pc}
 800c804:	20003168 	.word	0x20003168

0800c808 <_lseek_r>:
 800c808:	b538      	push	{r3, r4, r5, lr}
 800c80a:	4d07      	ldr	r5, [pc, #28]	@ (800c828 <_lseek_r+0x20>)
 800c80c:	4604      	mov	r4, r0
 800c80e:	4608      	mov	r0, r1
 800c810:	4611      	mov	r1, r2
 800c812:	2200      	movs	r2, #0
 800c814:	602a      	str	r2, [r5, #0]
 800c816:	461a      	mov	r2, r3
 800c818:	f7f6 fe27 	bl	800346a <_lseek>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	d102      	bne.n	800c826 <_lseek_r+0x1e>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	b103      	cbz	r3, 800c826 <_lseek_r+0x1e>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	20003168 	.word	0x20003168

0800c82c <_read_r>:
 800c82c:	b538      	push	{r3, r4, r5, lr}
 800c82e:	4d07      	ldr	r5, [pc, #28]	@ (800c84c <_read_r+0x20>)
 800c830:	4604      	mov	r4, r0
 800c832:	4608      	mov	r0, r1
 800c834:	4611      	mov	r1, r2
 800c836:	2200      	movs	r2, #0
 800c838:	602a      	str	r2, [r5, #0]
 800c83a:	461a      	mov	r2, r3
 800c83c:	f7f6 fdb5 	bl	80033aa <_read>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_read_r+0x1e>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_read_r+0x1e>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	20003168 	.word	0x20003168

0800c850 <_sbrk_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d06      	ldr	r5, [pc, #24]	@ (800c86c <_sbrk_r+0x1c>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	602b      	str	r3, [r5, #0]
 800c85c:	f7f6 fe12 	bl	8003484 <_sbrk>
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	d102      	bne.n	800c86a <_sbrk_r+0x1a>
 800c864:	682b      	ldr	r3, [r5, #0]
 800c866:	b103      	cbz	r3, 800c86a <_sbrk_r+0x1a>
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	bd38      	pop	{r3, r4, r5, pc}
 800c86c:	20003168 	.word	0x20003168

0800c870 <_write_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d07      	ldr	r5, [pc, #28]	@ (800c890 <_write_r+0x20>)
 800c874:	4604      	mov	r4, r0
 800c876:	4608      	mov	r0, r1
 800c878:	4611      	mov	r1, r2
 800c87a:	2200      	movs	r2, #0
 800c87c:	602a      	str	r2, [r5, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	f7f6 fdb0 	bl	80033e4 <_write>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_write_r+0x1e>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_write_r+0x1e>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	20003168 	.word	0x20003168

0800c894 <__errno>:
 800c894:	4b01      	ldr	r3, [pc, #4]	@ (800c89c <__errno+0x8>)
 800c896:	6818      	ldr	r0, [r3, #0]
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	2000016c 	.word	0x2000016c

0800c8a0 <__libc_init_array>:
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	4d0d      	ldr	r5, [pc, #52]	@ (800c8d8 <__libc_init_array+0x38>)
 800c8a4:	4c0d      	ldr	r4, [pc, #52]	@ (800c8dc <__libc_init_array+0x3c>)
 800c8a6:	1b64      	subs	r4, r4, r5
 800c8a8:	10a4      	asrs	r4, r4, #2
 800c8aa:	2600      	movs	r6, #0
 800c8ac:	42a6      	cmp	r6, r4
 800c8ae:	d109      	bne.n	800c8c4 <__libc_init_array+0x24>
 800c8b0:	4d0b      	ldr	r5, [pc, #44]	@ (800c8e0 <__libc_init_array+0x40>)
 800c8b2:	4c0c      	ldr	r4, [pc, #48]	@ (800c8e4 <__libc_init_array+0x44>)
 800c8b4:	f003 f900 	bl	800fab8 <_init>
 800c8b8:	1b64      	subs	r4, r4, r5
 800c8ba:	10a4      	asrs	r4, r4, #2
 800c8bc:	2600      	movs	r6, #0
 800c8be:	42a6      	cmp	r6, r4
 800c8c0:	d105      	bne.n	800c8ce <__libc_init_array+0x2e>
 800c8c2:	bd70      	pop	{r4, r5, r6, pc}
 800c8c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8c8:	4798      	blx	r3
 800c8ca:	3601      	adds	r6, #1
 800c8cc:	e7ee      	b.n	800c8ac <__libc_init_array+0xc>
 800c8ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d2:	4798      	blx	r3
 800c8d4:	3601      	adds	r6, #1
 800c8d6:	e7f2      	b.n	800c8be <__libc_init_array+0x1e>
 800c8d8:	080103e8 	.word	0x080103e8
 800c8dc:	080103e8 	.word	0x080103e8
 800c8e0:	080103e8 	.word	0x080103e8
 800c8e4:	080103ec 	.word	0x080103ec

0800c8e8 <__retarget_lock_init_recursive>:
 800c8e8:	4770      	bx	lr

0800c8ea <__retarget_lock_acquire_recursive>:
 800c8ea:	4770      	bx	lr

0800c8ec <__retarget_lock_release_recursive>:
 800c8ec:	4770      	bx	lr
	...

0800c8f0 <nanf>:
 800c8f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c8f8 <nanf+0x8>
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	7fc00000 	.word	0x7fc00000

0800c8fc <__assert_func>:
 800c8fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8fe:	4614      	mov	r4, r2
 800c900:	461a      	mov	r2, r3
 800c902:	4b09      	ldr	r3, [pc, #36]	@ (800c928 <__assert_func+0x2c>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4605      	mov	r5, r0
 800c908:	68d8      	ldr	r0, [r3, #12]
 800c90a:	b954      	cbnz	r4, 800c922 <__assert_func+0x26>
 800c90c:	4b07      	ldr	r3, [pc, #28]	@ (800c92c <__assert_func+0x30>)
 800c90e:	461c      	mov	r4, r3
 800c910:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c914:	9100      	str	r1, [sp, #0]
 800c916:	462b      	mov	r3, r5
 800c918:	4905      	ldr	r1, [pc, #20]	@ (800c930 <__assert_func+0x34>)
 800c91a:	f001 fd0b 	bl	800e334 <fiprintf>
 800c91e:	f001 fdd3 	bl	800e4c8 <abort>
 800c922:	4b04      	ldr	r3, [pc, #16]	@ (800c934 <__assert_func+0x38>)
 800c924:	e7f4      	b.n	800c910 <__assert_func+0x14>
 800c926:	bf00      	nop
 800c928:	2000016c 	.word	0x2000016c
 800c92c:	0801015a 	.word	0x0801015a
 800c930:	0801012c 	.word	0x0801012c
 800c934:	0801011f 	.word	0x0801011f

0800c938 <_free_r>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	4605      	mov	r5, r0
 800c93c:	2900      	cmp	r1, #0
 800c93e:	d041      	beq.n	800c9c4 <_free_r+0x8c>
 800c940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c944:	1f0c      	subs	r4, r1, #4
 800c946:	2b00      	cmp	r3, #0
 800c948:	bfb8      	it	lt
 800c94a:	18e4      	addlt	r4, r4, r3
 800c94c:	f7ff fa76 	bl	800be3c <__malloc_lock>
 800c950:	4a1d      	ldr	r2, [pc, #116]	@ (800c9c8 <_free_r+0x90>)
 800c952:	6813      	ldr	r3, [r2, #0]
 800c954:	b933      	cbnz	r3, 800c964 <_free_r+0x2c>
 800c956:	6063      	str	r3, [r4, #4]
 800c958:	6014      	str	r4, [r2, #0]
 800c95a:	4628      	mov	r0, r5
 800c95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c960:	f7ff ba72 	b.w	800be48 <__malloc_unlock>
 800c964:	42a3      	cmp	r3, r4
 800c966:	d908      	bls.n	800c97a <_free_r+0x42>
 800c968:	6820      	ldr	r0, [r4, #0]
 800c96a:	1821      	adds	r1, r4, r0
 800c96c:	428b      	cmp	r3, r1
 800c96e:	bf01      	itttt	eq
 800c970:	6819      	ldreq	r1, [r3, #0]
 800c972:	685b      	ldreq	r3, [r3, #4]
 800c974:	1809      	addeq	r1, r1, r0
 800c976:	6021      	streq	r1, [r4, #0]
 800c978:	e7ed      	b.n	800c956 <_free_r+0x1e>
 800c97a:	461a      	mov	r2, r3
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	b10b      	cbz	r3, 800c984 <_free_r+0x4c>
 800c980:	42a3      	cmp	r3, r4
 800c982:	d9fa      	bls.n	800c97a <_free_r+0x42>
 800c984:	6811      	ldr	r1, [r2, #0]
 800c986:	1850      	adds	r0, r2, r1
 800c988:	42a0      	cmp	r0, r4
 800c98a:	d10b      	bne.n	800c9a4 <_free_r+0x6c>
 800c98c:	6820      	ldr	r0, [r4, #0]
 800c98e:	4401      	add	r1, r0
 800c990:	1850      	adds	r0, r2, r1
 800c992:	4283      	cmp	r3, r0
 800c994:	6011      	str	r1, [r2, #0]
 800c996:	d1e0      	bne.n	800c95a <_free_r+0x22>
 800c998:	6818      	ldr	r0, [r3, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	6053      	str	r3, [r2, #4]
 800c99e:	4408      	add	r0, r1
 800c9a0:	6010      	str	r0, [r2, #0]
 800c9a2:	e7da      	b.n	800c95a <_free_r+0x22>
 800c9a4:	d902      	bls.n	800c9ac <_free_r+0x74>
 800c9a6:	230c      	movs	r3, #12
 800c9a8:	602b      	str	r3, [r5, #0]
 800c9aa:	e7d6      	b.n	800c95a <_free_r+0x22>
 800c9ac:	6820      	ldr	r0, [r4, #0]
 800c9ae:	1821      	adds	r1, r4, r0
 800c9b0:	428b      	cmp	r3, r1
 800c9b2:	bf04      	itt	eq
 800c9b4:	6819      	ldreq	r1, [r3, #0]
 800c9b6:	685b      	ldreq	r3, [r3, #4]
 800c9b8:	6063      	str	r3, [r4, #4]
 800c9ba:	bf04      	itt	eq
 800c9bc:	1809      	addeq	r1, r1, r0
 800c9be:	6021      	streq	r1, [r4, #0]
 800c9c0:	6054      	str	r4, [r2, #4]
 800c9c2:	e7ca      	b.n	800c95a <_free_r+0x22>
 800c9c4:	bd38      	pop	{r3, r4, r5, pc}
 800c9c6:	bf00      	nop
 800c9c8:	20003028 	.word	0x20003028

0800c9cc <sulp>:
 800c9cc:	b570      	push	{r4, r5, r6, lr}
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	460d      	mov	r5, r1
 800c9d2:	ec45 4b10 	vmov	d0, r4, r5
 800c9d6:	4616      	mov	r6, r2
 800c9d8:	f002 fc3c 	bl	800f254 <__ulp>
 800c9dc:	ec51 0b10 	vmov	r0, r1, d0
 800c9e0:	b17e      	cbz	r6, 800ca02 <sulp+0x36>
 800c9e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c9e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	dd09      	ble.n	800ca02 <sulp+0x36>
 800c9ee:	051b      	lsls	r3, r3, #20
 800c9f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c9f4:	2400      	movs	r4, #0
 800c9f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c9fa:	4622      	mov	r2, r4
 800c9fc:	462b      	mov	r3, r5
 800c9fe:	f7f3 fe0b 	bl	8000618 <__aeabi_dmul>
 800ca02:	ec41 0b10 	vmov	d0, r0, r1
 800ca06:	bd70      	pop	{r4, r5, r6, pc}

0800ca08 <_strtod_l>:
 800ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	b09f      	sub	sp, #124	@ 0x7c
 800ca0e:	460c      	mov	r4, r1
 800ca10:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ca12:	2200      	movs	r2, #0
 800ca14:	921a      	str	r2, [sp, #104]	@ 0x68
 800ca16:	9005      	str	r0, [sp, #20]
 800ca18:	f04f 0a00 	mov.w	sl, #0
 800ca1c:	f04f 0b00 	mov.w	fp, #0
 800ca20:	460a      	mov	r2, r1
 800ca22:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca24:	7811      	ldrb	r1, [r2, #0]
 800ca26:	292b      	cmp	r1, #43	@ 0x2b
 800ca28:	d04a      	beq.n	800cac0 <_strtod_l+0xb8>
 800ca2a:	d838      	bhi.n	800ca9e <_strtod_l+0x96>
 800ca2c:	290d      	cmp	r1, #13
 800ca2e:	d832      	bhi.n	800ca96 <_strtod_l+0x8e>
 800ca30:	2908      	cmp	r1, #8
 800ca32:	d832      	bhi.n	800ca9a <_strtod_l+0x92>
 800ca34:	2900      	cmp	r1, #0
 800ca36:	d03b      	beq.n	800cab0 <_strtod_l+0xa8>
 800ca38:	2200      	movs	r2, #0
 800ca3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ca3e:	782a      	ldrb	r2, [r5, #0]
 800ca40:	2a30      	cmp	r2, #48	@ 0x30
 800ca42:	f040 80b3 	bne.w	800cbac <_strtod_l+0x1a4>
 800ca46:	786a      	ldrb	r2, [r5, #1]
 800ca48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca4c:	2a58      	cmp	r2, #88	@ 0x58
 800ca4e:	d16e      	bne.n	800cb2e <_strtod_l+0x126>
 800ca50:	9302      	str	r3, [sp, #8]
 800ca52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca58:	9300      	str	r3, [sp, #0]
 800ca5a:	4a8e      	ldr	r2, [pc, #568]	@ (800cc94 <_strtod_l+0x28c>)
 800ca5c:	9805      	ldr	r0, [sp, #20]
 800ca5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ca60:	a919      	add	r1, sp, #100	@ 0x64
 800ca62:	f001 fd9f 	bl	800e5a4 <__gethex>
 800ca66:	f010 060f 	ands.w	r6, r0, #15
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	d005      	beq.n	800ca7a <_strtod_l+0x72>
 800ca6e:	2e06      	cmp	r6, #6
 800ca70:	d128      	bne.n	800cac4 <_strtod_l+0xbc>
 800ca72:	3501      	adds	r5, #1
 800ca74:	2300      	movs	r3, #0
 800ca76:	9519      	str	r5, [sp, #100]	@ 0x64
 800ca78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f040 858e 	bne.w	800d59e <_strtod_l+0xb96>
 800ca82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca84:	b1cb      	cbz	r3, 800caba <_strtod_l+0xb2>
 800ca86:	4652      	mov	r2, sl
 800ca88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ca8c:	ec43 2b10 	vmov	d0, r2, r3
 800ca90:	b01f      	add	sp, #124	@ 0x7c
 800ca92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca96:	2920      	cmp	r1, #32
 800ca98:	d1ce      	bne.n	800ca38 <_strtod_l+0x30>
 800ca9a:	3201      	adds	r2, #1
 800ca9c:	e7c1      	b.n	800ca22 <_strtod_l+0x1a>
 800ca9e:	292d      	cmp	r1, #45	@ 0x2d
 800caa0:	d1ca      	bne.n	800ca38 <_strtod_l+0x30>
 800caa2:	2101      	movs	r1, #1
 800caa4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800caa6:	1c51      	adds	r1, r2, #1
 800caa8:	9119      	str	r1, [sp, #100]	@ 0x64
 800caaa:	7852      	ldrb	r2, [r2, #1]
 800caac:	2a00      	cmp	r2, #0
 800caae:	d1c5      	bne.n	800ca3c <_strtod_l+0x34>
 800cab0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cab2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f040 8570 	bne.w	800d59a <_strtod_l+0xb92>
 800caba:	4652      	mov	r2, sl
 800cabc:	465b      	mov	r3, fp
 800cabe:	e7e5      	b.n	800ca8c <_strtod_l+0x84>
 800cac0:	2100      	movs	r1, #0
 800cac2:	e7ef      	b.n	800caa4 <_strtod_l+0x9c>
 800cac4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cac6:	b13a      	cbz	r2, 800cad8 <_strtod_l+0xd0>
 800cac8:	2135      	movs	r1, #53	@ 0x35
 800caca:	a81c      	add	r0, sp, #112	@ 0x70
 800cacc:	f002 fcbc 	bl	800f448 <__copybits>
 800cad0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cad2:	9805      	ldr	r0, [sp, #20]
 800cad4:	f002 f88a 	bl	800ebec <_Bfree>
 800cad8:	3e01      	subs	r6, #1
 800cada:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cadc:	2e04      	cmp	r6, #4
 800cade:	d806      	bhi.n	800caee <_strtod_l+0xe6>
 800cae0:	e8df f006 	tbb	[pc, r6]
 800cae4:	201d0314 	.word	0x201d0314
 800cae8:	14          	.byte	0x14
 800cae9:	00          	.byte	0x00
 800caea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800caee:	05e1      	lsls	r1, r4, #23
 800caf0:	bf48      	it	mi
 800caf2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800caf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cafa:	0d1b      	lsrs	r3, r3, #20
 800cafc:	051b      	lsls	r3, r3, #20
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1bb      	bne.n	800ca7a <_strtod_l+0x72>
 800cb02:	f7ff fec7 	bl	800c894 <__errno>
 800cb06:	2322      	movs	r3, #34	@ 0x22
 800cb08:	6003      	str	r3, [r0, #0]
 800cb0a:	e7b6      	b.n	800ca7a <_strtod_l+0x72>
 800cb0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cb10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb1c:	e7e7      	b.n	800caee <_strtod_l+0xe6>
 800cb1e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800cc9c <_strtod_l+0x294>
 800cb22:	e7e4      	b.n	800caee <_strtod_l+0xe6>
 800cb24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cb28:	f04f 3aff 	mov.w	sl, #4294967295
 800cb2c:	e7df      	b.n	800caee <_strtod_l+0xe6>
 800cb2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb30:	1c5a      	adds	r2, r3, #1
 800cb32:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb34:	785b      	ldrb	r3, [r3, #1]
 800cb36:	2b30      	cmp	r3, #48	@ 0x30
 800cb38:	d0f9      	beq.n	800cb2e <_strtod_l+0x126>
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d09d      	beq.n	800ca7a <_strtod_l+0x72>
 800cb3e:	2301      	movs	r3, #1
 800cb40:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb44:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb46:	2300      	movs	r3, #0
 800cb48:	9308      	str	r3, [sp, #32]
 800cb4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb4c:	461f      	mov	r7, r3
 800cb4e:	220a      	movs	r2, #10
 800cb50:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cb52:	7805      	ldrb	r5, [r0, #0]
 800cb54:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cb58:	b2d9      	uxtb	r1, r3
 800cb5a:	2909      	cmp	r1, #9
 800cb5c:	d928      	bls.n	800cbb0 <_strtod_l+0x1a8>
 800cb5e:	494e      	ldr	r1, [pc, #312]	@ (800cc98 <_strtod_l+0x290>)
 800cb60:	2201      	movs	r2, #1
 800cb62:	f001 fc86 	bl	800e472 <strncmp>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d032      	beq.n	800cbd0 <_strtod_l+0x1c8>
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	462a      	mov	r2, r5
 800cb6e:	4681      	mov	r9, r0
 800cb70:	463d      	mov	r5, r7
 800cb72:	4603      	mov	r3, r0
 800cb74:	2a65      	cmp	r2, #101	@ 0x65
 800cb76:	d001      	beq.n	800cb7c <_strtod_l+0x174>
 800cb78:	2a45      	cmp	r2, #69	@ 0x45
 800cb7a:	d114      	bne.n	800cba6 <_strtod_l+0x19e>
 800cb7c:	b91d      	cbnz	r5, 800cb86 <_strtod_l+0x17e>
 800cb7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb80:	4302      	orrs	r2, r0
 800cb82:	d095      	beq.n	800cab0 <_strtod_l+0xa8>
 800cb84:	2500      	movs	r5, #0
 800cb86:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cb88:	1c62      	adds	r2, r4, #1
 800cb8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb8c:	7862      	ldrb	r2, [r4, #1]
 800cb8e:	2a2b      	cmp	r2, #43	@ 0x2b
 800cb90:	d077      	beq.n	800cc82 <_strtod_l+0x27a>
 800cb92:	2a2d      	cmp	r2, #45	@ 0x2d
 800cb94:	d07b      	beq.n	800cc8e <_strtod_l+0x286>
 800cb96:	f04f 0c00 	mov.w	ip, #0
 800cb9a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cb9e:	2909      	cmp	r1, #9
 800cba0:	f240 8082 	bls.w	800cca8 <_strtod_l+0x2a0>
 800cba4:	9419      	str	r4, [sp, #100]	@ 0x64
 800cba6:	f04f 0800 	mov.w	r8, #0
 800cbaa:	e0a2      	b.n	800ccf2 <_strtod_l+0x2ea>
 800cbac:	2300      	movs	r3, #0
 800cbae:	e7c7      	b.n	800cb40 <_strtod_l+0x138>
 800cbb0:	2f08      	cmp	r7, #8
 800cbb2:	bfd5      	itete	le
 800cbb4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cbb6:	9908      	ldrgt	r1, [sp, #32]
 800cbb8:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbbc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cbc0:	f100 0001 	add.w	r0, r0, #1
 800cbc4:	bfd4      	ite	le
 800cbc6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cbc8:	9308      	strgt	r3, [sp, #32]
 800cbca:	3701      	adds	r7, #1
 800cbcc:	9019      	str	r0, [sp, #100]	@ 0x64
 800cbce:	e7bf      	b.n	800cb50 <_strtod_l+0x148>
 800cbd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbd2:	1c5a      	adds	r2, r3, #1
 800cbd4:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbd6:	785a      	ldrb	r2, [r3, #1]
 800cbd8:	b37f      	cbz	r7, 800cc3a <_strtod_l+0x232>
 800cbda:	4681      	mov	r9, r0
 800cbdc:	463d      	mov	r5, r7
 800cbde:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cbe2:	2b09      	cmp	r3, #9
 800cbe4:	d912      	bls.n	800cc0c <_strtod_l+0x204>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e7c4      	b.n	800cb74 <_strtod_l+0x16c>
 800cbea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbec:	1c5a      	adds	r2, r3, #1
 800cbee:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbf0:	785a      	ldrb	r2, [r3, #1]
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	2a30      	cmp	r2, #48	@ 0x30
 800cbf6:	d0f8      	beq.n	800cbea <_strtod_l+0x1e2>
 800cbf8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cbfc:	2b08      	cmp	r3, #8
 800cbfe:	f200 84d3 	bhi.w	800d5a8 <_strtod_l+0xba0>
 800cc02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc04:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc06:	4681      	mov	r9, r0
 800cc08:	2000      	movs	r0, #0
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	3a30      	subs	r2, #48	@ 0x30
 800cc0e:	f100 0301 	add.w	r3, r0, #1
 800cc12:	d02a      	beq.n	800cc6a <_strtod_l+0x262>
 800cc14:	4499      	add	r9, r3
 800cc16:	eb00 0c05 	add.w	ip, r0, r5
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	210a      	movs	r1, #10
 800cc1e:	4563      	cmp	r3, ip
 800cc20:	d10d      	bne.n	800cc3e <_strtod_l+0x236>
 800cc22:	1c69      	adds	r1, r5, #1
 800cc24:	4401      	add	r1, r0
 800cc26:	4428      	add	r0, r5
 800cc28:	2808      	cmp	r0, #8
 800cc2a:	dc16      	bgt.n	800cc5a <_strtod_l+0x252>
 800cc2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc2e:	230a      	movs	r3, #10
 800cc30:	fb03 2300 	mla	r3, r3, r0, r2
 800cc34:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc36:	2300      	movs	r3, #0
 800cc38:	e018      	b.n	800cc6c <_strtod_l+0x264>
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	e7da      	b.n	800cbf4 <_strtod_l+0x1ec>
 800cc3e:	2b08      	cmp	r3, #8
 800cc40:	f103 0301 	add.w	r3, r3, #1
 800cc44:	dc03      	bgt.n	800cc4e <_strtod_l+0x246>
 800cc46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cc48:	434e      	muls	r6, r1
 800cc4a:	960a      	str	r6, [sp, #40]	@ 0x28
 800cc4c:	e7e7      	b.n	800cc1e <_strtod_l+0x216>
 800cc4e:	2b10      	cmp	r3, #16
 800cc50:	bfde      	ittt	le
 800cc52:	9e08      	ldrle	r6, [sp, #32]
 800cc54:	434e      	mulle	r6, r1
 800cc56:	9608      	strle	r6, [sp, #32]
 800cc58:	e7e1      	b.n	800cc1e <_strtod_l+0x216>
 800cc5a:	280f      	cmp	r0, #15
 800cc5c:	dceb      	bgt.n	800cc36 <_strtod_l+0x22e>
 800cc5e:	9808      	ldr	r0, [sp, #32]
 800cc60:	230a      	movs	r3, #10
 800cc62:	fb03 2300 	mla	r3, r3, r0, r2
 800cc66:	9308      	str	r3, [sp, #32]
 800cc68:	e7e5      	b.n	800cc36 <_strtod_l+0x22e>
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc6e:	1c50      	adds	r0, r2, #1
 800cc70:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc72:	7852      	ldrb	r2, [r2, #1]
 800cc74:	4618      	mov	r0, r3
 800cc76:	460d      	mov	r5, r1
 800cc78:	e7b1      	b.n	800cbde <_strtod_l+0x1d6>
 800cc7a:	f04f 0900 	mov.w	r9, #0
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e77d      	b.n	800cb7e <_strtod_l+0x176>
 800cc82:	f04f 0c00 	mov.w	ip, #0
 800cc86:	1ca2      	adds	r2, r4, #2
 800cc88:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc8a:	78a2      	ldrb	r2, [r4, #2]
 800cc8c:	e785      	b.n	800cb9a <_strtod_l+0x192>
 800cc8e:	f04f 0c01 	mov.w	ip, #1
 800cc92:	e7f8      	b.n	800cc86 <_strtod_l+0x27e>
 800cc94:	08010180 	.word	0x08010180
 800cc98:	0801015b 	.word	0x0801015b
 800cc9c:	7ff00000 	.word	0x7ff00000
 800cca0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cca2:	1c51      	adds	r1, r2, #1
 800cca4:	9119      	str	r1, [sp, #100]	@ 0x64
 800cca6:	7852      	ldrb	r2, [r2, #1]
 800cca8:	2a30      	cmp	r2, #48	@ 0x30
 800ccaa:	d0f9      	beq.n	800cca0 <_strtod_l+0x298>
 800ccac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ccb0:	2908      	cmp	r1, #8
 800ccb2:	f63f af78 	bhi.w	800cba6 <_strtod_l+0x19e>
 800ccb6:	3a30      	subs	r2, #48	@ 0x30
 800ccb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccbc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ccbe:	f04f 080a 	mov.w	r8, #10
 800ccc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccc4:	1c56      	adds	r6, r2, #1
 800ccc6:	9619      	str	r6, [sp, #100]	@ 0x64
 800ccc8:	7852      	ldrb	r2, [r2, #1]
 800ccca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ccce:	f1be 0f09 	cmp.w	lr, #9
 800ccd2:	d939      	bls.n	800cd48 <_strtod_l+0x340>
 800ccd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ccd6:	1a76      	subs	r6, r6, r1
 800ccd8:	2e08      	cmp	r6, #8
 800ccda:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ccde:	dc03      	bgt.n	800cce8 <_strtod_l+0x2e0>
 800cce0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cce2:	4588      	cmp	r8, r1
 800cce4:	bfa8      	it	ge
 800cce6:	4688      	movge	r8, r1
 800cce8:	f1bc 0f00 	cmp.w	ip, #0
 800ccec:	d001      	beq.n	800ccf2 <_strtod_l+0x2ea>
 800ccee:	f1c8 0800 	rsb	r8, r8, #0
 800ccf2:	2d00      	cmp	r5, #0
 800ccf4:	d14e      	bne.n	800cd94 <_strtod_l+0x38c>
 800ccf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccf8:	4308      	orrs	r0, r1
 800ccfa:	f47f aebe 	bne.w	800ca7a <_strtod_l+0x72>
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f47f aed6 	bne.w	800cab0 <_strtod_l+0xa8>
 800cd04:	2a69      	cmp	r2, #105	@ 0x69
 800cd06:	d028      	beq.n	800cd5a <_strtod_l+0x352>
 800cd08:	dc25      	bgt.n	800cd56 <_strtod_l+0x34e>
 800cd0a:	2a49      	cmp	r2, #73	@ 0x49
 800cd0c:	d025      	beq.n	800cd5a <_strtod_l+0x352>
 800cd0e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cd10:	f47f aece 	bne.w	800cab0 <_strtod_l+0xa8>
 800cd14:	499b      	ldr	r1, [pc, #620]	@ (800cf84 <_strtod_l+0x57c>)
 800cd16:	a819      	add	r0, sp, #100	@ 0x64
 800cd18:	f001 fe66 	bl	800e9e8 <__match>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	f43f aec7 	beq.w	800cab0 <_strtod_l+0xa8>
 800cd22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b28      	cmp	r3, #40	@ 0x28
 800cd28:	d12e      	bne.n	800cd88 <_strtod_l+0x380>
 800cd2a:	4997      	ldr	r1, [pc, #604]	@ (800cf88 <_strtod_l+0x580>)
 800cd2c:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd2e:	a819      	add	r0, sp, #100	@ 0x64
 800cd30:	f001 fe6e 	bl	800ea10 <__hexnan>
 800cd34:	2805      	cmp	r0, #5
 800cd36:	d127      	bne.n	800cd88 <_strtod_l+0x380>
 800cd38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd3a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cd3e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cd42:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cd46:	e698      	b.n	800ca7a <_strtod_l+0x72>
 800cd48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd4a:	fb08 2101 	mla	r1, r8, r1, r2
 800cd4e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cd52:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd54:	e7b5      	b.n	800ccc2 <_strtod_l+0x2ba>
 800cd56:	2a6e      	cmp	r2, #110	@ 0x6e
 800cd58:	e7da      	b.n	800cd10 <_strtod_l+0x308>
 800cd5a:	498c      	ldr	r1, [pc, #560]	@ (800cf8c <_strtod_l+0x584>)
 800cd5c:	a819      	add	r0, sp, #100	@ 0x64
 800cd5e:	f001 fe43 	bl	800e9e8 <__match>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f43f aea4 	beq.w	800cab0 <_strtod_l+0xa8>
 800cd68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd6a:	4989      	ldr	r1, [pc, #548]	@ (800cf90 <_strtod_l+0x588>)
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	a819      	add	r0, sp, #100	@ 0x64
 800cd70:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd72:	f001 fe39 	bl	800e9e8 <__match>
 800cd76:	b910      	cbnz	r0, 800cd7e <_strtod_l+0x376>
 800cd78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd7e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cfa0 <_strtod_l+0x598>
 800cd82:	f04f 0a00 	mov.w	sl, #0
 800cd86:	e678      	b.n	800ca7a <_strtod_l+0x72>
 800cd88:	4882      	ldr	r0, [pc, #520]	@ (800cf94 <_strtod_l+0x58c>)
 800cd8a:	f001 fb95 	bl	800e4b8 <nan>
 800cd8e:	ec5b ab10 	vmov	sl, fp, d0
 800cd92:	e672      	b.n	800ca7a <_strtod_l+0x72>
 800cd94:	eba8 0309 	sub.w	r3, r8, r9
 800cd98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cd9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd9c:	2f00      	cmp	r7, #0
 800cd9e:	bf08      	it	eq
 800cda0:	462f      	moveq	r7, r5
 800cda2:	2d10      	cmp	r5, #16
 800cda4:	462c      	mov	r4, r5
 800cda6:	bfa8      	it	ge
 800cda8:	2410      	movge	r4, #16
 800cdaa:	f7f3 fbbb 	bl	8000524 <__aeabi_ui2d>
 800cdae:	2d09      	cmp	r5, #9
 800cdb0:	4682      	mov	sl, r0
 800cdb2:	468b      	mov	fp, r1
 800cdb4:	dc13      	bgt.n	800cdde <_strtod_l+0x3d6>
 800cdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f43f ae5e 	beq.w	800ca7a <_strtod_l+0x72>
 800cdbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc0:	dd78      	ble.n	800ceb4 <_strtod_l+0x4ac>
 800cdc2:	2b16      	cmp	r3, #22
 800cdc4:	dc5f      	bgt.n	800ce86 <_strtod_l+0x47e>
 800cdc6:	4974      	ldr	r1, [pc, #464]	@ (800cf98 <_strtod_l+0x590>)
 800cdc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cdcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdd0:	4652      	mov	r2, sl
 800cdd2:	465b      	mov	r3, fp
 800cdd4:	f7f3 fc20 	bl	8000618 <__aeabi_dmul>
 800cdd8:	4682      	mov	sl, r0
 800cdda:	468b      	mov	fp, r1
 800cddc:	e64d      	b.n	800ca7a <_strtod_l+0x72>
 800cdde:	4b6e      	ldr	r3, [pc, #440]	@ (800cf98 <_strtod_l+0x590>)
 800cde0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cde4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cde8:	f7f3 fc16 	bl	8000618 <__aeabi_dmul>
 800cdec:	4682      	mov	sl, r0
 800cdee:	9808      	ldr	r0, [sp, #32]
 800cdf0:	468b      	mov	fp, r1
 800cdf2:	f7f3 fb97 	bl	8000524 <__aeabi_ui2d>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4650      	mov	r0, sl
 800cdfc:	4659      	mov	r1, fp
 800cdfe:	f7f3 fa55 	bl	80002ac <__adddf3>
 800ce02:	2d0f      	cmp	r5, #15
 800ce04:	4682      	mov	sl, r0
 800ce06:	468b      	mov	fp, r1
 800ce08:	ddd5      	ble.n	800cdb6 <_strtod_l+0x3ae>
 800ce0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce0c:	1b2c      	subs	r4, r5, r4
 800ce0e:	441c      	add	r4, r3
 800ce10:	2c00      	cmp	r4, #0
 800ce12:	f340 8096 	ble.w	800cf42 <_strtod_l+0x53a>
 800ce16:	f014 030f 	ands.w	r3, r4, #15
 800ce1a:	d00a      	beq.n	800ce32 <_strtod_l+0x42a>
 800ce1c:	495e      	ldr	r1, [pc, #376]	@ (800cf98 <_strtod_l+0x590>)
 800ce1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce22:	4652      	mov	r2, sl
 800ce24:	465b      	mov	r3, fp
 800ce26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce2a:	f7f3 fbf5 	bl	8000618 <__aeabi_dmul>
 800ce2e:	4682      	mov	sl, r0
 800ce30:	468b      	mov	fp, r1
 800ce32:	f034 040f 	bics.w	r4, r4, #15
 800ce36:	d073      	beq.n	800cf20 <_strtod_l+0x518>
 800ce38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ce3c:	dd48      	ble.n	800ced0 <_strtod_l+0x4c8>
 800ce3e:	2400      	movs	r4, #0
 800ce40:	46a0      	mov	r8, r4
 800ce42:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce44:	46a1      	mov	r9, r4
 800ce46:	9a05      	ldr	r2, [sp, #20]
 800ce48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cfa0 <_strtod_l+0x598>
 800ce4c:	2322      	movs	r3, #34	@ 0x22
 800ce4e:	6013      	str	r3, [r2, #0]
 800ce50:	f04f 0a00 	mov.w	sl, #0
 800ce54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f43f ae0f 	beq.w	800ca7a <_strtod_l+0x72>
 800ce5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce5e:	9805      	ldr	r0, [sp, #20]
 800ce60:	f001 fec4 	bl	800ebec <_Bfree>
 800ce64:	9805      	ldr	r0, [sp, #20]
 800ce66:	4649      	mov	r1, r9
 800ce68:	f001 fec0 	bl	800ebec <_Bfree>
 800ce6c:	9805      	ldr	r0, [sp, #20]
 800ce6e:	4641      	mov	r1, r8
 800ce70:	f001 febc 	bl	800ebec <_Bfree>
 800ce74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce76:	9805      	ldr	r0, [sp, #20]
 800ce78:	f001 feb8 	bl	800ebec <_Bfree>
 800ce7c:	9805      	ldr	r0, [sp, #20]
 800ce7e:	4621      	mov	r1, r4
 800ce80:	f001 feb4 	bl	800ebec <_Bfree>
 800ce84:	e5f9      	b.n	800ca7a <_strtod_l+0x72>
 800ce86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	dbbc      	blt.n	800ce0a <_strtod_l+0x402>
 800ce90:	4c41      	ldr	r4, [pc, #260]	@ (800cf98 <_strtod_l+0x590>)
 800ce92:	f1c5 050f 	rsb	r5, r5, #15
 800ce96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ce9a:	4652      	mov	r2, sl
 800ce9c:	465b      	mov	r3, fp
 800ce9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cea2:	f7f3 fbb9 	bl	8000618 <__aeabi_dmul>
 800cea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cea8:	1b5d      	subs	r5, r3, r5
 800ceaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ceae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ceb2:	e78f      	b.n	800cdd4 <_strtod_l+0x3cc>
 800ceb4:	3316      	adds	r3, #22
 800ceb6:	dba8      	blt.n	800ce0a <_strtod_l+0x402>
 800ceb8:	4b37      	ldr	r3, [pc, #220]	@ (800cf98 <_strtod_l+0x590>)
 800ceba:	eba9 0808 	sub.w	r8, r9, r8
 800cebe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cec2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cec6:	4650      	mov	r0, sl
 800cec8:	4659      	mov	r1, fp
 800ceca:	f7f3 fccf 	bl	800086c <__aeabi_ddiv>
 800cece:	e783      	b.n	800cdd8 <_strtod_l+0x3d0>
 800ced0:	4b32      	ldr	r3, [pc, #200]	@ (800cf9c <_strtod_l+0x594>)
 800ced2:	9308      	str	r3, [sp, #32]
 800ced4:	2300      	movs	r3, #0
 800ced6:	1124      	asrs	r4, r4, #4
 800ced8:	4650      	mov	r0, sl
 800ceda:	4659      	mov	r1, fp
 800cedc:	461e      	mov	r6, r3
 800cede:	2c01      	cmp	r4, #1
 800cee0:	dc21      	bgt.n	800cf26 <_strtod_l+0x51e>
 800cee2:	b10b      	cbz	r3, 800cee8 <_strtod_l+0x4e0>
 800cee4:	4682      	mov	sl, r0
 800cee6:	468b      	mov	fp, r1
 800cee8:	492c      	ldr	r1, [pc, #176]	@ (800cf9c <_strtod_l+0x594>)
 800ceea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ceee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cef2:	4652      	mov	r2, sl
 800cef4:	465b      	mov	r3, fp
 800cef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cefa:	f7f3 fb8d 	bl	8000618 <__aeabi_dmul>
 800cefe:	4b28      	ldr	r3, [pc, #160]	@ (800cfa0 <_strtod_l+0x598>)
 800cf00:	460a      	mov	r2, r1
 800cf02:	400b      	ands	r3, r1
 800cf04:	4927      	ldr	r1, [pc, #156]	@ (800cfa4 <_strtod_l+0x59c>)
 800cf06:	428b      	cmp	r3, r1
 800cf08:	4682      	mov	sl, r0
 800cf0a:	d898      	bhi.n	800ce3e <_strtod_l+0x436>
 800cf0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cf10:	428b      	cmp	r3, r1
 800cf12:	bf86      	itte	hi
 800cf14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cfa8 <_strtod_l+0x5a0>
 800cf18:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf20:	2300      	movs	r3, #0
 800cf22:	9308      	str	r3, [sp, #32]
 800cf24:	e07a      	b.n	800d01c <_strtod_l+0x614>
 800cf26:	07e2      	lsls	r2, r4, #31
 800cf28:	d505      	bpl.n	800cf36 <_strtod_l+0x52e>
 800cf2a:	9b08      	ldr	r3, [sp, #32]
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	f7f3 fb72 	bl	8000618 <__aeabi_dmul>
 800cf34:	2301      	movs	r3, #1
 800cf36:	9a08      	ldr	r2, [sp, #32]
 800cf38:	3208      	adds	r2, #8
 800cf3a:	3601      	adds	r6, #1
 800cf3c:	1064      	asrs	r4, r4, #1
 800cf3e:	9208      	str	r2, [sp, #32]
 800cf40:	e7cd      	b.n	800cede <_strtod_l+0x4d6>
 800cf42:	d0ed      	beq.n	800cf20 <_strtod_l+0x518>
 800cf44:	4264      	negs	r4, r4
 800cf46:	f014 020f 	ands.w	r2, r4, #15
 800cf4a:	d00a      	beq.n	800cf62 <_strtod_l+0x55a>
 800cf4c:	4b12      	ldr	r3, [pc, #72]	@ (800cf98 <_strtod_l+0x590>)
 800cf4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf52:	4650      	mov	r0, sl
 800cf54:	4659      	mov	r1, fp
 800cf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5a:	f7f3 fc87 	bl	800086c <__aeabi_ddiv>
 800cf5e:	4682      	mov	sl, r0
 800cf60:	468b      	mov	fp, r1
 800cf62:	1124      	asrs	r4, r4, #4
 800cf64:	d0dc      	beq.n	800cf20 <_strtod_l+0x518>
 800cf66:	2c1f      	cmp	r4, #31
 800cf68:	dd20      	ble.n	800cfac <_strtod_l+0x5a4>
 800cf6a:	2400      	movs	r4, #0
 800cf6c:	46a0      	mov	r8, r4
 800cf6e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cf70:	46a1      	mov	r9, r4
 800cf72:	9a05      	ldr	r2, [sp, #20]
 800cf74:	2322      	movs	r3, #34	@ 0x22
 800cf76:	f04f 0a00 	mov.w	sl, #0
 800cf7a:	f04f 0b00 	mov.w	fp, #0
 800cf7e:	6013      	str	r3, [r2, #0]
 800cf80:	e768      	b.n	800ce54 <_strtod_l+0x44c>
 800cf82:	bf00      	nop
 800cf84:	08010166 	.word	0x08010166
 800cf88:	0801016c 	.word	0x0801016c
 800cf8c:	0801015d 	.word	0x0801015d
 800cf90:	08010160 	.word	0x08010160
 800cf94:	0801015a 	.word	0x0801015a
 800cf98:	08010318 	.word	0x08010318
 800cf9c:	080102f0 	.word	0x080102f0
 800cfa0:	7ff00000 	.word	0x7ff00000
 800cfa4:	7ca00000 	.word	0x7ca00000
 800cfa8:	7fefffff 	.word	0x7fefffff
 800cfac:	f014 0310 	ands.w	r3, r4, #16
 800cfb0:	bf18      	it	ne
 800cfb2:	236a      	movne	r3, #106	@ 0x6a
 800cfb4:	4ea9      	ldr	r6, [pc, #676]	@ (800d25c <_strtod_l+0x854>)
 800cfb6:	9308      	str	r3, [sp, #32]
 800cfb8:	4650      	mov	r0, sl
 800cfba:	4659      	mov	r1, fp
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	07e2      	lsls	r2, r4, #31
 800cfc0:	d504      	bpl.n	800cfcc <_strtod_l+0x5c4>
 800cfc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfc6:	f7f3 fb27 	bl	8000618 <__aeabi_dmul>
 800cfca:	2301      	movs	r3, #1
 800cfcc:	1064      	asrs	r4, r4, #1
 800cfce:	f106 0608 	add.w	r6, r6, #8
 800cfd2:	d1f4      	bne.n	800cfbe <_strtod_l+0x5b6>
 800cfd4:	b10b      	cbz	r3, 800cfda <_strtod_l+0x5d2>
 800cfd6:	4682      	mov	sl, r0
 800cfd8:	468b      	mov	fp, r1
 800cfda:	9b08      	ldr	r3, [sp, #32]
 800cfdc:	b1b3      	cbz	r3, 800d00c <_strtod_l+0x604>
 800cfde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cfe2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	4659      	mov	r1, fp
 800cfea:	dd0f      	ble.n	800d00c <_strtod_l+0x604>
 800cfec:	2b1f      	cmp	r3, #31
 800cfee:	dd55      	ble.n	800d09c <_strtod_l+0x694>
 800cff0:	2b34      	cmp	r3, #52	@ 0x34
 800cff2:	bfde      	ittt	le
 800cff4:	f04f 33ff 	movle.w	r3, #4294967295
 800cff8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cffc:	4093      	lslle	r3, r2
 800cffe:	f04f 0a00 	mov.w	sl, #0
 800d002:	bfcc      	ite	gt
 800d004:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d008:	ea03 0b01 	andle.w	fp, r3, r1
 800d00c:	2200      	movs	r2, #0
 800d00e:	2300      	movs	r3, #0
 800d010:	4650      	mov	r0, sl
 800d012:	4659      	mov	r1, fp
 800d014:	f7f3 fd68 	bl	8000ae8 <__aeabi_dcmpeq>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d1a6      	bne.n	800cf6a <_strtod_l+0x562>
 800d01c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d022:	9805      	ldr	r0, [sp, #20]
 800d024:	462b      	mov	r3, r5
 800d026:	463a      	mov	r2, r7
 800d028:	f001 fe48 	bl	800ecbc <__s2b>
 800d02c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d02e:	2800      	cmp	r0, #0
 800d030:	f43f af05 	beq.w	800ce3e <_strtod_l+0x436>
 800d034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d036:	2a00      	cmp	r2, #0
 800d038:	eba9 0308 	sub.w	r3, r9, r8
 800d03c:	bfa8      	it	ge
 800d03e:	2300      	movge	r3, #0
 800d040:	9312      	str	r3, [sp, #72]	@ 0x48
 800d042:	2400      	movs	r4, #0
 800d044:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d048:	9316      	str	r3, [sp, #88]	@ 0x58
 800d04a:	46a0      	mov	r8, r4
 800d04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d04e:	9805      	ldr	r0, [sp, #20]
 800d050:	6859      	ldr	r1, [r3, #4]
 800d052:	f001 fd8b 	bl	800eb6c <_Balloc>
 800d056:	4681      	mov	r9, r0
 800d058:	2800      	cmp	r0, #0
 800d05a:	f43f aef4 	beq.w	800ce46 <_strtod_l+0x43e>
 800d05e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d060:	691a      	ldr	r2, [r3, #16]
 800d062:	3202      	adds	r2, #2
 800d064:	f103 010c 	add.w	r1, r3, #12
 800d068:	0092      	lsls	r2, r2, #2
 800d06a:	300c      	adds	r0, #12
 800d06c:	f001 fa13 	bl	800e496 <memcpy>
 800d070:	ec4b ab10 	vmov	d0, sl, fp
 800d074:	9805      	ldr	r0, [sp, #20]
 800d076:	aa1c      	add	r2, sp, #112	@ 0x70
 800d078:	a91b      	add	r1, sp, #108	@ 0x6c
 800d07a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d07e:	f002 f959 	bl	800f334 <__d2b>
 800d082:	901a      	str	r0, [sp, #104]	@ 0x68
 800d084:	2800      	cmp	r0, #0
 800d086:	f43f aede 	beq.w	800ce46 <_strtod_l+0x43e>
 800d08a:	9805      	ldr	r0, [sp, #20]
 800d08c:	2101      	movs	r1, #1
 800d08e:	f001 feab 	bl	800ede8 <__i2b>
 800d092:	4680      	mov	r8, r0
 800d094:	b948      	cbnz	r0, 800d0aa <_strtod_l+0x6a2>
 800d096:	f04f 0800 	mov.w	r8, #0
 800d09a:	e6d4      	b.n	800ce46 <_strtod_l+0x43e>
 800d09c:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0a4:	ea03 0a0a 	and.w	sl, r3, sl
 800d0a8:	e7b0      	b.n	800d00c <_strtod_l+0x604>
 800d0aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d0ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	bfab      	itete	ge
 800d0b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d0b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d0b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d0b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d0ba:	bfac      	ite	ge
 800d0bc:	18ef      	addge	r7, r5, r3
 800d0be:	1b5e      	sublt	r6, r3, r5
 800d0c0:	9b08      	ldr	r3, [sp, #32]
 800d0c2:	1aed      	subs	r5, r5, r3
 800d0c4:	4415      	add	r5, r2
 800d0c6:	4b66      	ldr	r3, [pc, #408]	@ (800d260 <_strtod_l+0x858>)
 800d0c8:	3d01      	subs	r5, #1
 800d0ca:	429d      	cmp	r5, r3
 800d0cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d0d0:	da50      	bge.n	800d174 <_strtod_l+0x76c>
 800d0d2:	1b5b      	subs	r3, r3, r5
 800d0d4:	2b1f      	cmp	r3, #31
 800d0d6:	eba2 0203 	sub.w	r2, r2, r3
 800d0da:	f04f 0101 	mov.w	r1, #1
 800d0de:	dc3d      	bgt.n	800d15c <_strtod_l+0x754>
 800d0e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d0e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0ea:	18bd      	adds	r5, r7, r2
 800d0ec:	9b08      	ldr	r3, [sp, #32]
 800d0ee:	42af      	cmp	r7, r5
 800d0f0:	4416      	add	r6, r2
 800d0f2:	441e      	add	r6, r3
 800d0f4:	463b      	mov	r3, r7
 800d0f6:	bfa8      	it	ge
 800d0f8:	462b      	movge	r3, r5
 800d0fa:	42b3      	cmp	r3, r6
 800d0fc:	bfa8      	it	ge
 800d0fe:	4633      	movge	r3, r6
 800d100:	2b00      	cmp	r3, #0
 800d102:	bfc2      	ittt	gt
 800d104:	1aed      	subgt	r5, r5, r3
 800d106:	1af6      	subgt	r6, r6, r3
 800d108:	1aff      	subgt	r7, r7, r3
 800d10a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	dd16      	ble.n	800d13e <_strtod_l+0x736>
 800d110:	4641      	mov	r1, r8
 800d112:	9805      	ldr	r0, [sp, #20]
 800d114:	461a      	mov	r2, r3
 800d116:	f001 ff27 	bl	800ef68 <__pow5mult>
 800d11a:	4680      	mov	r8, r0
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d0ba      	beq.n	800d096 <_strtod_l+0x68e>
 800d120:	4601      	mov	r1, r0
 800d122:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d124:	9805      	ldr	r0, [sp, #20]
 800d126:	f001 fe75 	bl	800ee14 <__multiply>
 800d12a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d12c:	2800      	cmp	r0, #0
 800d12e:	f43f ae8a 	beq.w	800ce46 <_strtod_l+0x43e>
 800d132:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d134:	9805      	ldr	r0, [sp, #20]
 800d136:	f001 fd59 	bl	800ebec <_Bfree>
 800d13a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d13c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d13e:	2d00      	cmp	r5, #0
 800d140:	dc1d      	bgt.n	800d17e <_strtod_l+0x776>
 800d142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d144:	2b00      	cmp	r3, #0
 800d146:	dd23      	ble.n	800d190 <_strtod_l+0x788>
 800d148:	4649      	mov	r1, r9
 800d14a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d14c:	9805      	ldr	r0, [sp, #20]
 800d14e:	f001 ff0b 	bl	800ef68 <__pow5mult>
 800d152:	4681      	mov	r9, r0
 800d154:	b9e0      	cbnz	r0, 800d190 <_strtod_l+0x788>
 800d156:	f04f 0900 	mov.w	r9, #0
 800d15a:	e674      	b.n	800ce46 <_strtod_l+0x43e>
 800d15c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d160:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d164:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d168:	35e2      	adds	r5, #226	@ 0xe2
 800d16a:	fa01 f305 	lsl.w	r3, r1, r5
 800d16e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d170:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d172:	e7ba      	b.n	800d0ea <_strtod_l+0x6e2>
 800d174:	2300      	movs	r3, #0
 800d176:	9310      	str	r3, [sp, #64]	@ 0x40
 800d178:	2301      	movs	r3, #1
 800d17a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d17c:	e7b5      	b.n	800d0ea <_strtod_l+0x6e2>
 800d17e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d180:	9805      	ldr	r0, [sp, #20]
 800d182:	462a      	mov	r2, r5
 800d184:	f001 ff4a 	bl	800f01c <__lshift>
 800d188:	901a      	str	r0, [sp, #104]	@ 0x68
 800d18a:	2800      	cmp	r0, #0
 800d18c:	d1d9      	bne.n	800d142 <_strtod_l+0x73a>
 800d18e:	e65a      	b.n	800ce46 <_strtod_l+0x43e>
 800d190:	2e00      	cmp	r6, #0
 800d192:	dd07      	ble.n	800d1a4 <_strtod_l+0x79c>
 800d194:	4649      	mov	r1, r9
 800d196:	9805      	ldr	r0, [sp, #20]
 800d198:	4632      	mov	r2, r6
 800d19a:	f001 ff3f 	bl	800f01c <__lshift>
 800d19e:	4681      	mov	r9, r0
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d0d8      	beq.n	800d156 <_strtod_l+0x74e>
 800d1a4:	2f00      	cmp	r7, #0
 800d1a6:	dd08      	ble.n	800d1ba <_strtod_l+0x7b2>
 800d1a8:	4641      	mov	r1, r8
 800d1aa:	9805      	ldr	r0, [sp, #20]
 800d1ac:	463a      	mov	r2, r7
 800d1ae:	f001 ff35 	bl	800f01c <__lshift>
 800d1b2:	4680      	mov	r8, r0
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	f43f ae46 	beq.w	800ce46 <_strtod_l+0x43e>
 800d1ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1bc:	9805      	ldr	r0, [sp, #20]
 800d1be:	464a      	mov	r2, r9
 800d1c0:	f001 ffb4 	bl	800f12c <__mdiff>
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	f43f ae3d 	beq.w	800ce46 <_strtod_l+0x43e>
 800d1cc:	68c3      	ldr	r3, [r0, #12]
 800d1ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	60c3      	str	r3, [r0, #12]
 800d1d4:	4641      	mov	r1, r8
 800d1d6:	f001 ff8d 	bl	800f0f4 <__mcmp>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	da46      	bge.n	800d26c <_strtod_l+0x864>
 800d1de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1e0:	ea53 030a 	orrs.w	r3, r3, sl
 800d1e4:	d16c      	bne.n	800d2c0 <_strtod_l+0x8b8>
 800d1e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d168      	bne.n	800d2c0 <_strtod_l+0x8b8>
 800d1ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d1f2:	0d1b      	lsrs	r3, r3, #20
 800d1f4:	051b      	lsls	r3, r3, #20
 800d1f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d1fa:	d961      	bls.n	800d2c0 <_strtod_l+0x8b8>
 800d1fc:	6963      	ldr	r3, [r4, #20]
 800d1fe:	b913      	cbnz	r3, 800d206 <_strtod_l+0x7fe>
 800d200:	6923      	ldr	r3, [r4, #16]
 800d202:	2b01      	cmp	r3, #1
 800d204:	dd5c      	ble.n	800d2c0 <_strtod_l+0x8b8>
 800d206:	4621      	mov	r1, r4
 800d208:	2201      	movs	r2, #1
 800d20a:	9805      	ldr	r0, [sp, #20]
 800d20c:	f001 ff06 	bl	800f01c <__lshift>
 800d210:	4641      	mov	r1, r8
 800d212:	4604      	mov	r4, r0
 800d214:	f001 ff6e 	bl	800f0f4 <__mcmp>
 800d218:	2800      	cmp	r0, #0
 800d21a:	dd51      	ble.n	800d2c0 <_strtod_l+0x8b8>
 800d21c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d220:	9a08      	ldr	r2, [sp, #32]
 800d222:	0d1b      	lsrs	r3, r3, #20
 800d224:	051b      	lsls	r3, r3, #20
 800d226:	2a00      	cmp	r2, #0
 800d228:	d06b      	beq.n	800d302 <_strtod_l+0x8fa>
 800d22a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d22e:	d868      	bhi.n	800d302 <_strtod_l+0x8fa>
 800d230:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d234:	f67f ae9d 	bls.w	800cf72 <_strtod_l+0x56a>
 800d238:	4b0a      	ldr	r3, [pc, #40]	@ (800d264 <_strtod_l+0x85c>)
 800d23a:	4650      	mov	r0, sl
 800d23c:	4659      	mov	r1, fp
 800d23e:	2200      	movs	r2, #0
 800d240:	f7f3 f9ea 	bl	8000618 <__aeabi_dmul>
 800d244:	4b08      	ldr	r3, [pc, #32]	@ (800d268 <_strtod_l+0x860>)
 800d246:	400b      	ands	r3, r1
 800d248:	4682      	mov	sl, r0
 800d24a:	468b      	mov	fp, r1
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f47f ae05 	bne.w	800ce5c <_strtod_l+0x454>
 800d252:	9a05      	ldr	r2, [sp, #20]
 800d254:	2322      	movs	r3, #34	@ 0x22
 800d256:	6013      	str	r3, [r2, #0]
 800d258:	e600      	b.n	800ce5c <_strtod_l+0x454>
 800d25a:	bf00      	nop
 800d25c:	08010198 	.word	0x08010198
 800d260:	fffffc02 	.word	0xfffffc02
 800d264:	39500000 	.word	0x39500000
 800d268:	7ff00000 	.word	0x7ff00000
 800d26c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d270:	d165      	bne.n	800d33e <_strtod_l+0x936>
 800d272:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d274:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d278:	b35a      	cbz	r2, 800d2d2 <_strtod_l+0x8ca>
 800d27a:	4a9f      	ldr	r2, [pc, #636]	@ (800d4f8 <_strtod_l+0xaf0>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d12b      	bne.n	800d2d8 <_strtod_l+0x8d0>
 800d280:	9b08      	ldr	r3, [sp, #32]
 800d282:	4651      	mov	r1, sl
 800d284:	b303      	cbz	r3, 800d2c8 <_strtod_l+0x8c0>
 800d286:	4b9d      	ldr	r3, [pc, #628]	@ (800d4fc <_strtod_l+0xaf4>)
 800d288:	465a      	mov	r2, fp
 800d28a:	4013      	ands	r3, r2
 800d28c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d290:	f04f 32ff 	mov.w	r2, #4294967295
 800d294:	d81b      	bhi.n	800d2ce <_strtod_l+0x8c6>
 800d296:	0d1b      	lsrs	r3, r3, #20
 800d298:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d29c:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a0:	4299      	cmp	r1, r3
 800d2a2:	d119      	bne.n	800d2d8 <_strtod_l+0x8d0>
 800d2a4:	4b96      	ldr	r3, [pc, #600]	@ (800d500 <_strtod_l+0xaf8>)
 800d2a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d102      	bne.n	800d2b2 <_strtod_l+0x8aa>
 800d2ac:	3101      	adds	r1, #1
 800d2ae:	f43f adca 	beq.w	800ce46 <_strtod_l+0x43e>
 800d2b2:	4b92      	ldr	r3, [pc, #584]	@ (800d4fc <_strtod_l+0xaf4>)
 800d2b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2b6:	401a      	ands	r2, r3
 800d2b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d2bc:	f04f 0a00 	mov.w	sl, #0
 800d2c0:	9b08      	ldr	r3, [sp, #32]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1b8      	bne.n	800d238 <_strtod_l+0x830>
 800d2c6:	e5c9      	b.n	800ce5c <_strtod_l+0x454>
 800d2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2cc:	e7e8      	b.n	800d2a0 <_strtod_l+0x898>
 800d2ce:	4613      	mov	r3, r2
 800d2d0:	e7e6      	b.n	800d2a0 <_strtod_l+0x898>
 800d2d2:	ea53 030a 	orrs.w	r3, r3, sl
 800d2d6:	d0a1      	beq.n	800d21c <_strtod_l+0x814>
 800d2d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2da:	b1db      	cbz	r3, 800d314 <_strtod_l+0x90c>
 800d2dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2de:	4213      	tst	r3, r2
 800d2e0:	d0ee      	beq.n	800d2c0 <_strtod_l+0x8b8>
 800d2e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2e4:	9a08      	ldr	r2, [sp, #32]
 800d2e6:	4650      	mov	r0, sl
 800d2e8:	4659      	mov	r1, fp
 800d2ea:	b1bb      	cbz	r3, 800d31c <_strtod_l+0x914>
 800d2ec:	f7ff fb6e 	bl	800c9cc <sulp>
 800d2f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2f4:	ec53 2b10 	vmov	r2, r3, d0
 800d2f8:	f7f2 ffd8 	bl	80002ac <__adddf3>
 800d2fc:	4682      	mov	sl, r0
 800d2fe:	468b      	mov	fp, r1
 800d300:	e7de      	b.n	800d2c0 <_strtod_l+0x8b8>
 800d302:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d306:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d30a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d30e:	f04f 3aff 	mov.w	sl, #4294967295
 800d312:	e7d5      	b.n	800d2c0 <_strtod_l+0x8b8>
 800d314:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d316:	ea13 0f0a 	tst.w	r3, sl
 800d31a:	e7e1      	b.n	800d2e0 <_strtod_l+0x8d8>
 800d31c:	f7ff fb56 	bl	800c9cc <sulp>
 800d320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d324:	ec53 2b10 	vmov	r2, r3, d0
 800d328:	f7f2 ffbe 	bl	80002a8 <__aeabi_dsub>
 800d32c:	2200      	movs	r2, #0
 800d32e:	2300      	movs	r3, #0
 800d330:	4682      	mov	sl, r0
 800d332:	468b      	mov	fp, r1
 800d334:	f7f3 fbd8 	bl	8000ae8 <__aeabi_dcmpeq>
 800d338:	2800      	cmp	r0, #0
 800d33a:	d0c1      	beq.n	800d2c0 <_strtod_l+0x8b8>
 800d33c:	e619      	b.n	800cf72 <_strtod_l+0x56a>
 800d33e:	4641      	mov	r1, r8
 800d340:	4620      	mov	r0, r4
 800d342:	f002 f84f 	bl	800f3e4 <__ratio>
 800d346:	ec57 6b10 	vmov	r6, r7, d0
 800d34a:	2200      	movs	r2, #0
 800d34c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d350:	4630      	mov	r0, r6
 800d352:	4639      	mov	r1, r7
 800d354:	f7f3 fbdc 	bl	8000b10 <__aeabi_dcmple>
 800d358:	2800      	cmp	r0, #0
 800d35a:	d06f      	beq.n	800d43c <_strtod_l+0xa34>
 800d35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d17a      	bne.n	800d458 <_strtod_l+0xa50>
 800d362:	f1ba 0f00 	cmp.w	sl, #0
 800d366:	d158      	bne.n	800d41a <_strtod_l+0xa12>
 800d368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d36a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d15a      	bne.n	800d428 <_strtod_l+0xa20>
 800d372:	4b64      	ldr	r3, [pc, #400]	@ (800d504 <_strtod_l+0xafc>)
 800d374:	2200      	movs	r2, #0
 800d376:	4630      	mov	r0, r6
 800d378:	4639      	mov	r1, r7
 800d37a:	f7f3 fbbf 	bl	8000afc <__aeabi_dcmplt>
 800d37e:	2800      	cmp	r0, #0
 800d380:	d159      	bne.n	800d436 <_strtod_l+0xa2e>
 800d382:	4630      	mov	r0, r6
 800d384:	4639      	mov	r1, r7
 800d386:	4b60      	ldr	r3, [pc, #384]	@ (800d508 <_strtod_l+0xb00>)
 800d388:	2200      	movs	r2, #0
 800d38a:	f7f3 f945 	bl	8000618 <__aeabi_dmul>
 800d38e:	4606      	mov	r6, r0
 800d390:	460f      	mov	r7, r1
 800d392:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d396:	9606      	str	r6, [sp, #24]
 800d398:	9307      	str	r3, [sp, #28]
 800d39a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d39e:	4d57      	ldr	r5, [pc, #348]	@ (800d4fc <_strtod_l+0xaf4>)
 800d3a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3a6:	401d      	ands	r5, r3
 800d3a8:	4b58      	ldr	r3, [pc, #352]	@ (800d50c <_strtod_l+0xb04>)
 800d3aa:	429d      	cmp	r5, r3
 800d3ac:	f040 80b2 	bne.w	800d514 <_strtod_l+0xb0c>
 800d3b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d3b6:	ec4b ab10 	vmov	d0, sl, fp
 800d3ba:	f001 ff4b 	bl	800f254 <__ulp>
 800d3be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3c2:	ec51 0b10 	vmov	r0, r1, d0
 800d3c6:	f7f3 f927 	bl	8000618 <__aeabi_dmul>
 800d3ca:	4652      	mov	r2, sl
 800d3cc:	465b      	mov	r3, fp
 800d3ce:	f7f2 ff6d 	bl	80002ac <__adddf3>
 800d3d2:	460b      	mov	r3, r1
 800d3d4:	4949      	ldr	r1, [pc, #292]	@ (800d4fc <_strtod_l+0xaf4>)
 800d3d6:	4a4e      	ldr	r2, [pc, #312]	@ (800d510 <_strtod_l+0xb08>)
 800d3d8:	4019      	ands	r1, r3
 800d3da:	4291      	cmp	r1, r2
 800d3dc:	4682      	mov	sl, r0
 800d3de:	d942      	bls.n	800d466 <_strtod_l+0xa5e>
 800d3e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3e2:	4b47      	ldr	r3, [pc, #284]	@ (800d500 <_strtod_l+0xaf8>)
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d103      	bne.n	800d3f0 <_strtod_l+0x9e8>
 800d3e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	f43f ad2b 	beq.w	800ce46 <_strtod_l+0x43e>
 800d3f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d500 <_strtod_l+0xaf8>
 800d3f4:	f04f 3aff 	mov.w	sl, #4294967295
 800d3f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3fa:	9805      	ldr	r0, [sp, #20]
 800d3fc:	f001 fbf6 	bl	800ebec <_Bfree>
 800d400:	9805      	ldr	r0, [sp, #20]
 800d402:	4649      	mov	r1, r9
 800d404:	f001 fbf2 	bl	800ebec <_Bfree>
 800d408:	9805      	ldr	r0, [sp, #20]
 800d40a:	4641      	mov	r1, r8
 800d40c:	f001 fbee 	bl	800ebec <_Bfree>
 800d410:	9805      	ldr	r0, [sp, #20]
 800d412:	4621      	mov	r1, r4
 800d414:	f001 fbea 	bl	800ebec <_Bfree>
 800d418:	e618      	b.n	800d04c <_strtod_l+0x644>
 800d41a:	f1ba 0f01 	cmp.w	sl, #1
 800d41e:	d103      	bne.n	800d428 <_strtod_l+0xa20>
 800d420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d422:	2b00      	cmp	r3, #0
 800d424:	f43f ada5 	beq.w	800cf72 <_strtod_l+0x56a>
 800d428:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d4d8 <_strtod_l+0xad0>
 800d42c:	4f35      	ldr	r7, [pc, #212]	@ (800d504 <_strtod_l+0xafc>)
 800d42e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d432:	2600      	movs	r6, #0
 800d434:	e7b1      	b.n	800d39a <_strtod_l+0x992>
 800d436:	4f34      	ldr	r7, [pc, #208]	@ (800d508 <_strtod_l+0xb00>)
 800d438:	2600      	movs	r6, #0
 800d43a:	e7aa      	b.n	800d392 <_strtod_l+0x98a>
 800d43c:	4b32      	ldr	r3, [pc, #200]	@ (800d508 <_strtod_l+0xb00>)
 800d43e:	4630      	mov	r0, r6
 800d440:	4639      	mov	r1, r7
 800d442:	2200      	movs	r2, #0
 800d444:	f7f3 f8e8 	bl	8000618 <__aeabi_dmul>
 800d448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d44a:	4606      	mov	r6, r0
 800d44c:	460f      	mov	r7, r1
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d09f      	beq.n	800d392 <_strtod_l+0x98a>
 800d452:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d456:	e7a0      	b.n	800d39a <_strtod_l+0x992>
 800d458:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d4e0 <_strtod_l+0xad8>
 800d45c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d460:	ec57 6b17 	vmov	r6, r7, d7
 800d464:	e799      	b.n	800d39a <_strtod_l+0x992>
 800d466:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d46a:	9b08      	ldr	r3, [sp, #32]
 800d46c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d470:	2b00      	cmp	r3, #0
 800d472:	d1c1      	bne.n	800d3f8 <_strtod_l+0x9f0>
 800d474:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d478:	0d1b      	lsrs	r3, r3, #20
 800d47a:	051b      	lsls	r3, r3, #20
 800d47c:	429d      	cmp	r5, r3
 800d47e:	d1bb      	bne.n	800d3f8 <_strtod_l+0x9f0>
 800d480:	4630      	mov	r0, r6
 800d482:	4639      	mov	r1, r7
 800d484:	f7f3 fbe8 	bl	8000c58 <__aeabi_d2lz>
 800d488:	f7f3 f898 	bl	80005bc <__aeabi_l2d>
 800d48c:	4602      	mov	r2, r0
 800d48e:	460b      	mov	r3, r1
 800d490:	4630      	mov	r0, r6
 800d492:	4639      	mov	r1, r7
 800d494:	f7f2 ff08 	bl	80002a8 <__aeabi_dsub>
 800d498:	460b      	mov	r3, r1
 800d49a:	4602      	mov	r2, r0
 800d49c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d4a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4a6:	ea46 060a 	orr.w	r6, r6, sl
 800d4aa:	431e      	orrs	r6, r3
 800d4ac:	d06f      	beq.n	800d58e <_strtod_l+0xb86>
 800d4ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4e8 <_strtod_l+0xae0>)
 800d4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b4:	f7f3 fb22 	bl	8000afc <__aeabi_dcmplt>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	f47f accf 	bne.w	800ce5c <_strtod_l+0x454>
 800d4be:	a30c      	add	r3, pc, #48	@ (adr r3, 800d4f0 <_strtod_l+0xae8>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4c8:	f7f3 fb36 	bl	8000b38 <__aeabi_dcmpgt>
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	d093      	beq.n	800d3f8 <_strtod_l+0x9f0>
 800d4d0:	e4c4      	b.n	800ce5c <_strtod_l+0x454>
 800d4d2:	bf00      	nop
 800d4d4:	f3af 8000 	nop.w
 800d4d8:	00000000 	.word	0x00000000
 800d4dc:	bff00000 	.word	0xbff00000
 800d4e0:	00000000 	.word	0x00000000
 800d4e4:	3ff00000 	.word	0x3ff00000
 800d4e8:	94a03595 	.word	0x94a03595
 800d4ec:	3fdfffff 	.word	0x3fdfffff
 800d4f0:	35afe535 	.word	0x35afe535
 800d4f4:	3fe00000 	.word	0x3fe00000
 800d4f8:	000fffff 	.word	0x000fffff
 800d4fc:	7ff00000 	.word	0x7ff00000
 800d500:	7fefffff 	.word	0x7fefffff
 800d504:	3ff00000 	.word	0x3ff00000
 800d508:	3fe00000 	.word	0x3fe00000
 800d50c:	7fe00000 	.word	0x7fe00000
 800d510:	7c9fffff 	.word	0x7c9fffff
 800d514:	9b08      	ldr	r3, [sp, #32]
 800d516:	b323      	cbz	r3, 800d562 <_strtod_l+0xb5a>
 800d518:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d51c:	d821      	bhi.n	800d562 <_strtod_l+0xb5a>
 800d51e:	a328      	add	r3, pc, #160	@ (adr r3, 800d5c0 <_strtod_l+0xbb8>)
 800d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d524:	4630      	mov	r0, r6
 800d526:	4639      	mov	r1, r7
 800d528:	f7f3 faf2 	bl	8000b10 <__aeabi_dcmple>
 800d52c:	b1a0      	cbz	r0, 800d558 <_strtod_l+0xb50>
 800d52e:	4639      	mov	r1, r7
 800d530:	4630      	mov	r0, r6
 800d532:	f7f3 fb21 	bl	8000b78 <__aeabi_d2uiz>
 800d536:	2801      	cmp	r0, #1
 800d538:	bf38      	it	cc
 800d53a:	2001      	movcc	r0, #1
 800d53c:	f7f2 fff2 	bl	8000524 <__aeabi_ui2d>
 800d540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d542:	4606      	mov	r6, r0
 800d544:	460f      	mov	r7, r1
 800d546:	b9fb      	cbnz	r3, 800d588 <_strtod_l+0xb80>
 800d548:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d54c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d54e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d550:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d554:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d558:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d55a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d55e:	1b5b      	subs	r3, r3, r5
 800d560:	9311      	str	r3, [sp, #68]	@ 0x44
 800d562:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d566:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d56a:	f001 fe73 	bl	800f254 <__ulp>
 800d56e:	4650      	mov	r0, sl
 800d570:	ec53 2b10 	vmov	r2, r3, d0
 800d574:	4659      	mov	r1, fp
 800d576:	f7f3 f84f 	bl	8000618 <__aeabi_dmul>
 800d57a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d57e:	f7f2 fe95 	bl	80002ac <__adddf3>
 800d582:	4682      	mov	sl, r0
 800d584:	468b      	mov	fp, r1
 800d586:	e770      	b.n	800d46a <_strtod_l+0xa62>
 800d588:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d58c:	e7e0      	b.n	800d550 <_strtod_l+0xb48>
 800d58e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d5c8 <_strtod_l+0xbc0>)
 800d590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d594:	f7f3 fab2 	bl	8000afc <__aeabi_dcmplt>
 800d598:	e798      	b.n	800d4cc <_strtod_l+0xac4>
 800d59a:	2300      	movs	r3, #0
 800d59c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d59e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d5a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5a2:	6013      	str	r3, [r2, #0]
 800d5a4:	f7ff ba6d 	b.w	800ca82 <_strtod_l+0x7a>
 800d5a8:	2a65      	cmp	r2, #101	@ 0x65
 800d5aa:	f43f ab66 	beq.w	800cc7a <_strtod_l+0x272>
 800d5ae:	2a45      	cmp	r2, #69	@ 0x45
 800d5b0:	f43f ab63 	beq.w	800cc7a <_strtod_l+0x272>
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	f7ff bb9e 	b.w	800ccf6 <_strtod_l+0x2ee>
 800d5ba:	bf00      	nop
 800d5bc:	f3af 8000 	nop.w
 800d5c0:	ffc00000 	.word	0xffc00000
 800d5c4:	41dfffff 	.word	0x41dfffff
 800d5c8:	94a03595 	.word	0x94a03595
 800d5cc:	3fcfffff 	.word	0x3fcfffff

0800d5d0 <_strtod_r>:
 800d5d0:	4b01      	ldr	r3, [pc, #4]	@ (800d5d8 <_strtod_r+0x8>)
 800d5d2:	f7ff ba19 	b.w	800ca08 <_strtod_l>
 800d5d6:	bf00      	nop
 800d5d8:	200001bc 	.word	0x200001bc

0800d5dc <__ssputs_r>:
 800d5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e0:	688e      	ldr	r6, [r1, #8]
 800d5e2:	461f      	mov	r7, r3
 800d5e4:	42be      	cmp	r6, r7
 800d5e6:	680b      	ldr	r3, [r1, #0]
 800d5e8:	4682      	mov	sl, r0
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	4690      	mov	r8, r2
 800d5ee:	d82d      	bhi.n	800d64c <__ssputs_r+0x70>
 800d5f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5f8:	d026      	beq.n	800d648 <__ssputs_r+0x6c>
 800d5fa:	6965      	ldr	r5, [r4, #20]
 800d5fc:	6909      	ldr	r1, [r1, #16]
 800d5fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d602:	eba3 0901 	sub.w	r9, r3, r1
 800d606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d60a:	1c7b      	adds	r3, r7, #1
 800d60c:	444b      	add	r3, r9
 800d60e:	106d      	asrs	r5, r5, #1
 800d610:	429d      	cmp	r5, r3
 800d612:	bf38      	it	cc
 800d614:	461d      	movcc	r5, r3
 800d616:	0553      	lsls	r3, r2, #21
 800d618:	d527      	bpl.n	800d66a <__ssputs_r+0x8e>
 800d61a:	4629      	mov	r1, r5
 800d61c:	f7fe fb8e 	bl	800bd3c <_malloc_r>
 800d620:	4606      	mov	r6, r0
 800d622:	b360      	cbz	r0, 800d67e <__ssputs_r+0xa2>
 800d624:	6921      	ldr	r1, [r4, #16]
 800d626:	464a      	mov	r2, r9
 800d628:	f000 ff35 	bl	800e496 <memcpy>
 800d62c:	89a3      	ldrh	r3, [r4, #12]
 800d62e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d636:	81a3      	strh	r3, [r4, #12]
 800d638:	6126      	str	r6, [r4, #16]
 800d63a:	6165      	str	r5, [r4, #20]
 800d63c:	444e      	add	r6, r9
 800d63e:	eba5 0509 	sub.w	r5, r5, r9
 800d642:	6026      	str	r6, [r4, #0]
 800d644:	60a5      	str	r5, [r4, #8]
 800d646:	463e      	mov	r6, r7
 800d648:	42be      	cmp	r6, r7
 800d64a:	d900      	bls.n	800d64e <__ssputs_r+0x72>
 800d64c:	463e      	mov	r6, r7
 800d64e:	6820      	ldr	r0, [r4, #0]
 800d650:	4632      	mov	r2, r6
 800d652:	4641      	mov	r1, r8
 800d654:	f000 fef3 	bl	800e43e <memmove>
 800d658:	68a3      	ldr	r3, [r4, #8]
 800d65a:	1b9b      	subs	r3, r3, r6
 800d65c:	60a3      	str	r3, [r4, #8]
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	4433      	add	r3, r6
 800d662:	6023      	str	r3, [r4, #0]
 800d664:	2000      	movs	r0, #0
 800d666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66a:	462a      	mov	r2, r5
 800d66c:	f001 ff30 	bl	800f4d0 <_realloc_r>
 800d670:	4606      	mov	r6, r0
 800d672:	2800      	cmp	r0, #0
 800d674:	d1e0      	bne.n	800d638 <__ssputs_r+0x5c>
 800d676:	6921      	ldr	r1, [r4, #16]
 800d678:	4650      	mov	r0, sl
 800d67a:	f7ff f95d 	bl	800c938 <_free_r>
 800d67e:	230c      	movs	r3, #12
 800d680:	f8ca 3000 	str.w	r3, [sl]
 800d684:	89a3      	ldrh	r3, [r4, #12]
 800d686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d68a:	81a3      	strh	r3, [r4, #12]
 800d68c:	f04f 30ff 	mov.w	r0, #4294967295
 800d690:	e7e9      	b.n	800d666 <__ssputs_r+0x8a>
	...

0800d694 <_svfiprintf_r>:
 800d694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d698:	4698      	mov	r8, r3
 800d69a:	898b      	ldrh	r3, [r1, #12]
 800d69c:	061b      	lsls	r3, r3, #24
 800d69e:	b09d      	sub	sp, #116	@ 0x74
 800d6a0:	4607      	mov	r7, r0
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	4614      	mov	r4, r2
 800d6a6:	d510      	bpl.n	800d6ca <_svfiprintf_r+0x36>
 800d6a8:	690b      	ldr	r3, [r1, #16]
 800d6aa:	b973      	cbnz	r3, 800d6ca <_svfiprintf_r+0x36>
 800d6ac:	2140      	movs	r1, #64	@ 0x40
 800d6ae:	f7fe fb45 	bl	800bd3c <_malloc_r>
 800d6b2:	6028      	str	r0, [r5, #0]
 800d6b4:	6128      	str	r0, [r5, #16]
 800d6b6:	b930      	cbnz	r0, 800d6c6 <_svfiprintf_r+0x32>
 800d6b8:	230c      	movs	r3, #12
 800d6ba:	603b      	str	r3, [r7, #0]
 800d6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c0:	b01d      	add	sp, #116	@ 0x74
 800d6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c6:	2340      	movs	r3, #64	@ 0x40
 800d6c8:	616b      	str	r3, [r5, #20]
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ce:	2320      	movs	r3, #32
 800d6d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6d8:	2330      	movs	r3, #48	@ 0x30
 800d6da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d878 <_svfiprintf_r+0x1e4>
 800d6de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6e2:	f04f 0901 	mov.w	r9, #1
 800d6e6:	4623      	mov	r3, r4
 800d6e8:	469a      	mov	sl, r3
 800d6ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ee:	b10a      	cbz	r2, 800d6f4 <_svfiprintf_r+0x60>
 800d6f0:	2a25      	cmp	r2, #37	@ 0x25
 800d6f2:	d1f9      	bne.n	800d6e8 <_svfiprintf_r+0x54>
 800d6f4:	ebba 0b04 	subs.w	fp, sl, r4
 800d6f8:	d00b      	beq.n	800d712 <_svfiprintf_r+0x7e>
 800d6fa:	465b      	mov	r3, fp
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	4629      	mov	r1, r5
 800d700:	4638      	mov	r0, r7
 800d702:	f7ff ff6b 	bl	800d5dc <__ssputs_r>
 800d706:	3001      	adds	r0, #1
 800d708:	f000 80a7 	beq.w	800d85a <_svfiprintf_r+0x1c6>
 800d70c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d70e:	445a      	add	r2, fp
 800d710:	9209      	str	r2, [sp, #36]	@ 0x24
 800d712:	f89a 3000 	ldrb.w	r3, [sl]
 800d716:	2b00      	cmp	r3, #0
 800d718:	f000 809f 	beq.w	800d85a <_svfiprintf_r+0x1c6>
 800d71c:	2300      	movs	r3, #0
 800d71e:	f04f 32ff 	mov.w	r2, #4294967295
 800d722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d726:	f10a 0a01 	add.w	sl, sl, #1
 800d72a:	9304      	str	r3, [sp, #16]
 800d72c:	9307      	str	r3, [sp, #28]
 800d72e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d732:	931a      	str	r3, [sp, #104]	@ 0x68
 800d734:	4654      	mov	r4, sl
 800d736:	2205      	movs	r2, #5
 800d738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73c:	484e      	ldr	r0, [pc, #312]	@ (800d878 <_svfiprintf_r+0x1e4>)
 800d73e:	f7f2 fd5f 	bl	8000200 <memchr>
 800d742:	9a04      	ldr	r2, [sp, #16]
 800d744:	b9d8      	cbnz	r0, 800d77e <_svfiprintf_r+0xea>
 800d746:	06d0      	lsls	r0, r2, #27
 800d748:	bf44      	itt	mi
 800d74a:	2320      	movmi	r3, #32
 800d74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d750:	0711      	lsls	r1, r2, #28
 800d752:	bf44      	itt	mi
 800d754:	232b      	movmi	r3, #43	@ 0x2b
 800d756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d75a:	f89a 3000 	ldrb.w	r3, [sl]
 800d75e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d760:	d015      	beq.n	800d78e <_svfiprintf_r+0xfa>
 800d762:	9a07      	ldr	r2, [sp, #28]
 800d764:	4654      	mov	r4, sl
 800d766:	2000      	movs	r0, #0
 800d768:	f04f 0c0a 	mov.w	ip, #10
 800d76c:	4621      	mov	r1, r4
 800d76e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d772:	3b30      	subs	r3, #48	@ 0x30
 800d774:	2b09      	cmp	r3, #9
 800d776:	d94b      	bls.n	800d810 <_svfiprintf_r+0x17c>
 800d778:	b1b0      	cbz	r0, 800d7a8 <_svfiprintf_r+0x114>
 800d77a:	9207      	str	r2, [sp, #28]
 800d77c:	e014      	b.n	800d7a8 <_svfiprintf_r+0x114>
 800d77e:	eba0 0308 	sub.w	r3, r0, r8
 800d782:	fa09 f303 	lsl.w	r3, r9, r3
 800d786:	4313      	orrs	r3, r2
 800d788:	9304      	str	r3, [sp, #16]
 800d78a:	46a2      	mov	sl, r4
 800d78c:	e7d2      	b.n	800d734 <_svfiprintf_r+0xa0>
 800d78e:	9b03      	ldr	r3, [sp, #12]
 800d790:	1d19      	adds	r1, r3, #4
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	9103      	str	r1, [sp, #12]
 800d796:	2b00      	cmp	r3, #0
 800d798:	bfbb      	ittet	lt
 800d79a:	425b      	neglt	r3, r3
 800d79c:	f042 0202 	orrlt.w	r2, r2, #2
 800d7a0:	9307      	strge	r3, [sp, #28]
 800d7a2:	9307      	strlt	r3, [sp, #28]
 800d7a4:	bfb8      	it	lt
 800d7a6:	9204      	strlt	r2, [sp, #16]
 800d7a8:	7823      	ldrb	r3, [r4, #0]
 800d7aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7ac:	d10a      	bne.n	800d7c4 <_svfiprintf_r+0x130>
 800d7ae:	7863      	ldrb	r3, [r4, #1]
 800d7b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7b2:	d132      	bne.n	800d81a <_svfiprintf_r+0x186>
 800d7b4:	9b03      	ldr	r3, [sp, #12]
 800d7b6:	1d1a      	adds	r2, r3, #4
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	9203      	str	r2, [sp, #12]
 800d7bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7c0:	3402      	adds	r4, #2
 800d7c2:	9305      	str	r3, [sp, #20]
 800d7c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d888 <_svfiprintf_r+0x1f4>
 800d7c8:	7821      	ldrb	r1, [r4, #0]
 800d7ca:	2203      	movs	r2, #3
 800d7cc:	4650      	mov	r0, sl
 800d7ce:	f7f2 fd17 	bl	8000200 <memchr>
 800d7d2:	b138      	cbz	r0, 800d7e4 <_svfiprintf_r+0x150>
 800d7d4:	9b04      	ldr	r3, [sp, #16]
 800d7d6:	eba0 000a 	sub.w	r0, r0, sl
 800d7da:	2240      	movs	r2, #64	@ 0x40
 800d7dc:	4082      	lsls	r2, r0
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	3401      	adds	r4, #1
 800d7e2:	9304      	str	r3, [sp, #16]
 800d7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e8:	4824      	ldr	r0, [pc, #144]	@ (800d87c <_svfiprintf_r+0x1e8>)
 800d7ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7ee:	2206      	movs	r2, #6
 800d7f0:	f7f2 fd06 	bl	8000200 <memchr>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	d036      	beq.n	800d866 <_svfiprintf_r+0x1d2>
 800d7f8:	4b21      	ldr	r3, [pc, #132]	@ (800d880 <_svfiprintf_r+0x1ec>)
 800d7fa:	bb1b      	cbnz	r3, 800d844 <_svfiprintf_r+0x1b0>
 800d7fc:	9b03      	ldr	r3, [sp, #12]
 800d7fe:	3307      	adds	r3, #7
 800d800:	f023 0307 	bic.w	r3, r3, #7
 800d804:	3308      	adds	r3, #8
 800d806:	9303      	str	r3, [sp, #12]
 800d808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d80a:	4433      	add	r3, r6
 800d80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d80e:	e76a      	b.n	800d6e6 <_svfiprintf_r+0x52>
 800d810:	fb0c 3202 	mla	r2, ip, r2, r3
 800d814:	460c      	mov	r4, r1
 800d816:	2001      	movs	r0, #1
 800d818:	e7a8      	b.n	800d76c <_svfiprintf_r+0xd8>
 800d81a:	2300      	movs	r3, #0
 800d81c:	3401      	adds	r4, #1
 800d81e:	9305      	str	r3, [sp, #20]
 800d820:	4619      	mov	r1, r3
 800d822:	f04f 0c0a 	mov.w	ip, #10
 800d826:	4620      	mov	r0, r4
 800d828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d82c:	3a30      	subs	r2, #48	@ 0x30
 800d82e:	2a09      	cmp	r2, #9
 800d830:	d903      	bls.n	800d83a <_svfiprintf_r+0x1a6>
 800d832:	2b00      	cmp	r3, #0
 800d834:	d0c6      	beq.n	800d7c4 <_svfiprintf_r+0x130>
 800d836:	9105      	str	r1, [sp, #20]
 800d838:	e7c4      	b.n	800d7c4 <_svfiprintf_r+0x130>
 800d83a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d83e:	4604      	mov	r4, r0
 800d840:	2301      	movs	r3, #1
 800d842:	e7f0      	b.n	800d826 <_svfiprintf_r+0x192>
 800d844:	ab03      	add	r3, sp, #12
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	462a      	mov	r2, r5
 800d84a:	4b0e      	ldr	r3, [pc, #56]	@ (800d884 <_svfiprintf_r+0x1f0>)
 800d84c:	a904      	add	r1, sp, #16
 800d84e:	4638      	mov	r0, r7
 800d850:	f3af 8000 	nop.w
 800d854:	1c42      	adds	r2, r0, #1
 800d856:	4606      	mov	r6, r0
 800d858:	d1d6      	bne.n	800d808 <_svfiprintf_r+0x174>
 800d85a:	89ab      	ldrh	r3, [r5, #12]
 800d85c:	065b      	lsls	r3, r3, #25
 800d85e:	f53f af2d 	bmi.w	800d6bc <_svfiprintf_r+0x28>
 800d862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d864:	e72c      	b.n	800d6c0 <_svfiprintf_r+0x2c>
 800d866:	ab03      	add	r3, sp, #12
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	462a      	mov	r2, r5
 800d86c:	4b05      	ldr	r3, [pc, #20]	@ (800d884 <_svfiprintf_r+0x1f0>)
 800d86e:	a904      	add	r1, sp, #16
 800d870:	4638      	mov	r0, r7
 800d872:	f000 fa45 	bl	800dd00 <_printf_i>
 800d876:	e7ed      	b.n	800d854 <_svfiprintf_r+0x1c0>
 800d878:	080101c0 	.word	0x080101c0
 800d87c:	080101ca 	.word	0x080101ca
 800d880:	00000000 	.word	0x00000000
 800d884:	0800d5dd 	.word	0x0800d5dd
 800d888:	080101c6 	.word	0x080101c6

0800d88c <_sungetc_r>:
 800d88c:	b538      	push	{r3, r4, r5, lr}
 800d88e:	1c4b      	adds	r3, r1, #1
 800d890:	4614      	mov	r4, r2
 800d892:	d103      	bne.n	800d89c <_sungetc_r+0x10>
 800d894:	f04f 35ff 	mov.w	r5, #4294967295
 800d898:	4628      	mov	r0, r5
 800d89a:	bd38      	pop	{r3, r4, r5, pc}
 800d89c:	8993      	ldrh	r3, [r2, #12]
 800d89e:	f023 0320 	bic.w	r3, r3, #32
 800d8a2:	8193      	strh	r3, [r2, #12]
 800d8a4:	6853      	ldr	r3, [r2, #4]
 800d8a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d8a8:	b2cd      	uxtb	r5, r1
 800d8aa:	b18a      	cbz	r2, 800d8d0 <_sungetc_r+0x44>
 800d8ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	dd08      	ble.n	800d8c4 <_sungetc_r+0x38>
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	1e5a      	subs	r2, r3, #1
 800d8b6:	6022      	str	r2, [r4, #0]
 800d8b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d8bc:	6863      	ldr	r3, [r4, #4]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	6063      	str	r3, [r4, #4]
 800d8c2:	e7e9      	b.n	800d898 <_sungetc_r+0xc>
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	f000 fd80 	bl	800e3ca <__submore>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	d0f1      	beq.n	800d8b2 <_sungetc_r+0x26>
 800d8ce:	e7e1      	b.n	800d894 <_sungetc_r+0x8>
 800d8d0:	6921      	ldr	r1, [r4, #16]
 800d8d2:	6822      	ldr	r2, [r4, #0]
 800d8d4:	b141      	cbz	r1, 800d8e8 <_sungetc_r+0x5c>
 800d8d6:	4291      	cmp	r1, r2
 800d8d8:	d206      	bcs.n	800d8e8 <_sungetc_r+0x5c>
 800d8da:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800d8de:	42a9      	cmp	r1, r5
 800d8e0:	d102      	bne.n	800d8e8 <_sungetc_r+0x5c>
 800d8e2:	3a01      	subs	r2, #1
 800d8e4:	6022      	str	r2, [r4, #0]
 800d8e6:	e7ea      	b.n	800d8be <_sungetc_r+0x32>
 800d8e8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800d8ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8f2:	2303      	movs	r3, #3
 800d8f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d8f6:	4623      	mov	r3, r4
 800d8f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d8fc:	6023      	str	r3, [r4, #0]
 800d8fe:	2301      	movs	r3, #1
 800d900:	e7de      	b.n	800d8c0 <_sungetc_r+0x34>

0800d902 <__ssrefill_r>:
 800d902:	b510      	push	{r4, lr}
 800d904:	460c      	mov	r4, r1
 800d906:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d908:	b169      	cbz	r1, 800d926 <__ssrefill_r+0x24>
 800d90a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d90e:	4299      	cmp	r1, r3
 800d910:	d001      	beq.n	800d916 <__ssrefill_r+0x14>
 800d912:	f7ff f811 	bl	800c938 <_free_r>
 800d916:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d918:	6063      	str	r3, [r4, #4]
 800d91a:	2000      	movs	r0, #0
 800d91c:	6360      	str	r0, [r4, #52]	@ 0x34
 800d91e:	b113      	cbz	r3, 800d926 <__ssrefill_r+0x24>
 800d920:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d922:	6023      	str	r3, [r4, #0]
 800d924:	bd10      	pop	{r4, pc}
 800d926:	6923      	ldr	r3, [r4, #16]
 800d928:	6023      	str	r3, [r4, #0]
 800d92a:	2300      	movs	r3, #0
 800d92c:	6063      	str	r3, [r4, #4]
 800d92e:	89a3      	ldrh	r3, [r4, #12]
 800d930:	f043 0320 	orr.w	r3, r3, #32
 800d934:	81a3      	strh	r3, [r4, #12]
 800d936:	f04f 30ff 	mov.w	r0, #4294967295
 800d93a:	e7f3      	b.n	800d924 <__ssrefill_r+0x22>

0800d93c <__ssvfiscanf_r>:
 800d93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d940:	460c      	mov	r4, r1
 800d942:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d946:	2100      	movs	r1, #0
 800d948:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d94c:	49a5      	ldr	r1, [pc, #660]	@ (800dbe4 <__ssvfiscanf_r+0x2a8>)
 800d94e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d950:	f10d 0804 	add.w	r8, sp, #4
 800d954:	49a4      	ldr	r1, [pc, #656]	@ (800dbe8 <__ssvfiscanf_r+0x2ac>)
 800d956:	4fa5      	ldr	r7, [pc, #660]	@ (800dbec <__ssvfiscanf_r+0x2b0>)
 800d958:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d95c:	4606      	mov	r6, r0
 800d95e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	7813      	ldrb	r3, [r2, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	f000 8158 	beq.w	800dc1a <__ssvfiscanf_r+0x2de>
 800d96a:	5cf9      	ldrb	r1, [r7, r3]
 800d96c:	f011 0108 	ands.w	r1, r1, #8
 800d970:	f102 0501 	add.w	r5, r2, #1
 800d974:	d019      	beq.n	800d9aa <__ssvfiscanf_r+0x6e>
 800d976:	6863      	ldr	r3, [r4, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	dd0f      	ble.n	800d99c <__ssvfiscanf_r+0x60>
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	781a      	ldrb	r2, [r3, #0]
 800d980:	5cba      	ldrb	r2, [r7, r2]
 800d982:	0712      	lsls	r2, r2, #28
 800d984:	d401      	bmi.n	800d98a <__ssvfiscanf_r+0x4e>
 800d986:	462a      	mov	r2, r5
 800d988:	e7eb      	b.n	800d962 <__ssvfiscanf_r+0x26>
 800d98a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d98c:	3201      	adds	r2, #1
 800d98e:	9245      	str	r2, [sp, #276]	@ 0x114
 800d990:	6862      	ldr	r2, [r4, #4]
 800d992:	3301      	adds	r3, #1
 800d994:	3a01      	subs	r2, #1
 800d996:	6062      	str	r2, [r4, #4]
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	e7ec      	b.n	800d976 <__ssvfiscanf_r+0x3a>
 800d99c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d99e:	4621      	mov	r1, r4
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	4798      	blx	r3
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d0e9      	beq.n	800d97c <__ssvfiscanf_r+0x40>
 800d9a8:	e7ed      	b.n	800d986 <__ssvfiscanf_r+0x4a>
 800d9aa:	2b25      	cmp	r3, #37	@ 0x25
 800d9ac:	d012      	beq.n	800d9d4 <__ssvfiscanf_r+0x98>
 800d9ae:	4699      	mov	r9, r3
 800d9b0:	6863      	ldr	r3, [r4, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f340 8093 	ble.w	800dade <__ssvfiscanf_r+0x1a2>
 800d9b8:	6822      	ldr	r2, [r4, #0]
 800d9ba:	7813      	ldrb	r3, [r2, #0]
 800d9bc:	454b      	cmp	r3, r9
 800d9be:	f040 812c 	bne.w	800dc1a <__ssvfiscanf_r+0x2de>
 800d9c2:	6863      	ldr	r3, [r4, #4]
 800d9c4:	3b01      	subs	r3, #1
 800d9c6:	6063      	str	r3, [r4, #4]
 800d9c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d9ca:	3201      	adds	r2, #1
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	6022      	str	r2, [r4, #0]
 800d9d0:	9345      	str	r3, [sp, #276]	@ 0x114
 800d9d2:	e7d8      	b.n	800d986 <__ssvfiscanf_r+0x4a>
 800d9d4:	9141      	str	r1, [sp, #260]	@ 0x104
 800d9d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d9d8:	7853      	ldrb	r3, [r2, #1]
 800d9da:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9dc:	bf02      	ittt	eq
 800d9de:	2310      	moveq	r3, #16
 800d9e0:	1c95      	addeq	r5, r2, #2
 800d9e2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d9e4:	220a      	movs	r2, #10
 800d9e6:	46a9      	mov	r9, r5
 800d9e8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800d9ec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d9f0:	2b09      	cmp	r3, #9
 800d9f2:	d91e      	bls.n	800da32 <__ssvfiscanf_r+0xf6>
 800d9f4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800dbf0 <__ssvfiscanf_r+0x2b4>
 800d9f8:	2203      	movs	r2, #3
 800d9fa:	4650      	mov	r0, sl
 800d9fc:	f7f2 fc00 	bl	8000200 <memchr>
 800da00:	b138      	cbz	r0, 800da12 <__ssvfiscanf_r+0xd6>
 800da02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800da04:	eba0 000a 	sub.w	r0, r0, sl
 800da08:	2301      	movs	r3, #1
 800da0a:	4083      	lsls	r3, r0
 800da0c:	4313      	orrs	r3, r2
 800da0e:	9341      	str	r3, [sp, #260]	@ 0x104
 800da10:	464d      	mov	r5, r9
 800da12:	f815 3b01 	ldrb.w	r3, [r5], #1
 800da16:	2b78      	cmp	r3, #120	@ 0x78
 800da18:	d806      	bhi.n	800da28 <__ssvfiscanf_r+0xec>
 800da1a:	2b57      	cmp	r3, #87	@ 0x57
 800da1c:	d810      	bhi.n	800da40 <__ssvfiscanf_r+0x104>
 800da1e:	2b25      	cmp	r3, #37	@ 0x25
 800da20:	d0c5      	beq.n	800d9ae <__ssvfiscanf_r+0x72>
 800da22:	d857      	bhi.n	800dad4 <__ssvfiscanf_r+0x198>
 800da24:	2b00      	cmp	r3, #0
 800da26:	d065      	beq.n	800daf4 <__ssvfiscanf_r+0x1b8>
 800da28:	2303      	movs	r3, #3
 800da2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800da2c:	230a      	movs	r3, #10
 800da2e:	9342      	str	r3, [sp, #264]	@ 0x108
 800da30:	e078      	b.n	800db24 <__ssvfiscanf_r+0x1e8>
 800da32:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800da34:	fb02 1103 	mla	r1, r2, r3, r1
 800da38:	3930      	subs	r1, #48	@ 0x30
 800da3a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800da3c:	464d      	mov	r5, r9
 800da3e:	e7d2      	b.n	800d9e6 <__ssvfiscanf_r+0xaa>
 800da40:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800da44:	2a20      	cmp	r2, #32
 800da46:	d8ef      	bhi.n	800da28 <__ssvfiscanf_r+0xec>
 800da48:	a101      	add	r1, pc, #4	@ (adr r1, 800da50 <__ssvfiscanf_r+0x114>)
 800da4a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800da4e:	bf00      	nop
 800da50:	0800db03 	.word	0x0800db03
 800da54:	0800da29 	.word	0x0800da29
 800da58:	0800da29 	.word	0x0800da29
 800da5c:	0800db5d 	.word	0x0800db5d
 800da60:	0800da29 	.word	0x0800da29
 800da64:	0800da29 	.word	0x0800da29
 800da68:	0800da29 	.word	0x0800da29
 800da6c:	0800da29 	.word	0x0800da29
 800da70:	0800da29 	.word	0x0800da29
 800da74:	0800da29 	.word	0x0800da29
 800da78:	0800da29 	.word	0x0800da29
 800da7c:	0800db73 	.word	0x0800db73
 800da80:	0800db59 	.word	0x0800db59
 800da84:	0800dadb 	.word	0x0800dadb
 800da88:	0800dadb 	.word	0x0800dadb
 800da8c:	0800dadb 	.word	0x0800dadb
 800da90:	0800da29 	.word	0x0800da29
 800da94:	0800db15 	.word	0x0800db15
 800da98:	0800da29 	.word	0x0800da29
 800da9c:	0800da29 	.word	0x0800da29
 800daa0:	0800da29 	.word	0x0800da29
 800daa4:	0800da29 	.word	0x0800da29
 800daa8:	0800db83 	.word	0x0800db83
 800daac:	0800db1d 	.word	0x0800db1d
 800dab0:	0800dafb 	.word	0x0800dafb
 800dab4:	0800da29 	.word	0x0800da29
 800dab8:	0800da29 	.word	0x0800da29
 800dabc:	0800db7f 	.word	0x0800db7f
 800dac0:	0800da29 	.word	0x0800da29
 800dac4:	0800db59 	.word	0x0800db59
 800dac8:	0800da29 	.word	0x0800da29
 800dacc:	0800da29 	.word	0x0800da29
 800dad0:	0800db03 	.word	0x0800db03
 800dad4:	3b45      	subs	r3, #69	@ 0x45
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	d8a6      	bhi.n	800da28 <__ssvfiscanf_r+0xec>
 800dada:	2305      	movs	r3, #5
 800dadc:	e021      	b.n	800db22 <__ssvfiscanf_r+0x1e6>
 800dade:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dae0:	4621      	mov	r1, r4
 800dae2:	4630      	mov	r0, r6
 800dae4:	4798      	blx	r3
 800dae6:	2800      	cmp	r0, #0
 800dae8:	f43f af66 	beq.w	800d9b8 <__ssvfiscanf_r+0x7c>
 800daec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800daee:	2800      	cmp	r0, #0
 800daf0:	f040 808b 	bne.w	800dc0a <__ssvfiscanf_r+0x2ce>
 800daf4:	f04f 30ff 	mov.w	r0, #4294967295
 800daf8:	e08b      	b.n	800dc12 <__ssvfiscanf_r+0x2d6>
 800dafa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800dafc:	f042 0220 	orr.w	r2, r2, #32
 800db00:	9241      	str	r2, [sp, #260]	@ 0x104
 800db02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800db04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db08:	9241      	str	r2, [sp, #260]	@ 0x104
 800db0a:	2210      	movs	r2, #16
 800db0c:	2b6e      	cmp	r3, #110	@ 0x6e
 800db0e:	9242      	str	r2, [sp, #264]	@ 0x108
 800db10:	d902      	bls.n	800db18 <__ssvfiscanf_r+0x1dc>
 800db12:	e005      	b.n	800db20 <__ssvfiscanf_r+0x1e4>
 800db14:	2300      	movs	r3, #0
 800db16:	9342      	str	r3, [sp, #264]	@ 0x108
 800db18:	2303      	movs	r3, #3
 800db1a:	e002      	b.n	800db22 <__ssvfiscanf_r+0x1e6>
 800db1c:	2308      	movs	r3, #8
 800db1e:	9342      	str	r3, [sp, #264]	@ 0x108
 800db20:	2304      	movs	r3, #4
 800db22:	9347      	str	r3, [sp, #284]	@ 0x11c
 800db24:	6863      	ldr	r3, [r4, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	dd39      	ble.n	800db9e <__ssvfiscanf_r+0x262>
 800db2a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800db2c:	0659      	lsls	r1, r3, #25
 800db2e:	d404      	bmi.n	800db3a <__ssvfiscanf_r+0x1fe>
 800db30:	6823      	ldr	r3, [r4, #0]
 800db32:	781a      	ldrb	r2, [r3, #0]
 800db34:	5cba      	ldrb	r2, [r7, r2]
 800db36:	0712      	lsls	r2, r2, #28
 800db38:	d438      	bmi.n	800dbac <__ssvfiscanf_r+0x270>
 800db3a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	dc47      	bgt.n	800dbd0 <__ssvfiscanf_r+0x294>
 800db40:	466b      	mov	r3, sp
 800db42:	4622      	mov	r2, r4
 800db44:	a941      	add	r1, sp, #260	@ 0x104
 800db46:	4630      	mov	r0, r6
 800db48:	f000 f9fa 	bl	800df40 <_scanf_chars>
 800db4c:	2801      	cmp	r0, #1
 800db4e:	d064      	beq.n	800dc1a <__ssvfiscanf_r+0x2de>
 800db50:	2802      	cmp	r0, #2
 800db52:	f47f af18 	bne.w	800d986 <__ssvfiscanf_r+0x4a>
 800db56:	e7c9      	b.n	800daec <__ssvfiscanf_r+0x1b0>
 800db58:	220a      	movs	r2, #10
 800db5a:	e7d7      	b.n	800db0c <__ssvfiscanf_r+0x1d0>
 800db5c:	4629      	mov	r1, r5
 800db5e:	4640      	mov	r0, r8
 800db60:	f000 fbfa 	bl	800e358 <__sccl>
 800db64:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800db66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db6a:	9341      	str	r3, [sp, #260]	@ 0x104
 800db6c:	4605      	mov	r5, r0
 800db6e:	2301      	movs	r3, #1
 800db70:	e7d7      	b.n	800db22 <__ssvfiscanf_r+0x1e6>
 800db72:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800db74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db78:	9341      	str	r3, [sp, #260]	@ 0x104
 800db7a:	2300      	movs	r3, #0
 800db7c:	e7d1      	b.n	800db22 <__ssvfiscanf_r+0x1e6>
 800db7e:	2302      	movs	r3, #2
 800db80:	e7cf      	b.n	800db22 <__ssvfiscanf_r+0x1e6>
 800db82:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800db84:	06c3      	lsls	r3, r0, #27
 800db86:	f53f aefe 	bmi.w	800d986 <__ssvfiscanf_r+0x4a>
 800db8a:	9b00      	ldr	r3, [sp, #0]
 800db8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800db8e:	1d19      	adds	r1, r3, #4
 800db90:	9100      	str	r1, [sp, #0]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	07c0      	lsls	r0, r0, #31
 800db96:	bf4c      	ite	mi
 800db98:	801a      	strhmi	r2, [r3, #0]
 800db9a:	601a      	strpl	r2, [r3, #0]
 800db9c:	e6f3      	b.n	800d986 <__ssvfiscanf_r+0x4a>
 800db9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dba0:	4621      	mov	r1, r4
 800dba2:	4630      	mov	r0, r6
 800dba4:	4798      	blx	r3
 800dba6:	2800      	cmp	r0, #0
 800dba8:	d0bf      	beq.n	800db2a <__ssvfiscanf_r+0x1ee>
 800dbaa:	e79f      	b.n	800daec <__ssvfiscanf_r+0x1b0>
 800dbac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800dbae:	3201      	adds	r2, #1
 800dbb0:	9245      	str	r2, [sp, #276]	@ 0x114
 800dbb2:	6862      	ldr	r2, [r4, #4]
 800dbb4:	3a01      	subs	r2, #1
 800dbb6:	2a00      	cmp	r2, #0
 800dbb8:	6062      	str	r2, [r4, #4]
 800dbba:	dd02      	ble.n	800dbc2 <__ssvfiscanf_r+0x286>
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	6023      	str	r3, [r4, #0]
 800dbc0:	e7b6      	b.n	800db30 <__ssvfiscanf_r+0x1f4>
 800dbc2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800dbc4:	4621      	mov	r1, r4
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	4798      	blx	r3
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d0b0      	beq.n	800db30 <__ssvfiscanf_r+0x1f4>
 800dbce:	e78d      	b.n	800daec <__ssvfiscanf_r+0x1b0>
 800dbd0:	2b04      	cmp	r3, #4
 800dbd2:	dc0f      	bgt.n	800dbf4 <__ssvfiscanf_r+0x2b8>
 800dbd4:	466b      	mov	r3, sp
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	a941      	add	r1, sp, #260	@ 0x104
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f000 fa0a 	bl	800dff4 <_scanf_i>
 800dbe0:	e7b4      	b.n	800db4c <__ssvfiscanf_r+0x210>
 800dbe2:	bf00      	nop
 800dbe4:	0800d88d 	.word	0x0800d88d
 800dbe8:	0800d903 	.word	0x0800d903
 800dbec:	0800ffa9 	.word	0x0800ffa9
 800dbf0:	080101c6 	.word	0x080101c6
 800dbf4:	4b0a      	ldr	r3, [pc, #40]	@ (800dc20 <__ssvfiscanf_r+0x2e4>)
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f43f aec5 	beq.w	800d986 <__ssvfiscanf_r+0x4a>
 800dbfc:	466b      	mov	r3, sp
 800dbfe:	4622      	mov	r2, r4
 800dc00:	a941      	add	r1, sp, #260	@ 0x104
 800dc02:	4630      	mov	r0, r6
 800dc04:	f7fe fa26 	bl	800c054 <_scanf_float>
 800dc08:	e7a0      	b.n	800db4c <__ssvfiscanf_r+0x210>
 800dc0a:	89a3      	ldrh	r3, [r4, #12]
 800dc0c:	065b      	lsls	r3, r3, #25
 800dc0e:	f53f af71 	bmi.w	800daf4 <__ssvfiscanf_r+0x1b8>
 800dc12:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800dc16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc1a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dc1c:	e7f9      	b.n	800dc12 <__ssvfiscanf_r+0x2d6>
 800dc1e:	bf00      	nop
 800dc20:	0800c055 	.word	0x0800c055

0800dc24 <_printf_common>:
 800dc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc28:	4616      	mov	r6, r2
 800dc2a:	4698      	mov	r8, r3
 800dc2c:	688a      	ldr	r2, [r1, #8]
 800dc2e:	690b      	ldr	r3, [r1, #16]
 800dc30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dc34:	4293      	cmp	r3, r2
 800dc36:	bfb8      	it	lt
 800dc38:	4613      	movlt	r3, r2
 800dc3a:	6033      	str	r3, [r6, #0]
 800dc3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc40:	4607      	mov	r7, r0
 800dc42:	460c      	mov	r4, r1
 800dc44:	b10a      	cbz	r2, 800dc4a <_printf_common+0x26>
 800dc46:	3301      	adds	r3, #1
 800dc48:	6033      	str	r3, [r6, #0]
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	0699      	lsls	r1, r3, #26
 800dc4e:	bf42      	ittt	mi
 800dc50:	6833      	ldrmi	r3, [r6, #0]
 800dc52:	3302      	addmi	r3, #2
 800dc54:	6033      	strmi	r3, [r6, #0]
 800dc56:	6825      	ldr	r5, [r4, #0]
 800dc58:	f015 0506 	ands.w	r5, r5, #6
 800dc5c:	d106      	bne.n	800dc6c <_printf_common+0x48>
 800dc5e:	f104 0a19 	add.w	sl, r4, #25
 800dc62:	68e3      	ldr	r3, [r4, #12]
 800dc64:	6832      	ldr	r2, [r6, #0]
 800dc66:	1a9b      	subs	r3, r3, r2
 800dc68:	42ab      	cmp	r3, r5
 800dc6a:	dc26      	bgt.n	800dcba <_printf_common+0x96>
 800dc6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc70:	6822      	ldr	r2, [r4, #0]
 800dc72:	3b00      	subs	r3, #0
 800dc74:	bf18      	it	ne
 800dc76:	2301      	movne	r3, #1
 800dc78:	0692      	lsls	r2, r2, #26
 800dc7a:	d42b      	bmi.n	800dcd4 <_printf_common+0xb0>
 800dc7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc80:	4641      	mov	r1, r8
 800dc82:	4638      	mov	r0, r7
 800dc84:	47c8      	blx	r9
 800dc86:	3001      	adds	r0, #1
 800dc88:	d01e      	beq.n	800dcc8 <_printf_common+0xa4>
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	6922      	ldr	r2, [r4, #16]
 800dc8e:	f003 0306 	and.w	r3, r3, #6
 800dc92:	2b04      	cmp	r3, #4
 800dc94:	bf02      	ittt	eq
 800dc96:	68e5      	ldreq	r5, [r4, #12]
 800dc98:	6833      	ldreq	r3, [r6, #0]
 800dc9a:	1aed      	subeq	r5, r5, r3
 800dc9c:	68a3      	ldr	r3, [r4, #8]
 800dc9e:	bf0c      	ite	eq
 800dca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dca4:	2500      	movne	r5, #0
 800dca6:	4293      	cmp	r3, r2
 800dca8:	bfc4      	itt	gt
 800dcaa:	1a9b      	subgt	r3, r3, r2
 800dcac:	18ed      	addgt	r5, r5, r3
 800dcae:	2600      	movs	r6, #0
 800dcb0:	341a      	adds	r4, #26
 800dcb2:	42b5      	cmp	r5, r6
 800dcb4:	d11a      	bne.n	800dcec <_printf_common+0xc8>
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	e008      	b.n	800dccc <_printf_common+0xa8>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	4652      	mov	r2, sl
 800dcbe:	4641      	mov	r1, r8
 800dcc0:	4638      	mov	r0, r7
 800dcc2:	47c8      	blx	r9
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	d103      	bne.n	800dcd0 <_printf_common+0xac>
 800dcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd0:	3501      	adds	r5, #1
 800dcd2:	e7c6      	b.n	800dc62 <_printf_common+0x3e>
 800dcd4:	18e1      	adds	r1, r4, r3
 800dcd6:	1c5a      	adds	r2, r3, #1
 800dcd8:	2030      	movs	r0, #48	@ 0x30
 800dcda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dcde:	4422      	add	r2, r4
 800dce0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dce8:	3302      	adds	r3, #2
 800dcea:	e7c7      	b.n	800dc7c <_printf_common+0x58>
 800dcec:	2301      	movs	r3, #1
 800dcee:	4622      	mov	r2, r4
 800dcf0:	4641      	mov	r1, r8
 800dcf2:	4638      	mov	r0, r7
 800dcf4:	47c8      	blx	r9
 800dcf6:	3001      	adds	r0, #1
 800dcf8:	d0e6      	beq.n	800dcc8 <_printf_common+0xa4>
 800dcfa:	3601      	adds	r6, #1
 800dcfc:	e7d9      	b.n	800dcb2 <_printf_common+0x8e>
	...

0800dd00 <_printf_i>:
 800dd00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd04:	7e0f      	ldrb	r7, [r1, #24]
 800dd06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd08:	2f78      	cmp	r7, #120	@ 0x78
 800dd0a:	4691      	mov	r9, r2
 800dd0c:	4680      	mov	r8, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	469a      	mov	sl, r3
 800dd12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dd16:	d807      	bhi.n	800dd28 <_printf_i+0x28>
 800dd18:	2f62      	cmp	r7, #98	@ 0x62
 800dd1a:	d80a      	bhi.n	800dd32 <_printf_i+0x32>
 800dd1c:	2f00      	cmp	r7, #0
 800dd1e:	f000 80d2 	beq.w	800dec6 <_printf_i+0x1c6>
 800dd22:	2f58      	cmp	r7, #88	@ 0x58
 800dd24:	f000 80b9 	beq.w	800de9a <_printf_i+0x19a>
 800dd28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd30:	e03a      	b.n	800dda8 <_printf_i+0xa8>
 800dd32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd36:	2b15      	cmp	r3, #21
 800dd38:	d8f6      	bhi.n	800dd28 <_printf_i+0x28>
 800dd3a:	a101      	add	r1, pc, #4	@ (adr r1, 800dd40 <_printf_i+0x40>)
 800dd3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd40:	0800dd99 	.word	0x0800dd99
 800dd44:	0800ddad 	.word	0x0800ddad
 800dd48:	0800dd29 	.word	0x0800dd29
 800dd4c:	0800dd29 	.word	0x0800dd29
 800dd50:	0800dd29 	.word	0x0800dd29
 800dd54:	0800dd29 	.word	0x0800dd29
 800dd58:	0800ddad 	.word	0x0800ddad
 800dd5c:	0800dd29 	.word	0x0800dd29
 800dd60:	0800dd29 	.word	0x0800dd29
 800dd64:	0800dd29 	.word	0x0800dd29
 800dd68:	0800dd29 	.word	0x0800dd29
 800dd6c:	0800dead 	.word	0x0800dead
 800dd70:	0800ddd7 	.word	0x0800ddd7
 800dd74:	0800de67 	.word	0x0800de67
 800dd78:	0800dd29 	.word	0x0800dd29
 800dd7c:	0800dd29 	.word	0x0800dd29
 800dd80:	0800decf 	.word	0x0800decf
 800dd84:	0800dd29 	.word	0x0800dd29
 800dd88:	0800ddd7 	.word	0x0800ddd7
 800dd8c:	0800dd29 	.word	0x0800dd29
 800dd90:	0800dd29 	.word	0x0800dd29
 800dd94:	0800de6f 	.word	0x0800de6f
 800dd98:	6833      	ldr	r3, [r6, #0]
 800dd9a:	1d1a      	adds	r2, r3, #4
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	6032      	str	r2, [r6, #0]
 800dda0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dda4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dda8:	2301      	movs	r3, #1
 800ddaa:	e09d      	b.n	800dee8 <_printf_i+0x1e8>
 800ddac:	6833      	ldr	r3, [r6, #0]
 800ddae:	6820      	ldr	r0, [r4, #0]
 800ddb0:	1d19      	adds	r1, r3, #4
 800ddb2:	6031      	str	r1, [r6, #0]
 800ddb4:	0606      	lsls	r6, r0, #24
 800ddb6:	d501      	bpl.n	800ddbc <_printf_i+0xbc>
 800ddb8:	681d      	ldr	r5, [r3, #0]
 800ddba:	e003      	b.n	800ddc4 <_printf_i+0xc4>
 800ddbc:	0645      	lsls	r5, r0, #25
 800ddbe:	d5fb      	bpl.n	800ddb8 <_printf_i+0xb8>
 800ddc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ddc4:	2d00      	cmp	r5, #0
 800ddc6:	da03      	bge.n	800ddd0 <_printf_i+0xd0>
 800ddc8:	232d      	movs	r3, #45	@ 0x2d
 800ddca:	426d      	negs	r5, r5
 800ddcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ddd0:	4859      	ldr	r0, [pc, #356]	@ (800df38 <_printf_i+0x238>)
 800ddd2:	230a      	movs	r3, #10
 800ddd4:	e011      	b.n	800ddfa <_printf_i+0xfa>
 800ddd6:	6821      	ldr	r1, [r4, #0]
 800ddd8:	6833      	ldr	r3, [r6, #0]
 800ddda:	0608      	lsls	r0, r1, #24
 800dddc:	f853 5b04 	ldr.w	r5, [r3], #4
 800dde0:	d402      	bmi.n	800dde8 <_printf_i+0xe8>
 800dde2:	0649      	lsls	r1, r1, #25
 800dde4:	bf48      	it	mi
 800dde6:	b2ad      	uxthmi	r5, r5
 800dde8:	2f6f      	cmp	r7, #111	@ 0x6f
 800ddea:	4853      	ldr	r0, [pc, #332]	@ (800df38 <_printf_i+0x238>)
 800ddec:	6033      	str	r3, [r6, #0]
 800ddee:	bf14      	ite	ne
 800ddf0:	230a      	movne	r3, #10
 800ddf2:	2308      	moveq	r3, #8
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ddfa:	6866      	ldr	r6, [r4, #4]
 800ddfc:	60a6      	str	r6, [r4, #8]
 800ddfe:	2e00      	cmp	r6, #0
 800de00:	bfa2      	ittt	ge
 800de02:	6821      	ldrge	r1, [r4, #0]
 800de04:	f021 0104 	bicge.w	r1, r1, #4
 800de08:	6021      	strge	r1, [r4, #0]
 800de0a:	b90d      	cbnz	r5, 800de10 <_printf_i+0x110>
 800de0c:	2e00      	cmp	r6, #0
 800de0e:	d04b      	beq.n	800dea8 <_printf_i+0x1a8>
 800de10:	4616      	mov	r6, r2
 800de12:	fbb5 f1f3 	udiv	r1, r5, r3
 800de16:	fb03 5711 	mls	r7, r3, r1, r5
 800de1a:	5dc7      	ldrb	r7, [r0, r7]
 800de1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de20:	462f      	mov	r7, r5
 800de22:	42bb      	cmp	r3, r7
 800de24:	460d      	mov	r5, r1
 800de26:	d9f4      	bls.n	800de12 <_printf_i+0x112>
 800de28:	2b08      	cmp	r3, #8
 800de2a:	d10b      	bne.n	800de44 <_printf_i+0x144>
 800de2c:	6823      	ldr	r3, [r4, #0]
 800de2e:	07df      	lsls	r7, r3, #31
 800de30:	d508      	bpl.n	800de44 <_printf_i+0x144>
 800de32:	6923      	ldr	r3, [r4, #16]
 800de34:	6861      	ldr	r1, [r4, #4]
 800de36:	4299      	cmp	r1, r3
 800de38:	bfde      	ittt	le
 800de3a:	2330      	movle	r3, #48	@ 0x30
 800de3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800de40:	f106 36ff 	addle.w	r6, r6, #4294967295
 800de44:	1b92      	subs	r2, r2, r6
 800de46:	6122      	str	r2, [r4, #16]
 800de48:	f8cd a000 	str.w	sl, [sp]
 800de4c:	464b      	mov	r3, r9
 800de4e:	aa03      	add	r2, sp, #12
 800de50:	4621      	mov	r1, r4
 800de52:	4640      	mov	r0, r8
 800de54:	f7ff fee6 	bl	800dc24 <_printf_common>
 800de58:	3001      	adds	r0, #1
 800de5a:	d14a      	bne.n	800def2 <_printf_i+0x1f2>
 800de5c:	f04f 30ff 	mov.w	r0, #4294967295
 800de60:	b004      	add	sp, #16
 800de62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de66:	6823      	ldr	r3, [r4, #0]
 800de68:	f043 0320 	orr.w	r3, r3, #32
 800de6c:	6023      	str	r3, [r4, #0]
 800de6e:	4833      	ldr	r0, [pc, #204]	@ (800df3c <_printf_i+0x23c>)
 800de70:	2778      	movs	r7, #120	@ 0x78
 800de72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de76:	6823      	ldr	r3, [r4, #0]
 800de78:	6831      	ldr	r1, [r6, #0]
 800de7a:	061f      	lsls	r7, r3, #24
 800de7c:	f851 5b04 	ldr.w	r5, [r1], #4
 800de80:	d402      	bmi.n	800de88 <_printf_i+0x188>
 800de82:	065f      	lsls	r7, r3, #25
 800de84:	bf48      	it	mi
 800de86:	b2ad      	uxthmi	r5, r5
 800de88:	6031      	str	r1, [r6, #0]
 800de8a:	07d9      	lsls	r1, r3, #31
 800de8c:	bf44      	itt	mi
 800de8e:	f043 0320 	orrmi.w	r3, r3, #32
 800de92:	6023      	strmi	r3, [r4, #0]
 800de94:	b11d      	cbz	r5, 800de9e <_printf_i+0x19e>
 800de96:	2310      	movs	r3, #16
 800de98:	e7ac      	b.n	800ddf4 <_printf_i+0xf4>
 800de9a:	4827      	ldr	r0, [pc, #156]	@ (800df38 <_printf_i+0x238>)
 800de9c:	e7e9      	b.n	800de72 <_printf_i+0x172>
 800de9e:	6823      	ldr	r3, [r4, #0]
 800dea0:	f023 0320 	bic.w	r3, r3, #32
 800dea4:	6023      	str	r3, [r4, #0]
 800dea6:	e7f6      	b.n	800de96 <_printf_i+0x196>
 800dea8:	4616      	mov	r6, r2
 800deaa:	e7bd      	b.n	800de28 <_printf_i+0x128>
 800deac:	6833      	ldr	r3, [r6, #0]
 800deae:	6825      	ldr	r5, [r4, #0]
 800deb0:	6961      	ldr	r1, [r4, #20]
 800deb2:	1d18      	adds	r0, r3, #4
 800deb4:	6030      	str	r0, [r6, #0]
 800deb6:	062e      	lsls	r6, r5, #24
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	d501      	bpl.n	800dec0 <_printf_i+0x1c0>
 800debc:	6019      	str	r1, [r3, #0]
 800debe:	e002      	b.n	800dec6 <_printf_i+0x1c6>
 800dec0:	0668      	lsls	r0, r5, #25
 800dec2:	d5fb      	bpl.n	800debc <_printf_i+0x1bc>
 800dec4:	8019      	strh	r1, [r3, #0]
 800dec6:	2300      	movs	r3, #0
 800dec8:	6123      	str	r3, [r4, #16]
 800deca:	4616      	mov	r6, r2
 800decc:	e7bc      	b.n	800de48 <_printf_i+0x148>
 800dece:	6833      	ldr	r3, [r6, #0]
 800ded0:	1d1a      	adds	r2, r3, #4
 800ded2:	6032      	str	r2, [r6, #0]
 800ded4:	681e      	ldr	r6, [r3, #0]
 800ded6:	6862      	ldr	r2, [r4, #4]
 800ded8:	2100      	movs	r1, #0
 800deda:	4630      	mov	r0, r6
 800dedc:	f7f2 f990 	bl	8000200 <memchr>
 800dee0:	b108      	cbz	r0, 800dee6 <_printf_i+0x1e6>
 800dee2:	1b80      	subs	r0, r0, r6
 800dee4:	6060      	str	r0, [r4, #4]
 800dee6:	6863      	ldr	r3, [r4, #4]
 800dee8:	6123      	str	r3, [r4, #16]
 800deea:	2300      	movs	r3, #0
 800deec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800def0:	e7aa      	b.n	800de48 <_printf_i+0x148>
 800def2:	6923      	ldr	r3, [r4, #16]
 800def4:	4632      	mov	r2, r6
 800def6:	4649      	mov	r1, r9
 800def8:	4640      	mov	r0, r8
 800defa:	47d0      	blx	sl
 800defc:	3001      	adds	r0, #1
 800defe:	d0ad      	beq.n	800de5c <_printf_i+0x15c>
 800df00:	6823      	ldr	r3, [r4, #0]
 800df02:	079b      	lsls	r3, r3, #30
 800df04:	d413      	bmi.n	800df2e <_printf_i+0x22e>
 800df06:	68e0      	ldr	r0, [r4, #12]
 800df08:	9b03      	ldr	r3, [sp, #12]
 800df0a:	4298      	cmp	r0, r3
 800df0c:	bfb8      	it	lt
 800df0e:	4618      	movlt	r0, r3
 800df10:	e7a6      	b.n	800de60 <_printf_i+0x160>
 800df12:	2301      	movs	r3, #1
 800df14:	4632      	mov	r2, r6
 800df16:	4649      	mov	r1, r9
 800df18:	4640      	mov	r0, r8
 800df1a:	47d0      	blx	sl
 800df1c:	3001      	adds	r0, #1
 800df1e:	d09d      	beq.n	800de5c <_printf_i+0x15c>
 800df20:	3501      	adds	r5, #1
 800df22:	68e3      	ldr	r3, [r4, #12]
 800df24:	9903      	ldr	r1, [sp, #12]
 800df26:	1a5b      	subs	r3, r3, r1
 800df28:	42ab      	cmp	r3, r5
 800df2a:	dcf2      	bgt.n	800df12 <_printf_i+0x212>
 800df2c:	e7eb      	b.n	800df06 <_printf_i+0x206>
 800df2e:	2500      	movs	r5, #0
 800df30:	f104 0619 	add.w	r6, r4, #25
 800df34:	e7f5      	b.n	800df22 <_printf_i+0x222>
 800df36:	bf00      	nop
 800df38:	080101d1 	.word	0x080101d1
 800df3c:	080101e2 	.word	0x080101e2

0800df40 <_scanf_chars>:
 800df40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df44:	4615      	mov	r5, r2
 800df46:	688a      	ldr	r2, [r1, #8]
 800df48:	4680      	mov	r8, r0
 800df4a:	460c      	mov	r4, r1
 800df4c:	b932      	cbnz	r2, 800df5c <_scanf_chars+0x1c>
 800df4e:	698a      	ldr	r2, [r1, #24]
 800df50:	2a00      	cmp	r2, #0
 800df52:	bf14      	ite	ne
 800df54:	f04f 32ff 	movne.w	r2, #4294967295
 800df58:	2201      	moveq	r2, #1
 800df5a:	608a      	str	r2, [r1, #8]
 800df5c:	6822      	ldr	r2, [r4, #0]
 800df5e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800dff0 <_scanf_chars+0xb0>
 800df62:	06d1      	lsls	r1, r2, #27
 800df64:	bf5f      	itttt	pl
 800df66:	681a      	ldrpl	r2, [r3, #0]
 800df68:	1d11      	addpl	r1, r2, #4
 800df6a:	6019      	strpl	r1, [r3, #0]
 800df6c:	6816      	ldrpl	r6, [r2, #0]
 800df6e:	2700      	movs	r7, #0
 800df70:	69a0      	ldr	r0, [r4, #24]
 800df72:	b188      	cbz	r0, 800df98 <_scanf_chars+0x58>
 800df74:	2801      	cmp	r0, #1
 800df76:	d107      	bne.n	800df88 <_scanf_chars+0x48>
 800df78:	682b      	ldr	r3, [r5, #0]
 800df7a:	781a      	ldrb	r2, [r3, #0]
 800df7c:	6963      	ldr	r3, [r4, #20]
 800df7e:	5c9b      	ldrb	r3, [r3, r2]
 800df80:	b953      	cbnz	r3, 800df98 <_scanf_chars+0x58>
 800df82:	2f00      	cmp	r7, #0
 800df84:	d031      	beq.n	800dfea <_scanf_chars+0xaa>
 800df86:	e022      	b.n	800dfce <_scanf_chars+0x8e>
 800df88:	2802      	cmp	r0, #2
 800df8a:	d120      	bne.n	800dfce <_scanf_chars+0x8e>
 800df8c:	682b      	ldr	r3, [r5, #0]
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	f819 3003 	ldrb.w	r3, [r9, r3]
 800df94:	071b      	lsls	r3, r3, #28
 800df96:	d41a      	bmi.n	800dfce <_scanf_chars+0x8e>
 800df98:	6823      	ldr	r3, [r4, #0]
 800df9a:	06da      	lsls	r2, r3, #27
 800df9c:	bf5e      	ittt	pl
 800df9e:	682b      	ldrpl	r3, [r5, #0]
 800dfa0:	781b      	ldrbpl	r3, [r3, #0]
 800dfa2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dfa6:	682a      	ldr	r2, [r5, #0]
 800dfa8:	686b      	ldr	r3, [r5, #4]
 800dfaa:	3201      	adds	r2, #1
 800dfac:	602a      	str	r2, [r5, #0]
 800dfae:	68a2      	ldr	r2, [r4, #8]
 800dfb0:	3b01      	subs	r3, #1
 800dfb2:	3a01      	subs	r2, #1
 800dfb4:	606b      	str	r3, [r5, #4]
 800dfb6:	3701      	adds	r7, #1
 800dfb8:	60a2      	str	r2, [r4, #8]
 800dfba:	b142      	cbz	r2, 800dfce <_scanf_chars+0x8e>
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	dcd7      	bgt.n	800df70 <_scanf_chars+0x30>
 800dfc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dfc4:	4629      	mov	r1, r5
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	4798      	blx	r3
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d0d0      	beq.n	800df70 <_scanf_chars+0x30>
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	f013 0310 	ands.w	r3, r3, #16
 800dfd4:	d105      	bne.n	800dfe2 <_scanf_chars+0xa2>
 800dfd6:	68e2      	ldr	r2, [r4, #12]
 800dfd8:	3201      	adds	r2, #1
 800dfda:	60e2      	str	r2, [r4, #12]
 800dfdc:	69a2      	ldr	r2, [r4, #24]
 800dfde:	b102      	cbz	r2, 800dfe2 <_scanf_chars+0xa2>
 800dfe0:	7033      	strb	r3, [r6, #0]
 800dfe2:	6923      	ldr	r3, [r4, #16]
 800dfe4:	443b      	add	r3, r7
 800dfe6:	6123      	str	r3, [r4, #16]
 800dfe8:	2000      	movs	r0, #0
 800dfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfee:	bf00      	nop
 800dff0:	0800ffa9 	.word	0x0800ffa9

0800dff4 <_scanf_i>:
 800dff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff8:	4698      	mov	r8, r3
 800dffa:	4b74      	ldr	r3, [pc, #464]	@ (800e1cc <_scanf_i+0x1d8>)
 800dffc:	460c      	mov	r4, r1
 800dffe:	4682      	mov	sl, r0
 800e000:	4616      	mov	r6, r2
 800e002:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e006:	b087      	sub	sp, #28
 800e008:	ab03      	add	r3, sp, #12
 800e00a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e00e:	4b70      	ldr	r3, [pc, #448]	@ (800e1d0 <_scanf_i+0x1dc>)
 800e010:	69a1      	ldr	r1, [r4, #24]
 800e012:	4a70      	ldr	r2, [pc, #448]	@ (800e1d4 <_scanf_i+0x1e0>)
 800e014:	2903      	cmp	r1, #3
 800e016:	bf08      	it	eq
 800e018:	461a      	moveq	r2, r3
 800e01a:	68a3      	ldr	r3, [r4, #8]
 800e01c:	9201      	str	r2, [sp, #4]
 800e01e:	1e5a      	subs	r2, r3, #1
 800e020:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e024:	bf88      	it	hi
 800e026:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e02a:	4627      	mov	r7, r4
 800e02c:	bf82      	ittt	hi
 800e02e:	eb03 0905 	addhi.w	r9, r3, r5
 800e032:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e036:	60a3      	strhi	r3, [r4, #8]
 800e038:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e03c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e040:	bf98      	it	ls
 800e042:	f04f 0900 	movls.w	r9, #0
 800e046:	6023      	str	r3, [r4, #0]
 800e048:	463d      	mov	r5, r7
 800e04a:	f04f 0b00 	mov.w	fp, #0
 800e04e:	6831      	ldr	r1, [r6, #0]
 800e050:	ab03      	add	r3, sp, #12
 800e052:	7809      	ldrb	r1, [r1, #0]
 800e054:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e058:	2202      	movs	r2, #2
 800e05a:	f7f2 f8d1 	bl	8000200 <memchr>
 800e05e:	b328      	cbz	r0, 800e0ac <_scanf_i+0xb8>
 800e060:	f1bb 0f01 	cmp.w	fp, #1
 800e064:	d159      	bne.n	800e11a <_scanf_i+0x126>
 800e066:	6862      	ldr	r2, [r4, #4]
 800e068:	b92a      	cbnz	r2, 800e076 <_scanf_i+0x82>
 800e06a:	6822      	ldr	r2, [r4, #0]
 800e06c:	2108      	movs	r1, #8
 800e06e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e072:	6061      	str	r1, [r4, #4]
 800e074:	6022      	str	r2, [r4, #0]
 800e076:	6822      	ldr	r2, [r4, #0]
 800e078:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e07c:	6022      	str	r2, [r4, #0]
 800e07e:	68a2      	ldr	r2, [r4, #8]
 800e080:	1e51      	subs	r1, r2, #1
 800e082:	60a1      	str	r1, [r4, #8]
 800e084:	b192      	cbz	r2, 800e0ac <_scanf_i+0xb8>
 800e086:	6832      	ldr	r2, [r6, #0]
 800e088:	1c51      	adds	r1, r2, #1
 800e08a:	6031      	str	r1, [r6, #0]
 800e08c:	7812      	ldrb	r2, [r2, #0]
 800e08e:	f805 2b01 	strb.w	r2, [r5], #1
 800e092:	6872      	ldr	r2, [r6, #4]
 800e094:	3a01      	subs	r2, #1
 800e096:	2a00      	cmp	r2, #0
 800e098:	6072      	str	r2, [r6, #4]
 800e09a:	dc07      	bgt.n	800e0ac <_scanf_i+0xb8>
 800e09c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e0a0:	4631      	mov	r1, r6
 800e0a2:	4650      	mov	r0, sl
 800e0a4:	4790      	blx	r2
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	f040 8085 	bne.w	800e1b6 <_scanf_i+0x1c2>
 800e0ac:	f10b 0b01 	add.w	fp, fp, #1
 800e0b0:	f1bb 0f03 	cmp.w	fp, #3
 800e0b4:	d1cb      	bne.n	800e04e <_scanf_i+0x5a>
 800e0b6:	6863      	ldr	r3, [r4, #4]
 800e0b8:	b90b      	cbnz	r3, 800e0be <_scanf_i+0xca>
 800e0ba:	230a      	movs	r3, #10
 800e0bc:	6063      	str	r3, [r4, #4]
 800e0be:	6863      	ldr	r3, [r4, #4]
 800e0c0:	4945      	ldr	r1, [pc, #276]	@ (800e1d8 <_scanf_i+0x1e4>)
 800e0c2:	6960      	ldr	r0, [r4, #20]
 800e0c4:	1ac9      	subs	r1, r1, r3
 800e0c6:	f000 f947 	bl	800e358 <__sccl>
 800e0ca:	f04f 0b00 	mov.w	fp, #0
 800e0ce:	68a3      	ldr	r3, [r4, #8]
 800e0d0:	6822      	ldr	r2, [r4, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d03d      	beq.n	800e152 <_scanf_i+0x15e>
 800e0d6:	6831      	ldr	r1, [r6, #0]
 800e0d8:	6960      	ldr	r0, [r4, #20]
 800e0da:	f891 c000 	ldrb.w	ip, [r1]
 800e0de:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	d035      	beq.n	800e152 <_scanf_i+0x15e>
 800e0e6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e0ea:	d124      	bne.n	800e136 <_scanf_i+0x142>
 800e0ec:	0510      	lsls	r0, r2, #20
 800e0ee:	d522      	bpl.n	800e136 <_scanf_i+0x142>
 800e0f0:	f10b 0b01 	add.w	fp, fp, #1
 800e0f4:	f1b9 0f00 	cmp.w	r9, #0
 800e0f8:	d003      	beq.n	800e102 <_scanf_i+0x10e>
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	f109 39ff 	add.w	r9, r9, #4294967295
 800e100:	60a3      	str	r3, [r4, #8]
 800e102:	6873      	ldr	r3, [r6, #4]
 800e104:	3b01      	subs	r3, #1
 800e106:	2b00      	cmp	r3, #0
 800e108:	6073      	str	r3, [r6, #4]
 800e10a:	dd1b      	ble.n	800e144 <_scanf_i+0x150>
 800e10c:	6833      	ldr	r3, [r6, #0]
 800e10e:	3301      	adds	r3, #1
 800e110:	6033      	str	r3, [r6, #0]
 800e112:	68a3      	ldr	r3, [r4, #8]
 800e114:	3b01      	subs	r3, #1
 800e116:	60a3      	str	r3, [r4, #8]
 800e118:	e7d9      	b.n	800e0ce <_scanf_i+0xda>
 800e11a:	f1bb 0f02 	cmp.w	fp, #2
 800e11e:	d1ae      	bne.n	800e07e <_scanf_i+0x8a>
 800e120:	6822      	ldr	r2, [r4, #0]
 800e122:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800e126:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800e12a:	d1bf      	bne.n	800e0ac <_scanf_i+0xb8>
 800e12c:	2110      	movs	r1, #16
 800e12e:	6061      	str	r1, [r4, #4]
 800e130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e134:	e7a2      	b.n	800e07c <_scanf_i+0x88>
 800e136:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800e13a:	6022      	str	r2, [r4, #0]
 800e13c:	780b      	ldrb	r3, [r1, #0]
 800e13e:	f805 3b01 	strb.w	r3, [r5], #1
 800e142:	e7de      	b.n	800e102 <_scanf_i+0x10e>
 800e144:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e148:	4631      	mov	r1, r6
 800e14a:	4650      	mov	r0, sl
 800e14c:	4798      	blx	r3
 800e14e:	2800      	cmp	r0, #0
 800e150:	d0df      	beq.n	800e112 <_scanf_i+0x11e>
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	05d9      	lsls	r1, r3, #23
 800e156:	d50d      	bpl.n	800e174 <_scanf_i+0x180>
 800e158:	42bd      	cmp	r5, r7
 800e15a:	d909      	bls.n	800e170 <_scanf_i+0x17c>
 800e15c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e160:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e164:	4632      	mov	r2, r6
 800e166:	4650      	mov	r0, sl
 800e168:	4798      	blx	r3
 800e16a:	f105 39ff 	add.w	r9, r5, #4294967295
 800e16e:	464d      	mov	r5, r9
 800e170:	42bd      	cmp	r5, r7
 800e172:	d028      	beq.n	800e1c6 <_scanf_i+0x1d2>
 800e174:	6822      	ldr	r2, [r4, #0]
 800e176:	f012 0210 	ands.w	r2, r2, #16
 800e17a:	d113      	bne.n	800e1a4 <_scanf_i+0x1b0>
 800e17c:	702a      	strb	r2, [r5, #0]
 800e17e:	6863      	ldr	r3, [r4, #4]
 800e180:	9e01      	ldr	r6, [sp, #4]
 800e182:	4639      	mov	r1, r7
 800e184:	4650      	mov	r0, sl
 800e186:	47b0      	blx	r6
 800e188:	f8d8 3000 	ldr.w	r3, [r8]
 800e18c:	6821      	ldr	r1, [r4, #0]
 800e18e:	1d1a      	adds	r2, r3, #4
 800e190:	f8c8 2000 	str.w	r2, [r8]
 800e194:	f011 0f20 	tst.w	r1, #32
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	d00f      	beq.n	800e1bc <_scanf_i+0x1c8>
 800e19c:	6018      	str	r0, [r3, #0]
 800e19e:	68e3      	ldr	r3, [r4, #12]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	60e3      	str	r3, [r4, #12]
 800e1a4:	6923      	ldr	r3, [r4, #16]
 800e1a6:	1bed      	subs	r5, r5, r7
 800e1a8:	445d      	add	r5, fp
 800e1aa:	442b      	add	r3, r5
 800e1ac:	6123      	str	r3, [r4, #16]
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	b007      	add	sp, #28
 800e1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b6:	f04f 0b00 	mov.w	fp, #0
 800e1ba:	e7ca      	b.n	800e152 <_scanf_i+0x15e>
 800e1bc:	07ca      	lsls	r2, r1, #31
 800e1be:	bf4c      	ite	mi
 800e1c0:	8018      	strhmi	r0, [r3, #0]
 800e1c2:	6018      	strpl	r0, [r3, #0]
 800e1c4:	e7eb      	b.n	800e19e <_scanf_i+0x1aa>
 800e1c6:	2001      	movs	r0, #1
 800e1c8:	e7f2      	b.n	800e1b0 <_scanf_i+0x1bc>
 800e1ca:	bf00      	nop
 800e1cc:	0800ff5c 	.word	0x0800ff5c
 800e1d0:	0800bf49 	.word	0x0800bf49
 800e1d4:	0800c03d 	.word	0x0800c03d
 800e1d8:	08010203 	.word	0x08010203

0800e1dc <__sflush_r>:
 800e1dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e4:	0716      	lsls	r6, r2, #28
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	460c      	mov	r4, r1
 800e1ea:	d454      	bmi.n	800e296 <__sflush_r+0xba>
 800e1ec:	684b      	ldr	r3, [r1, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dc02      	bgt.n	800e1f8 <__sflush_r+0x1c>
 800e1f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dd48      	ble.n	800e28a <__sflush_r+0xae>
 800e1f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e1fa:	2e00      	cmp	r6, #0
 800e1fc:	d045      	beq.n	800e28a <__sflush_r+0xae>
 800e1fe:	2300      	movs	r3, #0
 800e200:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e204:	682f      	ldr	r7, [r5, #0]
 800e206:	6a21      	ldr	r1, [r4, #32]
 800e208:	602b      	str	r3, [r5, #0]
 800e20a:	d030      	beq.n	800e26e <__sflush_r+0x92>
 800e20c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e20e:	89a3      	ldrh	r3, [r4, #12]
 800e210:	0759      	lsls	r1, r3, #29
 800e212:	d505      	bpl.n	800e220 <__sflush_r+0x44>
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	1ad2      	subs	r2, r2, r3
 800e218:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e21a:	b10b      	cbz	r3, 800e220 <__sflush_r+0x44>
 800e21c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e21e:	1ad2      	subs	r2, r2, r3
 800e220:	2300      	movs	r3, #0
 800e222:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e224:	6a21      	ldr	r1, [r4, #32]
 800e226:	4628      	mov	r0, r5
 800e228:	47b0      	blx	r6
 800e22a:	1c43      	adds	r3, r0, #1
 800e22c:	89a3      	ldrh	r3, [r4, #12]
 800e22e:	d106      	bne.n	800e23e <__sflush_r+0x62>
 800e230:	6829      	ldr	r1, [r5, #0]
 800e232:	291d      	cmp	r1, #29
 800e234:	d82b      	bhi.n	800e28e <__sflush_r+0xb2>
 800e236:	4a2a      	ldr	r2, [pc, #168]	@ (800e2e0 <__sflush_r+0x104>)
 800e238:	410a      	asrs	r2, r1
 800e23a:	07d6      	lsls	r6, r2, #31
 800e23c:	d427      	bmi.n	800e28e <__sflush_r+0xb2>
 800e23e:	2200      	movs	r2, #0
 800e240:	6062      	str	r2, [r4, #4]
 800e242:	04d9      	lsls	r1, r3, #19
 800e244:	6922      	ldr	r2, [r4, #16]
 800e246:	6022      	str	r2, [r4, #0]
 800e248:	d504      	bpl.n	800e254 <__sflush_r+0x78>
 800e24a:	1c42      	adds	r2, r0, #1
 800e24c:	d101      	bne.n	800e252 <__sflush_r+0x76>
 800e24e:	682b      	ldr	r3, [r5, #0]
 800e250:	b903      	cbnz	r3, 800e254 <__sflush_r+0x78>
 800e252:	6560      	str	r0, [r4, #84]	@ 0x54
 800e254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e256:	602f      	str	r7, [r5, #0]
 800e258:	b1b9      	cbz	r1, 800e28a <__sflush_r+0xae>
 800e25a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e25e:	4299      	cmp	r1, r3
 800e260:	d002      	beq.n	800e268 <__sflush_r+0x8c>
 800e262:	4628      	mov	r0, r5
 800e264:	f7fe fb68 	bl	800c938 <_free_r>
 800e268:	2300      	movs	r3, #0
 800e26a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e26c:	e00d      	b.n	800e28a <__sflush_r+0xae>
 800e26e:	2301      	movs	r3, #1
 800e270:	4628      	mov	r0, r5
 800e272:	47b0      	blx	r6
 800e274:	4602      	mov	r2, r0
 800e276:	1c50      	adds	r0, r2, #1
 800e278:	d1c9      	bne.n	800e20e <__sflush_r+0x32>
 800e27a:	682b      	ldr	r3, [r5, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0c6      	beq.n	800e20e <__sflush_r+0x32>
 800e280:	2b1d      	cmp	r3, #29
 800e282:	d001      	beq.n	800e288 <__sflush_r+0xac>
 800e284:	2b16      	cmp	r3, #22
 800e286:	d11e      	bne.n	800e2c6 <__sflush_r+0xea>
 800e288:	602f      	str	r7, [r5, #0]
 800e28a:	2000      	movs	r0, #0
 800e28c:	e022      	b.n	800e2d4 <__sflush_r+0xf8>
 800e28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e292:	b21b      	sxth	r3, r3
 800e294:	e01b      	b.n	800e2ce <__sflush_r+0xf2>
 800e296:	690f      	ldr	r7, [r1, #16]
 800e298:	2f00      	cmp	r7, #0
 800e29a:	d0f6      	beq.n	800e28a <__sflush_r+0xae>
 800e29c:	0793      	lsls	r3, r2, #30
 800e29e:	680e      	ldr	r6, [r1, #0]
 800e2a0:	bf08      	it	eq
 800e2a2:	694b      	ldreq	r3, [r1, #20]
 800e2a4:	600f      	str	r7, [r1, #0]
 800e2a6:	bf18      	it	ne
 800e2a8:	2300      	movne	r3, #0
 800e2aa:	eba6 0807 	sub.w	r8, r6, r7
 800e2ae:	608b      	str	r3, [r1, #8]
 800e2b0:	f1b8 0f00 	cmp.w	r8, #0
 800e2b4:	dde9      	ble.n	800e28a <__sflush_r+0xae>
 800e2b6:	6a21      	ldr	r1, [r4, #32]
 800e2b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e2ba:	4643      	mov	r3, r8
 800e2bc:	463a      	mov	r2, r7
 800e2be:	4628      	mov	r0, r5
 800e2c0:	47b0      	blx	r6
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	dc08      	bgt.n	800e2d8 <__sflush_r+0xfc>
 800e2c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2ce:	81a3      	strh	r3, [r4, #12]
 800e2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d8:	4407      	add	r7, r0
 800e2da:	eba8 0800 	sub.w	r8, r8, r0
 800e2de:	e7e7      	b.n	800e2b0 <__sflush_r+0xd4>
 800e2e0:	dfbffffe 	.word	0xdfbffffe

0800e2e4 <_fflush_r>:
 800e2e4:	b538      	push	{r3, r4, r5, lr}
 800e2e6:	690b      	ldr	r3, [r1, #16]
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	b913      	cbnz	r3, 800e2f4 <_fflush_r+0x10>
 800e2ee:	2500      	movs	r5, #0
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	bd38      	pop	{r3, r4, r5, pc}
 800e2f4:	b118      	cbz	r0, 800e2fe <_fflush_r+0x1a>
 800e2f6:	6a03      	ldr	r3, [r0, #32]
 800e2f8:	b90b      	cbnz	r3, 800e2fe <_fflush_r+0x1a>
 800e2fa:	f7fe f94b 	bl	800c594 <__sinit>
 800e2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d0f3      	beq.n	800e2ee <_fflush_r+0xa>
 800e306:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e308:	07d0      	lsls	r0, r2, #31
 800e30a:	d404      	bmi.n	800e316 <_fflush_r+0x32>
 800e30c:	0599      	lsls	r1, r3, #22
 800e30e:	d402      	bmi.n	800e316 <_fflush_r+0x32>
 800e310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e312:	f7fe faea 	bl	800c8ea <__retarget_lock_acquire_recursive>
 800e316:	4628      	mov	r0, r5
 800e318:	4621      	mov	r1, r4
 800e31a:	f7ff ff5f 	bl	800e1dc <__sflush_r>
 800e31e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e320:	07da      	lsls	r2, r3, #31
 800e322:	4605      	mov	r5, r0
 800e324:	d4e4      	bmi.n	800e2f0 <_fflush_r+0xc>
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	059b      	lsls	r3, r3, #22
 800e32a:	d4e1      	bmi.n	800e2f0 <_fflush_r+0xc>
 800e32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e32e:	f7fe fadd 	bl	800c8ec <__retarget_lock_release_recursive>
 800e332:	e7dd      	b.n	800e2f0 <_fflush_r+0xc>

0800e334 <fiprintf>:
 800e334:	b40e      	push	{r1, r2, r3}
 800e336:	b503      	push	{r0, r1, lr}
 800e338:	4601      	mov	r1, r0
 800e33a:	ab03      	add	r3, sp, #12
 800e33c:	4805      	ldr	r0, [pc, #20]	@ (800e354 <fiprintf+0x20>)
 800e33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e342:	6800      	ldr	r0, [r0, #0]
 800e344:	9301      	str	r3, [sp, #4]
 800e346:	f001 f927 	bl	800f598 <_vfiprintf_r>
 800e34a:	b002      	add	sp, #8
 800e34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e350:	b003      	add	sp, #12
 800e352:	4770      	bx	lr
 800e354:	2000016c 	.word	0x2000016c

0800e358 <__sccl>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	780b      	ldrb	r3, [r1, #0]
 800e35c:	4604      	mov	r4, r0
 800e35e:	2b5e      	cmp	r3, #94	@ 0x5e
 800e360:	bf0b      	itete	eq
 800e362:	784b      	ldrbeq	r3, [r1, #1]
 800e364:	1c4a      	addne	r2, r1, #1
 800e366:	1c8a      	addeq	r2, r1, #2
 800e368:	2100      	movne	r1, #0
 800e36a:	bf08      	it	eq
 800e36c:	2101      	moveq	r1, #1
 800e36e:	3801      	subs	r0, #1
 800e370:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800e374:	f800 1f01 	strb.w	r1, [r0, #1]!
 800e378:	42a8      	cmp	r0, r5
 800e37a:	d1fb      	bne.n	800e374 <__sccl+0x1c>
 800e37c:	b90b      	cbnz	r3, 800e382 <__sccl+0x2a>
 800e37e:	1e50      	subs	r0, r2, #1
 800e380:	bd70      	pop	{r4, r5, r6, pc}
 800e382:	f081 0101 	eor.w	r1, r1, #1
 800e386:	54e1      	strb	r1, [r4, r3]
 800e388:	4610      	mov	r0, r2
 800e38a:	4602      	mov	r2, r0
 800e38c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e390:	2d2d      	cmp	r5, #45	@ 0x2d
 800e392:	d005      	beq.n	800e3a0 <__sccl+0x48>
 800e394:	2d5d      	cmp	r5, #93	@ 0x5d
 800e396:	d016      	beq.n	800e3c6 <__sccl+0x6e>
 800e398:	2d00      	cmp	r5, #0
 800e39a:	d0f1      	beq.n	800e380 <__sccl+0x28>
 800e39c:	462b      	mov	r3, r5
 800e39e:	e7f2      	b.n	800e386 <__sccl+0x2e>
 800e3a0:	7846      	ldrb	r6, [r0, #1]
 800e3a2:	2e5d      	cmp	r6, #93	@ 0x5d
 800e3a4:	d0fa      	beq.n	800e39c <__sccl+0x44>
 800e3a6:	42b3      	cmp	r3, r6
 800e3a8:	dcf8      	bgt.n	800e39c <__sccl+0x44>
 800e3aa:	3002      	adds	r0, #2
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	3201      	adds	r2, #1
 800e3b0:	4296      	cmp	r6, r2
 800e3b2:	54a1      	strb	r1, [r4, r2]
 800e3b4:	dcfb      	bgt.n	800e3ae <__sccl+0x56>
 800e3b6:	1af2      	subs	r2, r6, r3
 800e3b8:	3a01      	subs	r2, #1
 800e3ba:	1c5d      	adds	r5, r3, #1
 800e3bc:	42b3      	cmp	r3, r6
 800e3be:	bfa8      	it	ge
 800e3c0:	2200      	movge	r2, #0
 800e3c2:	18ab      	adds	r3, r5, r2
 800e3c4:	e7e1      	b.n	800e38a <__sccl+0x32>
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	e7da      	b.n	800e380 <__sccl+0x28>

0800e3ca <__submore>:
 800e3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ce:	460c      	mov	r4, r1
 800e3d0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e3d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3d6:	4299      	cmp	r1, r3
 800e3d8:	d11d      	bne.n	800e416 <__submore+0x4c>
 800e3da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800e3de:	f7fd fcad 	bl	800bd3c <_malloc_r>
 800e3e2:	b918      	cbnz	r0, 800e3ec <__submore+0x22>
 800e3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e3f2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800e3f6:	6360      	str	r0, [r4, #52]	@ 0x34
 800e3f8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800e3fc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e400:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800e404:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e408:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800e40c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800e410:	6020      	str	r0, [r4, #0]
 800e412:	2000      	movs	r0, #0
 800e414:	e7e8      	b.n	800e3e8 <__submore+0x1e>
 800e416:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800e418:	0077      	lsls	r7, r6, #1
 800e41a:	463a      	mov	r2, r7
 800e41c:	f001 f858 	bl	800f4d0 <_realloc_r>
 800e420:	4605      	mov	r5, r0
 800e422:	2800      	cmp	r0, #0
 800e424:	d0de      	beq.n	800e3e4 <__submore+0x1a>
 800e426:	eb00 0806 	add.w	r8, r0, r6
 800e42a:	4601      	mov	r1, r0
 800e42c:	4632      	mov	r2, r6
 800e42e:	4640      	mov	r0, r8
 800e430:	f000 f831 	bl	800e496 <memcpy>
 800e434:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800e438:	f8c4 8000 	str.w	r8, [r4]
 800e43c:	e7e9      	b.n	800e412 <__submore+0x48>

0800e43e <memmove>:
 800e43e:	4288      	cmp	r0, r1
 800e440:	b510      	push	{r4, lr}
 800e442:	eb01 0402 	add.w	r4, r1, r2
 800e446:	d902      	bls.n	800e44e <memmove+0x10>
 800e448:	4284      	cmp	r4, r0
 800e44a:	4623      	mov	r3, r4
 800e44c:	d807      	bhi.n	800e45e <memmove+0x20>
 800e44e:	1e43      	subs	r3, r0, #1
 800e450:	42a1      	cmp	r1, r4
 800e452:	d008      	beq.n	800e466 <memmove+0x28>
 800e454:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e458:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e45c:	e7f8      	b.n	800e450 <memmove+0x12>
 800e45e:	4402      	add	r2, r0
 800e460:	4601      	mov	r1, r0
 800e462:	428a      	cmp	r2, r1
 800e464:	d100      	bne.n	800e468 <memmove+0x2a>
 800e466:	bd10      	pop	{r4, pc}
 800e468:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e46c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e470:	e7f7      	b.n	800e462 <memmove+0x24>

0800e472 <strncmp>:
 800e472:	b510      	push	{r4, lr}
 800e474:	b16a      	cbz	r2, 800e492 <strncmp+0x20>
 800e476:	3901      	subs	r1, #1
 800e478:	1884      	adds	r4, r0, r2
 800e47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e47e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e482:	429a      	cmp	r2, r3
 800e484:	d103      	bne.n	800e48e <strncmp+0x1c>
 800e486:	42a0      	cmp	r0, r4
 800e488:	d001      	beq.n	800e48e <strncmp+0x1c>
 800e48a:	2a00      	cmp	r2, #0
 800e48c:	d1f5      	bne.n	800e47a <strncmp+0x8>
 800e48e:	1ad0      	subs	r0, r2, r3
 800e490:	bd10      	pop	{r4, pc}
 800e492:	4610      	mov	r0, r2
 800e494:	e7fc      	b.n	800e490 <strncmp+0x1e>

0800e496 <memcpy>:
 800e496:	440a      	add	r2, r1
 800e498:	4291      	cmp	r1, r2
 800e49a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e49e:	d100      	bne.n	800e4a2 <memcpy+0xc>
 800e4a0:	4770      	bx	lr
 800e4a2:	b510      	push	{r4, lr}
 800e4a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4ac:	4291      	cmp	r1, r2
 800e4ae:	d1f9      	bne.n	800e4a4 <memcpy+0xe>
 800e4b0:	bd10      	pop	{r4, pc}
 800e4b2:	0000      	movs	r0, r0
 800e4b4:	0000      	movs	r0, r0
	...

0800e4b8 <nan>:
 800e4b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e4c0 <nan+0x8>
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	00000000 	.word	0x00000000
 800e4c4:	7ff80000 	.word	0x7ff80000

0800e4c8 <abort>:
 800e4c8:	b508      	push	{r3, lr}
 800e4ca:	2006      	movs	r0, #6
 800e4cc:	f001 fa38 	bl	800f940 <raise>
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	f7f4 ff5f 	bl	8003394 <_exit>

0800e4d6 <rshift>:
 800e4d6:	6903      	ldr	r3, [r0, #16]
 800e4d8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4e0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e4e4:	f100 0414 	add.w	r4, r0, #20
 800e4e8:	dd45      	ble.n	800e576 <rshift+0xa0>
 800e4ea:	f011 011f 	ands.w	r1, r1, #31
 800e4ee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e4f2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e4f6:	d10c      	bne.n	800e512 <rshift+0x3c>
 800e4f8:	f100 0710 	add.w	r7, r0, #16
 800e4fc:	4629      	mov	r1, r5
 800e4fe:	42b1      	cmp	r1, r6
 800e500:	d334      	bcc.n	800e56c <rshift+0x96>
 800e502:	1a9b      	subs	r3, r3, r2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	1eea      	subs	r2, r5, #3
 800e508:	4296      	cmp	r6, r2
 800e50a:	bf38      	it	cc
 800e50c:	2300      	movcc	r3, #0
 800e50e:	4423      	add	r3, r4
 800e510:	e015      	b.n	800e53e <rshift+0x68>
 800e512:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e516:	f1c1 0820 	rsb	r8, r1, #32
 800e51a:	40cf      	lsrs	r7, r1
 800e51c:	f105 0e04 	add.w	lr, r5, #4
 800e520:	46a1      	mov	r9, r4
 800e522:	4576      	cmp	r6, lr
 800e524:	46f4      	mov	ip, lr
 800e526:	d815      	bhi.n	800e554 <rshift+0x7e>
 800e528:	1a9a      	subs	r2, r3, r2
 800e52a:	0092      	lsls	r2, r2, #2
 800e52c:	3a04      	subs	r2, #4
 800e52e:	3501      	adds	r5, #1
 800e530:	42ae      	cmp	r6, r5
 800e532:	bf38      	it	cc
 800e534:	2200      	movcc	r2, #0
 800e536:	18a3      	adds	r3, r4, r2
 800e538:	50a7      	str	r7, [r4, r2]
 800e53a:	b107      	cbz	r7, 800e53e <rshift+0x68>
 800e53c:	3304      	adds	r3, #4
 800e53e:	1b1a      	subs	r2, r3, r4
 800e540:	42a3      	cmp	r3, r4
 800e542:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e546:	bf08      	it	eq
 800e548:	2300      	moveq	r3, #0
 800e54a:	6102      	str	r2, [r0, #16]
 800e54c:	bf08      	it	eq
 800e54e:	6143      	streq	r3, [r0, #20]
 800e550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e554:	f8dc c000 	ldr.w	ip, [ip]
 800e558:	fa0c fc08 	lsl.w	ip, ip, r8
 800e55c:	ea4c 0707 	orr.w	r7, ip, r7
 800e560:	f849 7b04 	str.w	r7, [r9], #4
 800e564:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e568:	40cf      	lsrs	r7, r1
 800e56a:	e7da      	b.n	800e522 <rshift+0x4c>
 800e56c:	f851 cb04 	ldr.w	ip, [r1], #4
 800e570:	f847 cf04 	str.w	ip, [r7, #4]!
 800e574:	e7c3      	b.n	800e4fe <rshift+0x28>
 800e576:	4623      	mov	r3, r4
 800e578:	e7e1      	b.n	800e53e <rshift+0x68>

0800e57a <__hexdig_fun>:
 800e57a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e57e:	2b09      	cmp	r3, #9
 800e580:	d802      	bhi.n	800e588 <__hexdig_fun+0xe>
 800e582:	3820      	subs	r0, #32
 800e584:	b2c0      	uxtb	r0, r0
 800e586:	4770      	bx	lr
 800e588:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e58c:	2b05      	cmp	r3, #5
 800e58e:	d801      	bhi.n	800e594 <__hexdig_fun+0x1a>
 800e590:	3847      	subs	r0, #71	@ 0x47
 800e592:	e7f7      	b.n	800e584 <__hexdig_fun+0xa>
 800e594:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e598:	2b05      	cmp	r3, #5
 800e59a:	d801      	bhi.n	800e5a0 <__hexdig_fun+0x26>
 800e59c:	3827      	subs	r0, #39	@ 0x27
 800e59e:	e7f1      	b.n	800e584 <__hexdig_fun+0xa>
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	4770      	bx	lr

0800e5a4 <__gethex>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	b085      	sub	sp, #20
 800e5aa:	468a      	mov	sl, r1
 800e5ac:	9302      	str	r3, [sp, #8]
 800e5ae:	680b      	ldr	r3, [r1, #0]
 800e5b0:	9001      	str	r0, [sp, #4]
 800e5b2:	4690      	mov	r8, r2
 800e5b4:	1c9c      	adds	r4, r3, #2
 800e5b6:	46a1      	mov	r9, r4
 800e5b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e5bc:	2830      	cmp	r0, #48	@ 0x30
 800e5be:	d0fa      	beq.n	800e5b6 <__gethex+0x12>
 800e5c0:	eba9 0303 	sub.w	r3, r9, r3
 800e5c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800e5c8:	f7ff ffd7 	bl	800e57a <__hexdig_fun>
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	2800      	cmp	r0, #0
 800e5d0:	d168      	bne.n	800e6a4 <__gethex+0x100>
 800e5d2:	49a0      	ldr	r1, [pc, #640]	@ (800e854 <__gethex+0x2b0>)
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	4648      	mov	r0, r9
 800e5d8:	f7ff ff4b 	bl	800e472 <strncmp>
 800e5dc:	4607      	mov	r7, r0
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d167      	bne.n	800e6b2 <__gethex+0x10e>
 800e5e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e5e6:	4626      	mov	r6, r4
 800e5e8:	f7ff ffc7 	bl	800e57a <__hexdig_fun>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	d062      	beq.n	800e6b6 <__gethex+0x112>
 800e5f0:	4623      	mov	r3, r4
 800e5f2:	7818      	ldrb	r0, [r3, #0]
 800e5f4:	2830      	cmp	r0, #48	@ 0x30
 800e5f6:	4699      	mov	r9, r3
 800e5f8:	f103 0301 	add.w	r3, r3, #1
 800e5fc:	d0f9      	beq.n	800e5f2 <__gethex+0x4e>
 800e5fe:	f7ff ffbc 	bl	800e57a <__hexdig_fun>
 800e602:	fab0 f580 	clz	r5, r0
 800e606:	096d      	lsrs	r5, r5, #5
 800e608:	f04f 0b01 	mov.w	fp, #1
 800e60c:	464a      	mov	r2, r9
 800e60e:	4616      	mov	r6, r2
 800e610:	3201      	adds	r2, #1
 800e612:	7830      	ldrb	r0, [r6, #0]
 800e614:	f7ff ffb1 	bl	800e57a <__hexdig_fun>
 800e618:	2800      	cmp	r0, #0
 800e61a:	d1f8      	bne.n	800e60e <__gethex+0x6a>
 800e61c:	498d      	ldr	r1, [pc, #564]	@ (800e854 <__gethex+0x2b0>)
 800e61e:	2201      	movs	r2, #1
 800e620:	4630      	mov	r0, r6
 800e622:	f7ff ff26 	bl	800e472 <strncmp>
 800e626:	2800      	cmp	r0, #0
 800e628:	d13f      	bne.n	800e6aa <__gethex+0x106>
 800e62a:	b944      	cbnz	r4, 800e63e <__gethex+0x9a>
 800e62c:	1c74      	adds	r4, r6, #1
 800e62e:	4622      	mov	r2, r4
 800e630:	4616      	mov	r6, r2
 800e632:	3201      	adds	r2, #1
 800e634:	7830      	ldrb	r0, [r6, #0]
 800e636:	f7ff ffa0 	bl	800e57a <__hexdig_fun>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	d1f8      	bne.n	800e630 <__gethex+0x8c>
 800e63e:	1ba4      	subs	r4, r4, r6
 800e640:	00a7      	lsls	r7, r4, #2
 800e642:	7833      	ldrb	r3, [r6, #0]
 800e644:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e648:	2b50      	cmp	r3, #80	@ 0x50
 800e64a:	d13e      	bne.n	800e6ca <__gethex+0x126>
 800e64c:	7873      	ldrb	r3, [r6, #1]
 800e64e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e650:	d033      	beq.n	800e6ba <__gethex+0x116>
 800e652:	2b2d      	cmp	r3, #45	@ 0x2d
 800e654:	d034      	beq.n	800e6c0 <__gethex+0x11c>
 800e656:	1c71      	adds	r1, r6, #1
 800e658:	2400      	movs	r4, #0
 800e65a:	7808      	ldrb	r0, [r1, #0]
 800e65c:	f7ff ff8d 	bl	800e57a <__hexdig_fun>
 800e660:	1e43      	subs	r3, r0, #1
 800e662:	b2db      	uxtb	r3, r3
 800e664:	2b18      	cmp	r3, #24
 800e666:	d830      	bhi.n	800e6ca <__gethex+0x126>
 800e668:	f1a0 0210 	sub.w	r2, r0, #16
 800e66c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e670:	f7ff ff83 	bl	800e57a <__hexdig_fun>
 800e674:	f100 3cff 	add.w	ip, r0, #4294967295
 800e678:	fa5f fc8c 	uxtb.w	ip, ip
 800e67c:	f1bc 0f18 	cmp.w	ip, #24
 800e680:	f04f 030a 	mov.w	r3, #10
 800e684:	d91e      	bls.n	800e6c4 <__gethex+0x120>
 800e686:	b104      	cbz	r4, 800e68a <__gethex+0xe6>
 800e688:	4252      	negs	r2, r2
 800e68a:	4417      	add	r7, r2
 800e68c:	f8ca 1000 	str.w	r1, [sl]
 800e690:	b1ed      	cbz	r5, 800e6ce <__gethex+0x12a>
 800e692:	f1bb 0f00 	cmp.w	fp, #0
 800e696:	bf0c      	ite	eq
 800e698:	2506      	moveq	r5, #6
 800e69a:	2500      	movne	r5, #0
 800e69c:	4628      	mov	r0, r5
 800e69e:	b005      	add	sp, #20
 800e6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a4:	2500      	movs	r5, #0
 800e6a6:	462c      	mov	r4, r5
 800e6a8:	e7b0      	b.n	800e60c <__gethex+0x68>
 800e6aa:	2c00      	cmp	r4, #0
 800e6ac:	d1c7      	bne.n	800e63e <__gethex+0x9a>
 800e6ae:	4627      	mov	r7, r4
 800e6b0:	e7c7      	b.n	800e642 <__gethex+0x9e>
 800e6b2:	464e      	mov	r6, r9
 800e6b4:	462f      	mov	r7, r5
 800e6b6:	2501      	movs	r5, #1
 800e6b8:	e7c3      	b.n	800e642 <__gethex+0x9e>
 800e6ba:	2400      	movs	r4, #0
 800e6bc:	1cb1      	adds	r1, r6, #2
 800e6be:	e7cc      	b.n	800e65a <__gethex+0xb6>
 800e6c0:	2401      	movs	r4, #1
 800e6c2:	e7fb      	b.n	800e6bc <__gethex+0x118>
 800e6c4:	fb03 0002 	mla	r0, r3, r2, r0
 800e6c8:	e7ce      	b.n	800e668 <__gethex+0xc4>
 800e6ca:	4631      	mov	r1, r6
 800e6cc:	e7de      	b.n	800e68c <__gethex+0xe8>
 800e6ce:	eba6 0309 	sub.w	r3, r6, r9
 800e6d2:	3b01      	subs	r3, #1
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	2b07      	cmp	r3, #7
 800e6d8:	dc0a      	bgt.n	800e6f0 <__gethex+0x14c>
 800e6da:	9801      	ldr	r0, [sp, #4]
 800e6dc:	f000 fa46 	bl	800eb6c <_Balloc>
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	b940      	cbnz	r0, 800e6f6 <__gethex+0x152>
 800e6e4:	4b5c      	ldr	r3, [pc, #368]	@ (800e858 <__gethex+0x2b4>)
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	21e4      	movs	r1, #228	@ 0xe4
 800e6ea:	485c      	ldr	r0, [pc, #368]	@ (800e85c <__gethex+0x2b8>)
 800e6ec:	f7fe f906 	bl	800c8fc <__assert_func>
 800e6f0:	3101      	adds	r1, #1
 800e6f2:	105b      	asrs	r3, r3, #1
 800e6f4:	e7ef      	b.n	800e6d6 <__gethex+0x132>
 800e6f6:	f100 0a14 	add.w	sl, r0, #20
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	4655      	mov	r5, sl
 800e6fe:	469b      	mov	fp, r3
 800e700:	45b1      	cmp	r9, r6
 800e702:	d337      	bcc.n	800e774 <__gethex+0x1d0>
 800e704:	f845 bb04 	str.w	fp, [r5], #4
 800e708:	eba5 050a 	sub.w	r5, r5, sl
 800e70c:	10ad      	asrs	r5, r5, #2
 800e70e:	6125      	str	r5, [r4, #16]
 800e710:	4658      	mov	r0, fp
 800e712:	f000 fb1d 	bl	800ed50 <__hi0bits>
 800e716:	016d      	lsls	r5, r5, #5
 800e718:	f8d8 6000 	ldr.w	r6, [r8]
 800e71c:	1a2d      	subs	r5, r5, r0
 800e71e:	42b5      	cmp	r5, r6
 800e720:	dd54      	ble.n	800e7cc <__gethex+0x228>
 800e722:	1bad      	subs	r5, r5, r6
 800e724:	4629      	mov	r1, r5
 800e726:	4620      	mov	r0, r4
 800e728:	f000 feb1 	bl	800f48e <__any_on>
 800e72c:	4681      	mov	r9, r0
 800e72e:	b178      	cbz	r0, 800e750 <__gethex+0x1ac>
 800e730:	1e6b      	subs	r3, r5, #1
 800e732:	1159      	asrs	r1, r3, #5
 800e734:	f003 021f 	and.w	r2, r3, #31
 800e738:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e73c:	f04f 0901 	mov.w	r9, #1
 800e740:	fa09 f202 	lsl.w	r2, r9, r2
 800e744:	420a      	tst	r2, r1
 800e746:	d003      	beq.n	800e750 <__gethex+0x1ac>
 800e748:	454b      	cmp	r3, r9
 800e74a:	dc36      	bgt.n	800e7ba <__gethex+0x216>
 800e74c:	f04f 0902 	mov.w	r9, #2
 800e750:	4629      	mov	r1, r5
 800e752:	4620      	mov	r0, r4
 800e754:	f7ff febf 	bl	800e4d6 <rshift>
 800e758:	442f      	add	r7, r5
 800e75a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e75e:	42bb      	cmp	r3, r7
 800e760:	da42      	bge.n	800e7e8 <__gethex+0x244>
 800e762:	9801      	ldr	r0, [sp, #4]
 800e764:	4621      	mov	r1, r4
 800e766:	f000 fa41 	bl	800ebec <_Bfree>
 800e76a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e76c:	2300      	movs	r3, #0
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	25a3      	movs	r5, #163	@ 0xa3
 800e772:	e793      	b.n	800e69c <__gethex+0xf8>
 800e774:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e778:	2a2e      	cmp	r2, #46	@ 0x2e
 800e77a:	d012      	beq.n	800e7a2 <__gethex+0x1fe>
 800e77c:	2b20      	cmp	r3, #32
 800e77e:	d104      	bne.n	800e78a <__gethex+0x1e6>
 800e780:	f845 bb04 	str.w	fp, [r5], #4
 800e784:	f04f 0b00 	mov.w	fp, #0
 800e788:	465b      	mov	r3, fp
 800e78a:	7830      	ldrb	r0, [r6, #0]
 800e78c:	9303      	str	r3, [sp, #12]
 800e78e:	f7ff fef4 	bl	800e57a <__hexdig_fun>
 800e792:	9b03      	ldr	r3, [sp, #12]
 800e794:	f000 000f 	and.w	r0, r0, #15
 800e798:	4098      	lsls	r0, r3
 800e79a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e79e:	3304      	adds	r3, #4
 800e7a0:	e7ae      	b.n	800e700 <__gethex+0x15c>
 800e7a2:	45b1      	cmp	r9, r6
 800e7a4:	d8ea      	bhi.n	800e77c <__gethex+0x1d8>
 800e7a6:	492b      	ldr	r1, [pc, #172]	@ (800e854 <__gethex+0x2b0>)
 800e7a8:	9303      	str	r3, [sp, #12]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	f7ff fe60 	bl	800e472 <strncmp>
 800e7b2:	9b03      	ldr	r3, [sp, #12]
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d1e1      	bne.n	800e77c <__gethex+0x1d8>
 800e7b8:	e7a2      	b.n	800e700 <__gethex+0x15c>
 800e7ba:	1ea9      	subs	r1, r5, #2
 800e7bc:	4620      	mov	r0, r4
 800e7be:	f000 fe66 	bl	800f48e <__any_on>
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	d0c2      	beq.n	800e74c <__gethex+0x1a8>
 800e7c6:	f04f 0903 	mov.w	r9, #3
 800e7ca:	e7c1      	b.n	800e750 <__gethex+0x1ac>
 800e7cc:	da09      	bge.n	800e7e2 <__gethex+0x23e>
 800e7ce:	1b75      	subs	r5, r6, r5
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	9801      	ldr	r0, [sp, #4]
 800e7d4:	462a      	mov	r2, r5
 800e7d6:	f000 fc21 	bl	800f01c <__lshift>
 800e7da:	1b7f      	subs	r7, r7, r5
 800e7dc:	4604      	mov	r4, r0
 800e7de:	f100 0a14 	add.w	sl, r0, #20
 800e7e2:	f04f 0900 	mov.w	r9, #0
 800e7e6:	e7b8      	b.n	800e75a <__gethex+0x1b6>
 800e7e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e7ec:	42bd      	cmp	r5, r7
 800e7ee:	dd6f      	ble.n	800e8d0 <__gethex+0x32c>
 800e7f0:	1bed      	subs	r5, r5, r7
 800e7f2:	42ae      	cmp	r6, r5
 800e7f4:	dc34      	bgt.n	800e860 <__gethex+0x2bc>
 800e7f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7fa:	2b02      	cmp	r3, #2
 800e7fc:	d022      	beq.n	800e844 <__gethex+0x2a0>
 800e7fe:	2b03      	cmp	r3, #3
 800e800:	d024      	beq.n	800e84c <__gethex+0x2a8>
 800e802:	2b01      	cmp	r3, #1
 800e804:	d115      	bne.n	800e832 <__gethex+0x28e>
 800e806:	42ae      	cmp	r6, r5
 800e808:	d113      	bne.n	800e832 <__gethex+0x28e>
 800e80a:	2e01      	cmp	r6, #1
 800e80c:	d10b      	bne.n	800e826 <__gethex+0x282>
 800e80e:	9a02      	ldr	r2, [sp, #8]
 800e810:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e814:	6013      	str	r3, [r2, #0]
 800e816:	2301      	movs	r3, #1
 800e818:	6123      	str	r3, [r4, #16]
 800e81a:	f8ca 3000 	str.w	r3, [sl]
 800e81e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e820:	2562      	movs	r5, #98	@ 0x62
 800e822:	601c      	str	r4, [r3, #0]
 800e824:	e73a      	b.n	800e69c <__gethex+0xf8>
 800e826:	1e71      	subs	r1, r6, #1
 800e828:	4620      	mov	r0, r4
 800e82a:	f000 fe30 	bl	800f48e <__any_on>
 800e82e:	2800      	cmp	r0, #0
 800e830:	d1ed      	bne.n	800e80e <__gethex+0x26a>
 800e832:	9801      	ldr	r0, [sp, #4]
 800e834:	4621      	mov	r1, r4
 800e836:	f000 f9d9 	bl	800ebec <_Bfree>
 800e83a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e83c:	2300      	movs	r3, #0
 800e83e:	6013      	str	r3, [r2, #0]
 800e840:	2550      	movs	r5, #80	@ 0x50
 800e842:	e72b      	b.n	800e69c <__gethex+0xf8>
 800e844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1f3      	bne.n	800e832 <__gethex+0x28e>
 800e84a:	e7e0      	b.n	800e80e <__gethex+0x26a>
 800e84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1dd      	bne.n	800e80e <__gethex+0x26a>
 800e852:	e7ee      	b.n	800e832 <__gethex+0x28e>
 800e854:	0801015b 	.word	0x0801015b
 800e858:	08010216 	.word	0x08010216
 800e85c:	08010227 	.word	0x08010227
 800e860:	1e6f      	subs	r7, r5, #1
 800e862:	f1b9 0f00 	cmp.w	r9, #0
 800e866:	d130      	bne.n	800e8ca <__gethex+0x326>
 800e868:	b127      	cbz	r7, 800e874 <__gethex+0x2d0>
 800e86a:	4639      	mov	r1, r7
 800e86c:	4620      	mov	r0, r4
 800e86e:	f000 fe0e 	bl	800f48e <__any_on>
 800e872:	4681      	mov	r9, r0
 800e874:	117a      	asrs	r2, r7, #5
 800e876:	2301      	movs	r3, #1
 800e878:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e87c:	f007 071f 	and.w	r7, r7, #31
 800e880:	40bb      	lsls	r3, r7
 800e882:	4213      	tst	r3, r2
 800e884:	4629      	mov	r1, r5
 800e886:	4620      	mov	r0, r4
 800e888:	bf18      	it	ne
 800e88a:	f049 0902 	orrne.w	r9, r9, #2
 800e88e:	f7ff fe22 	bl	800e4d6 <rshift>
 800e892:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e896:	1b76      	subs	r6, r6, r5
 800e898:	2502      	movs	r5, #2
 800e89a:	f1b9 0f00 	cmp.w	r9, #0
 800e89e:	d047      	beq.n	800e930 <__gethex+0x38c>
 800e8a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d015      	beq.n	800e8d4 <__gethex+0x330>
 800e8a8:	2b03      	cmp	r3, #3
 800e8aa:	d017      	beq.n	800e8dc <__gethex+0x338>
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d109      	bne.n	800e8c4 <__gethex+0x320>
 800e8b0:	f019 0f02 	tst.w	r9, #2
 800e8b4:	d006      	beq.n	800e8c4 <__gethex+0x320>
 800e8b6:	f8da 3000 	ldr.w	r3, [sl]
 800e8ba:	ea49 0903 	orr.w	r9, r9, r3
 800e8be:	f019 0f01 	tst.w	r9, #1
 800e8c2:	d10e      	bne.n	800e8e2 <__gethex+0x33e>
 800e8c4:	f045 0510 	orr.w	r5, r5, #16
 800e8c8:	e032      	b.n	800e930 <__gethex+0x38c>
 800e8ca:	f04f 0901 	mov.w	r9, #1
 800e8ce:	e7d1      	b.n	800e874 <__gethex+0x2d0>
 800e8d0:	2501      	movs	r5, #1
 800e8d2:	e7e2      	b.n	800e89a <__gethex+0x2f6>
 800e8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8d6:	f1c3 0301 	rsb	r3, r3, #1
 800e8da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e8dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d0f0      	beq.n	800e8c4 <__gethex+0x320>
 800e8e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e8e6:	f104 0314 	add.w	r3, r4, #20
 800e8ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e8ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e8f2:	f04f 0c00 	mov.w	ip, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e900:	d01b      	beq.n	800e93a <__gethex+0x396>
 800e902:	3201      	adds	r2, #1
 800e904:	6002      	str	r2, [r0, #0]
 800e906:	2d02      	cmp	r5, #2
 800e908:	f104 0314 	add.w	r3, r4, #20
 800e90c:	d13c      	bne.n	800e988 <__gethex+0x3e4>
 800e90e:	f8d8 2000 	ldr.w	r2, [r8]
 800e912:	3a01      	subs	r2, #1
 800e914:	42b2      	cmp	r2, r6
 800e916:	d109      	bne.n	800e92c <__gethex+0x388>
 800e918:	1171      	asrs	r1, r6, #5
 800e91a:	2201      	movs	r2, #1
 800e91c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e920:	f006 061f 	and.w	r6, r6, #31
 800e924:	fa02 f606 	lsl.w	r6, r2, r6
 800e928:	421e      	tst	r6, r3
 800e92a:	d13a      	bne.n	800e9a2 <__gethex+0x3fe>
 800e92c:	f045 0520 	orr.w	r5, r5, #32
 800e930:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e932:	601c      	str	r4, [r3, #0]
 800e934:	9b02      	ldr	r3, [sp, #8]
 800e936:	601f      	str	r7, [r3, #0]
 800e938:	e6b0      	b.n	800e69c <__gethex+0xf8>
 800e93a:	4299      	cmp	r1, r3
 800e93c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e940:	d8d9      	bhi.n	800e8f6 <__gethex+0x352>
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	459b      	cmp	fp, r3
 800e946:	db17      	blt.n	800e978 <__gethex+0x3d4>
 800e948:	6861      	ldr	r1, [r4, #4]
 800e94a:	9801      	ldr	r0, [sp, #4]
 800e94c:	3101      	adds	r1, #1
 800e94e:	f000 f90d 	bl	800eb6c <_Balloc>
 800e952:	4681      	mov	r9, r0
 800e954:	b918      	cbnz	r0, 800e95e <__gethex+0x3ba>
 800e956:	4b1a      	ldr	r3, [pc, #104]	@ (800e9c0 <__gethex+0x41c>)
 800e958:	4602      	mov	r2, r0
 800e95a:	2184      	movs	r1, #132	@ 0x84
 800e95c:	e6c5      	b.n	800e6ea <__gethex+0x146>
 800e95e:	6922      	ldr	r2, [r4, #16]
 800e960:	3202      	adds	r2, #2
 800e962:	f104 010c 	add.w	r1, r4, #12
 800e966:	0092      	lsls	r2, r2, #2
 800e968:	300c      	adds	r0, #12
 800e96a:	f7ff fd94 	bl	800e496 <memcpy>
 800e96e:	4621      	mov	r1, r4
 800e970:	9801      	ldr	r0, [sp, #4]
 800e972:	f000 f93b 	bl	800ebec <_Bfree>
 800e976:	464c      	mov	r4, r9
 800e978:	6923      	ldr	r3, [r4, #16]
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e980:	6122      	str	r2, [r4, #16]
 800e982:	2201      	movs	r2, #1
 800e984:	615a      	str	r2, [r3, #20]
 800e986:	e7be      	b.n	800e906 <__gethex+0x362>
 800e988:	6922      	ldr	r2, [r4, #16]
 800e98a:	455a      	cmp	r2, fp
 800e98c:	dd0b      	ble.n	800e9a6 <__gethex+0x402>
 800e98e:	2101      	movs	r1, #1
 800e990:	4620      	mov	r0, r4
 800e992:	f7ff fda0 	bl	800e4d6 <rshift>
 800e996:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e99a:	3701      	adds	r7, #1
 800e99c:	42bb      	cmp	r3, r7
 800e99e:	f6ff aee0 	blt.w	800e762 <__gethex+0x1be>
 800e9a2:	2501      	movs	r5, #1
 800e9a4:	e7c2      	b.n	800e92c <__gethex+0x388>
 800e9a6:	f016 061f 	ands.w	r6, r6, #31
 800e9aa:	d0fa      	beq.n	800e9a2 <__gethex+0x3fe>
 800e9ac:	4453      	add	r3, sl
 800e9ae:	f1c6 0620 	rsb	r6, r6, #32
 800e9b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e9b6:	f000 f9cb 	bl	800ed50 <__hi0bits>
 800e9ba:	42b0      	cmp	r0, r6
 800e9bc:	dbe7      	blt.n	800e98e <__gethex+0x3ea>
 800e9be:	e7f0      	b.n	800e9a2 <__gethex+0x3fe>
 800e9c0:	08010216 	.word	0x08010216

0800e9c4 <L_shift>:
 800e9c4:	f1c2 0208 	rsb	r2, r2, #8
 800e9c8:	0092      	lsls	r2, r2, #2
 800e9ca:	b570      	push	{r4, r5, r6, lr}
 800e9cc:	f1c2 0620 	rsb	r6, r2, #32
 800e9d0:	6843      	ldr	r3, [r0, #4]
 800e9d2:	6804      	ldr	r4, [r0, #0]
 800e9d4:	fa03 f506 	lsl.w	r5, r3, r6
 800e9d8:	432c      	orrs	r4, r5
 800e9da:	40d3      	lsrs	r3, r2
 800e9dc:	6004      	str	r4, [r0, #0]
 800e9de:	f840 3f04 	str.w	r3, [r0, #4]!
 800e9e2:	4288      	cmp	r0, r1
 800e9e4:	d3f4      	bcc.n	800e9d0 <L_shift+0xc>
 800e9e6:	bd70      	pop	{r4, r5, r6, pc}

0800e9e8 <__match>:
 800e9e8:	b530      	push	{r4, r5, lr}
 800e9ea:	6803      	ldr	r3, [r0, #0]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9f2:	b914      	cbnz	r4, 800e9fa <__match+0x12>
 800e9f4:	6003      	str	r3, [r0, #0]
 800e9f6:	2001      	movs	r0, #1
 800e9f8:	bd30      	pop	{r4, r5, pc}
 800e9fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ea02:	2d19      	cmp	r5, #25
 800ea04:	bf98      	it	ls
 800ea06:	3220      	addls	r2, #32
 800ea08:	42a2      	cmp	r2, r4
 800ea0a:	d0f0      	beq.n	800e9ee <__match+0x6>
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	e7f3      	b.n	800e9f8 <__match+0x10>

0800ea10 <__hexnan>:
 800ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	680b      	ldr	r3, [r1, #0]
 800ea16:	6801      	ldr	r1, [r0, #0]
 800ea18:	115e      	asrs	r6, r3, #5
 800ea1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ea1e:	f013 031f 	ands.w	r3, r3, #31
 800ea22:	b087      	sub	sp, #28
 800ea24:	bf18      	it	ne
 800ea26:	3604      	addne	r6, #4
 800ea28:	2500      	movs	r5, #0
 800ea2a:	1f37      	subs	r7, r6, #4
 800ea2c:	4682      	mov	sl, r0
 800ea2e:	4690      	mov	r8, r2
 800ea30:	9301      	str	r3, [sp, #4]
 800ea32:	f846 5c04 	str.w	r5, [r6, #-4]
 800ea36:	46b9      	mov	r9, r7
 800ea38:	463c      	mov	r4, r7
 800ea3a:	9502      	str	r5, [sp, #8]
 800ea3c:	46ab      	mov	fp, r5
 800ea3e:	784a      	ldrb	r2, [r1, #1]
 800ea40:	1c4b      	adds	r3, r1, #1
 800ea42:	9303      	str	r3, [sp, #12]
 800ea44:	b342      	cbz	r2, 800ea98 <__hexnan+0x88>
 800ea46:	4610      	mov	r0, r2
 800ea48:	9105      	str	r1, [sp, #20]
 800ea4a:	9204      	str	r2, [sp, #16]
 800ea4c:	f7ff fd95 	bl	800e57a <__hexdig_fun>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d151      	bne.n	800eaf8 <__hexnan+0xe8>
 800ea54:	9a04      	ldr	r2, [sp, #16]
 800ea56:	9905      	ldr	r1, [sp, #20]
 800ea58:	2a20      	cmp	r2, #32
 800ea5a:	d818      	bhi.n	800ea8e <__hexnan+0x7e>
 800ea5c:	9b02      	ldr	r3, [sp, #8]
 800ea5e:	459b      	cmp	fp, r3
 800ea60:	dd13      	ble.n	800ea8a <__hexnan+0x7a>
 800ea62:	454c      	cmp	r4, r9
 800ea64:	d206      	bcs.n	800ea74 <__hexnan+0x64>
 800ea66:	2d07      	cmp	r5, #7
 800ea68:	dc04      	bgt.n	800ea74 <__hexnan+0x64>
 800ea6a:	462a      	mov	r2, r5
 800ea6c:	4649      	mov	r1, r9
 800ea6e:	4620      	mov	r0, r4
 800ea70:	f7ff ffa8 	bl	800e9c4 <L_shift>
 800ea74:	4544      	cmp	r4, r8
 800ea76:	d952      	bls.n	800eb1e <__hexnan+0x10e>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	f1a4 0904 	sub.w	r9, r4, #4
 800ea7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea82:	f8cd b008 	str.w	fp, [sp, #8]
 800ea86:	464c      	mov	r4, r9
 800ea88:	461d      	mov	r5, r3
 800ea8a:	9903      	ldr	r1, [sp, #12]
 800ea8c:	e7d7      	b.n	800ea3e <__hexnan+0x2e>
 800ea8e:	2a29      	cmp	r2, #41	@ 0x29
 800ea90:	d157      	bne.n	800eb42 <__hexnan+0x132>
 800ea92:	3102      	adds	r1, #2
 800ea94:	f8ca 1000 	str.w	r1, [sl]
 800ea98:	f1bb 0f00 	cmp.w	fp, #0
 800ea9c:	d051      	beq.n	800eb42 <__hexnan+0x132>
 800ea9e:	454c      	cmp	r4, r9
 800eaa0:	d206      	bcs.n	800eab0 <__hexnan+0xa0>
 800eaa2:	2d07      	cmp	r5, #7
 800eaa4:	dc04      	bgt.n	800eab0 <__hexnan+0xa0>
 800eaa6:	462a      	mov	r2, r5
 800eaa8:	4649      	mov	r1, r9
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f7ff ff8a 	bl	800e9c4 <L_shift>
 800eab0:	4544      	cmp	r4, r8
 800eab2:	d936      	bls.n	800eb22 <__hexnan+0x112>
 800eab4:	f1a8 0204 	sub.w	r2, r8, #4
 800eab8:	4623      	mov	r3, r4
 800eaba:	f853 1b04 	ldr.w	r1, [r3], #4
 800eabe:	f842 1f04 	str.w	r1, [r2, #4]!
 800eac2:	429f      	cmp	r7, r3
 800eac4:	d2f9      	bcs.n	800eaba <__hexnan+0xaa>
 800eac6:	1b3b      	subs	r3, r7, r4
 800eac8:	f023 0303 	bic.w	r3, r3, #3
 800eacc:	3304      	adds	r3, #4
 800eace:	3401      	adds	r4, #1
 800ead0:	3e03      	subs	r6, #3
 800ead2:	42b4      	cmp	r4, r6
 800ead4:	bf88      	it	hi
 800ead6:	2304      	movhi	r3, #4
 800ead8:	4443      	add	r3, r8
 800eada:	2200      	movs	r2, #0
 800eadc:	f843 2b04 	str.w	r2, [r3], #4
 800eae0:	429f      	cmp	r7, r3
 800eae2:	d2fb      	bcs.n	800eadc <__hexnan+0xcc>
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	b91b      	cbnz	r3, 800eaf0 <__hexnan+0xe0>
 800eae8:	4547      	cmp	r7, r8
 800eaea:	d128      	bne.n	800eb3e <__hexnan+0x12e>
 800eaec:	2301      	movs	r3, #1
 800eaee:	603b      	str	r3, [r7, #0]
 800eaf0:	2005      	movs	r0, #5
 800eaf2:	b007      	add	sp, #28
 800eaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf8:	3501      	adds	r5, #1
 800eafa:	2d08      	cmp	r5, #8
 800eafc:	f10b 0b01 	add.w	fp, fp, #1
 800eb00:	dd06      	ble.n	800eb10 <__hexnan+0x100>
 800eb02:	4544      	cmp	r4, r8
 800eb04:	d9c1      	bls.n	800ea8a <__hexnan+0x7a>
 800eb06:	2300      	movs	r3, #0
 800eb08:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb0c:	2501      	movs	r5, #1
 800eb0e:	3c04      	subs	r4, #4
 800eb10:	6822      	ldr	r2, [r4, #0]
 800eb12:	f000 000f 	and.w	r0, r0, #15
 800eb16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800eb1a:	6020      	str	r0, [r4, #0]
 800eb1c:	e7b5      	b.n	800ea8a <__hexnan+0x7a>
 800eb1e:	2508      	movs	r5, #8
 800eb20:	e7b3      	b.n	800ea8a <__hexnan+0x7a>
 800eb22:	9b01      	ldr	r3, [sp, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d0dd      	beq.n	800eae4 <__hexnan+0xd4>
 800eb28:	f1c3 0320 	rsb	r3, r3, #32
 800eb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb30:	40da      	lsrs	r2, r3
 800eb32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eb36:	4013      	ands	r3, r2
 800eb38:	f846 3c04 	str.w	r3, [r6, #-4]
 800eb3c:	e7d2      	b.n	800eae4 <__hexnan+0xd4>
 800eb3e:	3f04      	subs	r7, #4
 800eb40:	e7d0      	b.n	800eae4 <__hexnan+0xd4>
 800eb42:	2004      	movs	r0, #4
 800eb44:	e7d5      	b.n	800eaf2 <__hexnan+0xe2>

0800eb46 <__ascii_mbtowc>:
 800eb46:	b082      	sub	sp, #8
 800eb48:	b901      	cbnz	r1, 800eb4c <__ascii_mbtowc+0x6>
 800eb4a:	a901      	add	r1, sp, #4
 800eb4c:	b142      	cbz	r2, 800eb60 <__ascii_mbtowc+0x1a>
 800eb4e:	b14b      	cbz	r3, 800eb64 <__ascii_mbtowc+0x1e>
 800eb50:	7813      	ldrb	r3, [r2, #0]
 800eb52:	600b      	str	r3, [r1, #0]
 800eb54:	7812      	ldrb	r2, [r2, #0]
 800eb56:	1e10      	subs	r0, r2, #0
 800eb58:	bf18      	it	ne
 800eb5a:	2001      	movne	r0, #1
 800eb5c:	b002      	add	sp, #8
 800eb5e:	4770      	bx	lr
 800eb60:	4610      	mov	r0, r2
 800eb62:	e7fb      	b.n	800eb5c <__ascii_mbtowc+0x16>
 800eb64:	f06f 0001 	mvn.w	r0, #1
 800eb68:	e7f8      	b.n	800eb5c <__ascii_mbtowc+0x16>
	...

0800eb6c <_Balloc>:
 800eb6c:	b570      	push	{r4, r5, r6, lr}
 800eb6e:	69c6      	ldr	r6, [r0, #28]
 800eb70:	4604      	mov	r4, r0
 800eb72:	460d      	mov	r5, r1
 800eb74:	b976      	cbnz	r6, 800eb94 <_Balloc+0x28>
 800eb76:	2010      	movs	r0, #16
 800eb78:	f7fd f8ae 	bl	800bcd8 <malloc>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	61e0      	str	r0, [r4, #28]
 800eb80:	b920      	cbnz	r0, 800eb8c <_Balloc+0x20>
 800eb82:	4b18      	ldr	r3, [pc, #96]	@ (800ebe4 <_Balloc+0x78>)
 800eb84:	4818      	ldr	r0, [pc, #96]	@ (800ebe8 <_Balloc+0x7c>)
 800eb86:	216b      	movs	r1, #107	@ 0x6b
 800eb88:	f7fd feb8 	bl	800c8fc <__assert_func>
 800eb8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb90:	6006      	str	r6, [r0, #0]
 800eb92:	60c6      	str	r6, [r0, #12]
 800eb94:	69e6      	ldr	r6, [r4, #28]
 800eb96:	68f3      	ldr	r3, [r6, #12]
 800eb98:	b183      	cbz	r3, 800ebbc <_Balloc+0x50>
 800eb9a:	69e3      	ldr	r3, [r4, #28]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eba2:	b9b8      	cbnz	r0, 800ebd4 <_Balloc+0x68>
 800eba4:	2101      	movs	r1, #1
 800eba6:	fa01 f605 	lsl.w	r6, r1, r5
 800ebaa:	1d72      	adds	r2, r6, #5
 800ebac:	0092      	lsls	r2, r2, #2
 800ebae:	4620      	mov	r0, r4
 800ebb0:	f000 fee2 	bl	800f978 <_calloc_r>
 800ebb4:	b160      	cbz	r0, 800ebd0 <_Balloc+0x64>
 800ebb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ebba:	e00e      	b.n	800ebda <_Balloc+0x6e>
 800ebbc:	2221      	movs	r2, #33	@ 0x21
 800ebbe:	2104      	movs	r1, #4
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f000 fed9 	bl	800f978 <_calloc_r>
 800ebc6:	69e3      	ldr	r3, [r4, #28]
 800ebc8:	60f0      	str	r0, [r6, #12]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d1e4      	bne.n	800eb9a <_Balloc+0x2e>
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	bd70      	pop	{r4, r5, r6, pc}
 800ebd4:	6802      	ldr	r2, [r0, #0]
 800ebd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ebda:	2300      	movs	r3, #0
 800ebdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ebe0:	e7f7      	b.n	800ebd2 <_Balloc+0x66>
 800ebe2:	bf00      	nop
 800ebe4:	080100ae 	.word	0x080100ae
 800ebe8:	08010287 	.word	0x08010287

0800ebec <_Bfree>:
 800ebec:	b570      	push	{r4, r5, r6, lr}
 800ebee:	69c6      	ldr	r6, [r0, #28]
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	b976      	cbnz	r6, 800ec14 <_Bfree+0x28>
 800ebf6:	2010      	movs	r0, #16
 800ebf8:	f7fd f86e 	bl	800bcd8 <malloc>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	61e8      	str	r0, [r5, #28]
 800ec00:	b920      	cbnz	r0, 800ec0c <_Bfree+0x20>
 800ec02:	4b09      	ldr	r3, [pc, #36]	@ (800ec28 <_Bfree+0x3c>)
 800ec04:	4809      	ldr	r0, [pc, #36]	@ (800ec2c <_Bfree+0x40>)
 800ec06:	218f      	movs	r1, #143	@ 0x8f
 800ec08:	f7fd fe78 	bl	800c8fc <__assert_func>
 800ec0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec10:	6006      	str	r6, [r0, #0]
 800ec12:	60c6      	str	r6, [r0, #12]
 800ec14:	b13c      	cbz	r4, 800ec26 <_Bfree+0x3a>
 800ec16:	69eb      	ldr	r3, [r5, #28]
 800ec18:	6862      	ldr	r2, [r4, #4]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec20:	6021      	str	r1, [r4, #0]
 800ec22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec26:	bd70      	pop	{r4, r5, r6, pc}
 800ec28:	080100ae 	.word	0x080100ae
 800ec2c:	08010287 	.word	0x08010287

0800ec30 <__multadd>:
 800ec30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec34:	690d      	ldr	r5, [r1, #16]
 800ec36:	4607      	mov	r7, r0
 800ec38:	460c      	mov	r4, r1
 800ec3a:	461e      	mov	r6, r3
 800ec3c:	f101 0c14 	add.w	ip, r1, #20
 800ec40:	2000      	movs	r0, #0
 800ec42:	f8dc 3000 	ldr.w	r3, [ip]
 800ec46:	b299      	uxth	r1, r3
 800ec48:	fb02 6101 	mla	r1, r2, r1, r6
 800ec4c:	0c1e      	lsrs	r6, r3, #16
 800ec4e:	0c0b      	lsrs	r3, r1, #16
 800ec50:	fb02 3306 	mla	r3, r2, r6, r3
 800ec54:	b289      	uxth	r1, r1
 800ec56:	3001      	adds	r0, #1
 800ec58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ec5c:	4285      	cmp	r5, r0
 800ec5e:	f84c 1b04 	str.w	r1, [ip], #4
 800ec62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ec66:	dcec      	bgt.n	800ec42 <__multadd+0x12>
 800ec68:	b30e      	cbz	r6, 800ecae <__multadd+0x7e>
 800ec6a:	68a3      	ldr	r3, [r4, #8]
 800ec6c:	42ab      	cmp	r3, r5
 800ec6e:	dc19      	bgt.n	800eca4 <__multadd+0x74>
 800ec70:	6861      	ldr	r1, [r4, #4]
 800ec72:	4638      	mov	r0, r7
 800ec74:	3101      	adds	r1, #1
 800ec76:	f7ff ff79 	bl	800eb6c <_Balloc>
 800ec7a:	4680      	mov	r8, r0
 800ec7c:	b928      	cbnz	r0, 800ec8a <__multadd+0x5a>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	4b0c      	ldr	r3, [pc, #48]	@ (800ecb4 <__multadd+0x84>)
 800ec82:	480d      	ldr	r0, [pc, #52]	@ (800ecb8 <__multadd+0x88>)
 800ec84:	21ba      	movs	r1, #186	@ 0xba
 800ec86:	f7fd fe39 	bl	800c8fc <__assert_func>
 800ec8a:	6922      	ldr	r2, [r4, #16]
 800ec8c:	3202      	adds	r2, #2
 800ec8e:	f104 010c 	add.w	r1, r4, #12
 800ec92:	0092      	lsls	r2, r2, #2
 800ec94:	300c      	adds	r0, #12
 800ec96:	f7ff fbfe 	bl	800e496 <memcpy>
 800ec9a:	4621      	mov	r1, r4
 800ec9c:	4638      	mov	r0, r7
 800ec9e:	f7ff ffa5 	bl	800ebec <_Bfree>
 800eca2:	4644      	mov	r4, r8
 800eca4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eca8:	3501      	adds	r5, #1
 800ecaa:	615e      	str	r6, [r3, #20]
 800ecac:	6125      	str	r5, [r4, #16]
 800ecae:	4620      	mov	r0, r4
 800ecb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb4:	08010216 	.word	0x08010216
 800ecb8:	08010287 	.word	0x08010287

0800ecbc <__s2b>:
 800ecbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecc0:	460c      	mov	r4, r1
 800ecc2:	4615      	mov	r5, r2
 800ecc4:	461f      	mov	r7, r3
 800ecc6:	2209      	movs	r2, #9
 800ecc8:	3308      	adds	r3, #8
 800ecca:	4606      	mov	r6, r0
 800eccc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	db09      	blt.n	800ecec <__s2b+0x30>
 800ecd8:	4630      	mov	r0, r6
 800ecda:	f7ff ff47 	bl	800eb6c <_Balloc>
 800ecde:	b940      	cbnz	r0, 800ecf2 <__s2b+0x36>
 800ece0:	4602      	mov	r2, r0
 800ece2:	4b19      	ldr	r3, [pc, #100]	@ (800ed48 <__s2b+0x8c>)
 800ece4:	4819      	ldr	r0, [pc, #100]	@ (800ed4c <__s2b+0x90>)
 800ece6:	21d3      	movs	r1, #211	@ 0xd3
 800ece8:	f7fd fe08 	bl	800c8fc <__assert_func>
 800ecec:	0052      	lsls	r2, r2, #1
 800ecee:	3101      	adds	r1, #1
 800ecf0:	e7f0      	b.n	800ecd4 <__s2b+0x18>
 800ecf2:	9b08      	ldr	r3, [sp, #32]
 800ecf4:	6143      	str	r3, [r0, #20]
 800ecf6:	2d09      	cmp	r5, #9
 800ecf8:	f04f 0301 	mov.w	r3, #1
 800ecfc:	6103      	str	r3, [r0, #16]
 800ecfe:	dd16      	ble.n	800ed2e <__s2b+0x72>
 800ed00:	f104 0909 	add.w	r9, r4, #9
 800ed04:	46c8      	mov	r8, r9
 800ed06:	442c      	add	r4, r5
 800ed08:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ed0c:	4601      	mov	r1, r0
 800ed0e:	3b30      	subs	r3, #48	@ 0x30
 800ed10:	220a      	movs	r2, #10
 800ed12:	4630      	mov	r0, r6
 800ed14:	f7ff ff8c 	bl	800ec30 <__multadd>
 800ed18:	45a0      	cmp	r8, r4
 800ed1a:	d1f5      	bne.n	800ed08 <__s2b+0x4c>
 800ed1c:	f1a5 0408 	sub.w	r4, r5, #8
 800ed20:	444c      	add	r4, r9
 800ed22:	1b2d      	subs	r5, r5, r4
 800ed24:	1963      	adds	r3, r4, r5
 800ed26:	42bb      	cmp	r3, r7
 800ed28:	db04      	blt.n	800ed34 <__s2b+0x78>
 800ed2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed2e:	340a      	adds	r4, #10
 800ed30:	2509      	movs	r5, #9
 800ed32:	e7f6      	b.n	800ed22 <__s2b+0x66>
 800ed34:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ed38:	4601      	mov	r1, r0
 800ed3a:	3b30      	subs	r3, #48	@ 0x30
 800ed3c:	220a      	movs	r2, #10
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f7ff ff76 	bl	800ec30 <__multadd>
 800ed44:	e7ee      	b.n	800ed24 <__s2b+0x68>
 800ed46:	bf00      	nop
 800ed48:	08010216 	.word	0x08010216
 800ed4c:	08010287 	.word	0x08010287

0800ed50 <__hi0bits>:
 800ed50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ed54:	4603      	mov	r3, r0
 800ed56:	bf36      	itet	cc
 800ed58:	0403      	lslcc	r3, r0, #16
 800ed5a:	2000      	movcs	r0, #0
 800ed5c:	2010      	movcc	r0, #16
 800ed5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed62:	bf3c      	itt	cc
 800ed64:	021b      	lslcc	r3, r3, #8
 800ed66:	3008      	addcc	r0, #8
 800ed68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed6c:	bf3c      	itt	cc
 800ed6e:	011b      	lslcc	r3, r3, #4
 800ed70:	3004      	addcc	r0, #4
 800ed72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed76:	bf3c      	itt	cc
 800ed78:	009b      	lslcc	r3, r3, #2
 800ed7a:	3002      	addcc	r0, #2
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	db05      	blt.n	800ed8c <__hi0bits+0x3c>
 800ed80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ed84:	f100 0001 	add.w	r0, r0, #1
 800ed88:	bf08      	it	eq
 800ed8a:	2020      	moveq	r0, #32
 800ed8c:	4770      	bx	lr

0800ed8e <__lo0bits>:
 800ed8e:	6803      	ldr	r3, [r0, #0]
 800ed90:	4602      	mov	r2, r0
 800ed92:	f013 0007 	ands.w	r0, r3, #7
 800ed96:	d00b      	beq.n	800edb0 <__lo0bits+0x22>
 800ed98:	07d9      	lsls	r1, r3, #31
 800ed9a:	d421      	bmi.n	800ede0 <__lo0bits+0x52>
 800ed9c:	0798      	lsls	r0, r3, #30
 800ed9e:	bf49      	itett	mi
 800eda0:	085b      	lsrmi	r3, r3, #1
 800eda2:	089b      	lsrpl	r3, r3, #2
 800eda4:	2001      	movmi	r0, #1
 800eda6:	6013      	strmi	r3, [r2, #0]
 800eda8:	bf5c      	itt	pl
 800edaa:	6013      	strpl	r3, [r2, #0]
 800edac:	2002      	movpl	r0, #2
 800edae:	4770      	bx	lr
 800edb0:	b299      	uxth	r1, r3
 800edb2:	b909      	cbnz	r1, 800edb8 <__lo0bits+0x2a>
 800edb4:	0c1b      	lsrs	r3, r3, #16
 800edb6:	2010      	movs	r0, #16
 800edb8:	b2d9      	uxtb	r1, r3
 800edba:	b909      	cbnz	r1, 800edc0 <__lo0bits+0x32>
 800edbc:	3008      	adds	r0, #8
 800edbe:	0a1b      	lsrs	r3, r3, #8
 800edc0:	0719      	lsls	r1, r3, #28
 800edc2:	bf04      	itt	eq
 800edc4:	091b      	lsreq	r3, r3, #4
 800edc6:	3004      	addeq	r0, #4
 800edc8:	0799      	lsls	r1, r3, #30
 800edca:	bf04      	itt	eq
 800edcc:	089b      	lsreq	r3, r3, #2
 800edce:	3002      	addeq	r0, #2
 800edd0:	07d9      	lsls	r1, r3, #31
 800edd2:	d403      	bmi.n	800eddc <__lo0bits+0x4e>
 800edd4:	085b      	lsrs	r3, r3, #1
 800edd6:	f100 0001 	add.w	r0, r0, #1
 800edda:	d003      	beq.n	800ede4 <__lo0bits+0x56>
 800eddc:	6013      	str	r3, [r2, #0]
 800edde:	4770      	bx	lr
 800ede0:	2000      	movs	r0, #0
 800ede2:	4770      	bx	lr
 800ede4:	2020      	movs	r0, #32
 800ede6:	4770      	bx	lr

0800ede8 <__i2b>:
 800ede8:	b510      	push	{r4, lr}
 800edea:	460c      	mov	r4, r1
 800edec:	2101      	movs	r1, #1
 800edee:	f7ff febd 	bl	800eb6c <_Balloc>
 800edf2:	4602      	mov	r2, r0
 800edf4:	b928      	cbnz	r0, 800ee02 <__i2b+0x1a>
 800edf6:	4b05      	ldr	r3, [pc, #20]	@ (800ee0c <__i2b+0x24>)
 800edf8:	4805      	ldr	r0, [pc, #20]	@ (800ee10 <__i2b+0x28>)
 800edfa:	f240 1145 	movw	r1, #325	@ 0x145
 800edfe:	f7fd fd7d 	bl	800c8fc <__assert_func>
 800ee02:	2301      	movs	r3, #1
 800ee04:	6144      	str	r4, [r0, #20]
 800ee06:	6103      	str	r3, [r0, #16]
 800ee08:	bd10      	pop	{r4, pc}
 800ee0a:	bf00      	nop
 800ee0c:	08010216 	.word	0x08010216
 800ee10:	08010287 	.word	0x08010287

0800ee14 <__multiply>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	4614      	mov	r4, r2
 800ee1a:	690a      	ldr	r2, [r1, #16]
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	bfa8      	it	ge
 800ee22:	4623      	movge	r3, r4
 800ee24:	460f      	mov	r7, r1
 800ee26:	bfa4      	itt	ge
 800ee28:	460c      	movge	r4, r1
 800ee2a:	461f      	movge	r7, r3
 800ee2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ee30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ee34:	68a3      	ldr	r3, [r4, #8]
 800ee36:	6861      	ldr	r1, [r4, #4]
 800ee38:	eb0a 0609 	add.w	r6, sl, r9
 800ee3c:	42b3      	cmp	r3, r6
 800ee3e:	b085      	sub	sp, #20
 800ee40:	bfb8      	it	lt
 800ee42:	3101      	addlt	r1, #1
 800ee44:	f7ff fe92 	bl	800eb6c <_Balloc>
 800ee48:	b930      	cbnz	r0, 800ee58 <__multiply+0x44>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	4b44      	ldr	r3, [pc, #272]	@ (800ef60 <__multiply+0x14c>)
 800ee4e:	4845      	ldr	r0, [pc, #276]	@ (800ef64 <__multiply+0x150>)
 800ee50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ee54:	f7fd fd52 	bl	800c8fc <__assert_func>
 800ee58:	f100 0514 	add.w	r5, r0, #20
 800ee5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ee60:	462b      	mov	r3, r5
 800ee62:	2200      	movs	r2, #0
 800ee64:	4543      	cmp	r3, r8
 800ee66:	d321      	bcc.n	800eeac <__multiply+0x98>
 800ee68:	f107 0114 	add.w	r1, r7, #20
 800ee6c:	f104 0214 	add.w	r2, r4, #20
 800ee70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ee74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ee78:	9302      	str	r3, [sp, #8]
 800ee7a:	1b13      	subs	r3, r2, r4
 800ee7c:	3b15      	subs	r3, #21
 800ee7e:	f023 0303 	bic.w	r3, r3, #3
 800ee82:	3304      	adds	r3, #4
 800ee84:	f104 0715 	add.w	r7, r4, #21
 800ee88:	42ba      	cmp	r2, r7
 800ee8a:	bf38      	it	cc
 800ee8c:	2304      	movcc	r3, #4
 800ee8e:	9301      	str	r3, [sp, #4]
 800ee90:	9b02      	ldr	r3, [sp, #8]
 800ee92:	9103      	str	r1, [sp, #12]
 800ee94:	428b      	cmp	r3, r1
 800ee96:	d80c      	bhi.n	800eeb2 <__multiply+0x9e>
 800ee98:	2e00      	cmp	r6, #0
 800ee9a:	dd03      	ble.n	800eea4 <__multiply+0x90>
 800ee9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d05b      	beq.n	800ef5c <__multiply+0x148>
 800eea4:	6106      	str	r6, [r0, #16]
 800eea6:	b005      	add	sp, #20
 800eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeac:	f843 2b04 	str.w	r2, [r3], #4
 800eeb0:	e7d8      	b.n	800ee64 <__multiply+0x50>
 800eeb2:	f8b1 a000 	ldrh.w	sl, [r1]
 800eeb6:	f1ba 0f00 	cmp.w	sl, #0
 800eeba:	d024      	beq.n	800ef06 <__multiply+0xf2>
 800eebc:	f104 0e14 	add.w	lr, r4, #20
 800eec0:	46a9      	mov	r9, r5
 800eec2:	f04f 0c00 	mov.w	ip, #0
 800eec6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eeca:	f8d9 3000 	ldr.w	r3, [r9]
 800eece:	fa1f fb87 	uxth.w	fp, r7
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	fb0a 330b 	mla	r3, sl, fp, r3
 800eed8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eedc:	f8d9 7000 	ldr.w	r7, [r9]
 800eee0:	4463      	add	r3, ip
 800eee2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eee6:	fb0a c70b 	mla	r7, sl, fp, ip
 800eeea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eef4:	4572      	cmp	r2, lr
 800eef6:	f849 3b04 	str.w	r3, [r9], #4
 800eefa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eefe:	d8e2      	bhi.n	800eec6 <__multiply+0xb2>
 800ef00:	9b01      	ldr	r3, [sp, #4]
 800ef02:	f845 c003 	str.w	ip, [r5, r3]
 800ef06:	9b03      	ldr	r3, [sp, #12]
 800ef08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ef0c:	3104      	adds	r1, #4
 800ef0e:	f1b9 0f00 	cmp.w	r9, #0
 800ef12:	d021      	beq.n	800ef58 <__multiply+0x144>
 800ef14:	682b      	ldr	r3, [r5, #0]
 800ef16:	f104 0c14 	add.w	ip, r4, #20
 800ef1a:	46ae      	mov	lr, r5
 800ef1c:	f04f 0a00 	mov.w	sl, #0
 800ef20:	f8bc b000 	ldrh.w	fp, [ip]
 800ef24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ef28:	fb09 770b 	mla	r7, r9, fp, r7
 800ef2c:	4457      	add	r7, sl
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ef34:	f84e 3b04 	str.w	r3, [lr], #4
 800ef38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef40:	f8be 3000 	ldrh.w	r3, [lr]
 800ef44:	fb09 330a 	mla	r3, r9, sl, r3
 800ef48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ef4c:	4562      	cmp	r2, ip
 800ef4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef52:	d8e5      	bhi.n	800ef20 <__multiply+0x10c>
 800ef54:	9f01      	ldr	r7, [sp, #4]
 800ef56:	51eb      	str	r3, [r5, r7]
 800ef58:	3504      	adds	r5, #4
 800ef5a:	e799      	b.n	800ee90 <__multiply+0x7c>
 800ef5c:	3e01      	subs	r6, #1
 800ef5e:	e79b      	b.n	800ee98 <__multiply+0x84>
 800ef60:	08010216 	.word	0x08010216
 800ef64:	08010287 	.word	0x08010287

0800ef68 <__pow5mult>:
 800ef68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef6c:	4615      	mov	r5, r2
 800ef6e:	f012 0203 	ands.w	r2, r2, #3
 800ef72:	4607      	mov	r7, r0
 800ef74:	460e      	mov	r6, r1
 800ef76:	d007      	beq.n	800ef88 <__pow5mult+0x20>
 800ef78:	4c25      	ldr	r4, [pc, #148]	@ (800f010 <__pow5mult+0xa8>)
 800ef7a:	3a01      	subs	r2, #1
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef82:	f7ff fe55 	bl	800ec30 <__multadd>
 800ef86:	4606      	mov	r6, r0
 800ef88:	10ad      	asrs	r5, r5, #2
 800ef8a:	d03d      	beq.n	800f008 <__pow5mult+0xa0>
 800ef8c:	69fc      	ldr	r4, [r7, #28]
 800ef8e:	b97c      	cbnz	r4, 800efb0 <__pow5mult+0x48>
 800ef90:	2010      	movs	r0, #16
 800ef92:	f7fc fea1 	bl	800bcd8 <malloc>
 800ef96:	4602      	mov	r2, r0
 800ef98:	61f8      	str	r0, [r7, #28]
 800ef9a:	b928      	cbnz	r0, 800efa8 <__pow5mult+0x40>
 800ef9c:	4b1d      	ldr	r3, [pc, #116]	@ (800f014 <__pow5mult+0xac>)
 800ef9e:	481e      	ldr	r0, [pc, #120]	@ (800f018 <__pow5mult+0xb0>)
 800efa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800efa4:	f7fd fcaa 	bl	800c8fc <__assert_func>
 800efa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800efac:	6004      	str	r4, [r0, #0]
 800efae:	60c4      	str	r4, [r0, #12]
 800efb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800efb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800efb8:	b94c      	cbnz	r4, 800efce <__pow5mult+0x66>
 800efba:	f240 2171 	movw	r1, #625	@ 0x271
 800efbe:	4638      	mov	r0, r7
 800efc0:	f7ff ff12 	bl	800ede8 <__i2b>
 800efc4:	2300      	movs	r3, #0
 800efc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800efca:	4604      	mov	r4, r0
 800efcc:	6003      	str	r3, [r0, #0]
 800efce:	f04f 0900 	mov.w	r9, #0
 800efd2:	07eb      	lsls	r3, r5, #31
 800efd4:	d50a      	bpl.n	800efec <__pow5mult+0x84>
 800efd6:	4631      	mov	r1, r6
 800efd8:	4622      	mov	r2, r4
 800efda:	4638      	mov	r0, r7
 800efdc:	f7ff ff1a 	bl	800ee14 <__multiply>
 800efe0:	4631      	mov	r1, r6
 800efe2:	4680      	mov	r8, r0
 800efe4:	4638      	mov	r0, r7
 800efe6:	f7ff fe01 	bl	800ebec <_Bfree>
 800efea:	4646      	mov	r6, r8
 800efec:	106d      	asrs	r5, r5, #1
 800efee:	d00b      	beq.n	800f008 <__pow5mult+0xa0>
 800eff0:	6820      	ldr	r0, [r4, #0]
 800eff2:	b938      	cbnz	r0, 800f004 <__pow5mult+0x9c>
 800eff4:	4622      	mov	r2, r4
 800eff6:	4621      	mov	r1, r4
 800eff8:	4638      	mov	r0, r7
 800effa:	f7ff ff0b 	bl	800ee14 <__multiply>
 800effe:	6020      	str	r0, [r4, #0]
 800f000:	f8c0 9000 	str.w	r9, [r0]
 800f004:	4604      	mov	r4, r0
 800f006:	e7e4      	b.n	800efd2 <__pow5mult+0x6a>
 800f008:	4630      	mov	r0, r6
 800f00a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f00e:	bf00      	nop
 800f010:	080102e0 	.word	0x080102e0
 800f014:	080100ae 	.word	0x080100ae
 800f018:	08010287 	.word	0x08010287

0800f01c <__lshift>:
 800f01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f020:	460c      	mov	r4, r1
 800f022:	6849      	ldr	r1, [r1, #4]
 800f024:	6923      	ldr	r3, [r4, #16]
 800f026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f02a:	68a3      	ldr	r3, [r4, #8]
 800f02c:	4607      	mov	r7, r0
 800f02e:	4691      	mov	r9, r2
 800f030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f034:	f108 0601 	add.w	r6, r8, #1
 800f038:	42b3      	cmp	r3, r6
 800f03a:	db0b      	blt.n	800f054 <__lshift+0x38>
 800f03c:	4638      	mov	r0, r7
 800f03e:	f7ff fd95 	bl	800eb6c <_Balloc>
 800f042:	4605      	mov	r5, r0
 800f044:	b948      	cbnz	r0, 800f05a <__lshift+0x3e>
 800f046:	4602      	mov	r2, r0
 800f048:	4b28      	ldr	r3, [pc, #160]	@ (800f0ec <__lshift+0xd0>)
 800f04a:	4829      	ldr	r0, [pc, #164]	@ (800f0f0 <__lshift+0xd4>)
 800f04c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f050:	f7fd fc54 	bl	800c8fc <__assert_func>
 800f054:	3101      	adds	r1, #1
 800f056:	005b      	lsls	r3, r3, #1
 800f058:	e7ee      	b.n	800f038 <__lshift+0x1c>
 800f05a:	2300      	movs	r3, #0
 800f05c:	f100 0114 	add.w	r1, r0, #20
 800f060:	f100 0210 	add.w	r2, r0, #16
 800f064:	4618      	mov	r0, r3
 800f066:	4553      	cmp	r3, sl
 800f068:	db33      	blt.n	800f0d2 <__lshift+0xb6>
 800f06a:	6920      	ldr	r0, [r4, #16]
 800f06c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f070:	f104 0314 	add.w	r3, r4, #20
 800f074:	f019 091f 	ands.w	r9, r9, #31
 800f078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f07c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f080:	d02b      	beq.n	800f0da <__lshift+0xbe>
 800f082:	f1c9 0e20 	rsb	lr, r9, #32
 800f086:	468a      	mov	sl, r1
 800f088:	2200      	movs	r2, #0
 800f08a:	6818      	ldr	r0, [r3, #0]
 800f08c:	fa00 f009 	lsl.w	r0, r0, r9
 800f090:	4310      	orrs	r0, r2
 800f092:	f84a 0b04 	str.w	r0, [sl], #4
 800f096:	f853 2b04 	ldr.w	r2, [r3], #4
 800f09a:	459c      	cmp	ip, r3
 800f09c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f0a0:	d8f3      	bhi.n	800f08a <__lshift+0x6e>
 800f0a2:	ebac 0304 	sub.w	r3, ip, r4
 800f0a6:	3b15      	subs	r3, #21
 800f0a8:	f023 0303 	bic.w	r3, r3, #3
 800f0ac:	3304      	adds	r3, #4
 800f0ae:	f104 0015 	add.w	r0, r4, #21
 800f0b2:	4584      	cmp	ip, r0
 800f0b4:	bf38      	it	cc
 800f0b6:	2304      	movcc	r3, #4
 800f0b8:	50ca      	str	r2, [r1, r3]
 800f0ba:	b10a      	cbz	r2, 800f0c0 <__lshift+0xa4>
 800f0bc:	f108 0602 	add.w	r6, r8, #2
 800f0c0:	3e01      	subs	r6, #1
 800f0c2:	4638      	mov	r0, r7
 800f0c4:	612e      	str	r6, [r5, #16]
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	f7ff fd90 	bl	800ebec <_Bfree>
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	e7c5      	b.n	800f066 <__lshift+0x4a>
 800f0da:	3904      	subs	r1, #4
 800f0dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0e4:	459c      	cmp	ip, r3
 800f0e6:	d8f9      	bhi.n	800f0dc <__lshift+0xc0>
 800f0e8:	e7ea      	b.n	800f0c0 <__lshift+0xa4>
 800f0ea:	bf00      	nop
 800f0ec:	08010216 	.word	0x08010216
 800f0f0:	08010287 	.word	0x08010287

0800f0f4 <__mcmp>:
 800f0f4:	690a      	ldr	r2, [r1, #16]
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	6900      	ldr	r0, [r0, #16]
 800f0fa:	1a80      	subs	r0, r0, r2
 800f0fc:	b530      	push	{r4, r5, lr}
 800f0fe:	d10e      	bne.n	800f11e <__mcmp+0x2a>
 800f100:	3314      	adds	r3, #20
 800f102:	3114      	adds	r1, #20
 800f104:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f108:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f10c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f110:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f114:	4295      	cmp	r5, r2
 800f116:	d003      	beq.n	800f120 <__mcmp+0x2c>
 800f118:	d205      	bcs.n	800f126 <__mcmp+0x32>
 800f11a:	f04f 30ff 	mov.w	r0, #4294967295
 800f11e:	bd30      	pop	{r4, r5, pc}
 800f120:	42a3      	cmp	r3, r4
 800f122:	d3f3      	bcc.n	800f10c <__mcmp+0x18>
 800f124:	e7fb      	b.n	800f11e <__mcmp+0x2a>
 800f126:	2001      	movs	r0, #1
 800f128:	e7f9      	b.n	800f11e <__mcmp+0x2a>
	...

0800f12c <__mdiff>:
 800f12c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f130:	4689      	mov	r9, r1
 800f132:	4606      	mov	r6, r0
 800f134:	4611      	mov	r1, r2
 800f136:	4648      	mov	r0, r9
 800f138:	4614      	mov	r4, r2
 800f13a:	f7ff ffdb 	bl	800f0f4 <__mcmp>
 800f13e:	1e05      	subs	r5, r0, #0
 800f140:	d112      	bne.n	800f168 <__mdiff+0x3c>
 800f142:	4629      	mov	r1, r5
 800f144:	4630      	mov	r0, r6
 800f146:	f7ff fd11 	bl	800eb6c <_Balloc>
 800f14a:	4602      	mov	r2, r0
 800f14c:	b928      	cbnz	r0, 800f15a <__mdiff+0x2e>
 800f14e:	4b3f      	ldr	r3, [pc, #252]	@ (800f24c <__mdiff+0x120>)
 800f150:	f240 2137 	movw	r1, #567	@ 0x237
 800f154:	483e      	ldr	r0, [pc, #248]	@ (800f250 <__mdiff+0x124>)
 800f156:	f7fd fbd1 	bl	800c8fc <__assert_func>
 800f15a:	2301      	movs	r3, #1
 800f15c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f160:	4610      	mov	r0, r2
 800f162:	b003      	add	sp, #12
 800f164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f168:	bfbc      	itt	lt
 800f16a:	464b      	movlt	r3, r9
 800f16c:	46a1      	movlt	r9, r4
 800f16e:	4630      	mov	r0, r6
 800f170:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f174:	bfba      	itte	lt
 800f176:	461c      	movlt	r4, r3
 800f178:	2501      	movlt	r5, #1
 800f17a:	2500      	movge	r5, #0
 800f17c:	f7ff fcf6 	bl	800eb6c <_Balloc>
 800f180:	4602      	mov	r2, r0
 800f182:	b918      	cbnz	r0, 800f18c <__mdiff+0x60>
 800f184:	4b31      	ldr	r3, [pc, #196]	@ (800f24c <__mdiff+0x120>)
 800f186:	f240 2145 	movw	r1, #581	@ 0x245
 800f18a:	e7e3      	b.n	800f154 <__mdiff+0x28>
 800f18c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f190:	6926      	ldr	r6, [r4, #16]
 800f192:	60c5      	str	r5, [r0, #12]
 800f194:	f109 0310 	add.w	r3, r9, #16
 800f198:	f109 0514 	add.w	r5, r9, #20
 800f19c:	f104 0e14 	add.w	lr, r4, #20
 800f1a0:	f100 0b14 	add.w	fp, r0, #20
 800f1a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f1a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f1ac:	9301      	str	r3, [sp, #4]
 800f1ae:	46d9      	mov	r9, fp
 800f1b0:	f04f 0c00 	mov.w	ip, #0
 800f1b4:	9b01      	ldr	r3, [sp, #4]
 800f1b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f1ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f1be:	9301      	str	r3, [sp, #4]
 800f1c0:	fa1f f38a 	uxth.w	r3, sl
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	b283      	uxth	r3, r0
 800f1c8:	1acb      	subs	r3, r1, r3
 800f1ca:	0c00      	lsrs	r0, r0, #16
 800f1cc:	4463      	add	r3, ip
 800f1ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f1d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f1dc:	4576      	cmp	r6, lr
 800f1de:	f849 3b04 	str.w	r3, [r9], #4
 800f1e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f1e6:	d8e5      	bhi.n	800f1b4 <__mdiff+0x88>
 800f1e8:	1b33      	subs	r3, r6, r4
 800f1ea:	3b15      	subs	r3, #21
 800f1ec:	f023 0303 	bic.w	r3, r3, #3
 800f1f0:	3415      	adds	r4, #21
 800f1f2:	3304      	adds	r3, #4
 800f1f4:	42a6      	cmp	r6, r4
 800f1f6:	bf38      	it	cc
 800f1f8:	2304      	movcc	r3, #4
 800f1fa:	441d      	add	r5, r3
 800f1fc:	445b      	add	r3, fp
 800f1fe:	461e      	mov	r6, r3
 800f200:	462c      	mov	r4, r5
 800f202:	4544      	cmp	r4, r8
 800f204:	d30e      	bcc.n	800f224 <__mdiff+0xf8>
 800f206:	f108 0103 	add.w	r1, r8, #3
 800f20a:	1b49      	subs	r1, r1, r5
 800f20c:	f021 0103 	bic.w	r1, r1, #3
 800f210:	3d03      	subs	r5, #3
 800f212:	45a8      	cmp	r8, r5
 800f214:	bf38      	it	cc
 800f216:	2100      	movcc	r1, #0
 800f218:	440b      	add	r3, r1
 800f21a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f21e:	b191      	cbz	r1, 800f246 <__mdiff+0x11a>
 800f220:	6117      	str	r7, [r2, #16]
 800f222:	e79d      	b.n	800f160 <__mdiff+0x34>
 800f224:	f854 1b04 	ldr.w	r1, [r4], #4
 800f228:	46e6      	mov	lr, ip
 800f22a:	0c08      	lsrs	r0, r1, #16
 800f22c:	fa1c fc81 	uxtah	ip, ip, r1
 800f230:	4471      	add	r1, lr
 800f232:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f236:	b289      	uxth	r1, r1
 800f238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f23c:	f846 1b04 	str.w	r1, [r6], #4
 800f240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f244:	e7dd      	b.n	800f202 <__mdiff+0xd6>
 800f246:	3f01      	subs	r7, #1
 800f248:	e7e7      	b.n	800f21a <__mdiff+0xee>
 800f24a:	bf00      	nop
 800f24c:	08010216 	.word	0x08010216
 800f250:	08010287 	.word	0x08010287

0800f254 <__ulp>:
 800f254:	b082      	sub	sp, #8
 800f256:	ed8d 0b00 	vstr	d0, [sp]
 800f25a:	9a01      	ldr	r2, [sp, #4]
 800f25c:	4b0f      	ldr	r3, [pc, #60]	@ (800f29c <__ulp+0x48>)
 800f25e:	4013      	ands	r3, r2
 800f260:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f264:	2b00      	cmp	r3, #0
 800f266:	dc08      	bgt.n	800f27a <__ulp+0x26>
 800f268:	425b      	negs	r3, r3
 800f26a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f26e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f272:	da04      	bge.n	800f27e <__ulp+0x2a>
 800f274:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f278:	4113      	asrs	r3, r2
 800f27a:	2200      	movs	r2, #0
 800f27c:	e008      	b.n	800f290 <__ulp+0x3c>
 800f27e:	f1a2 0314 	sub.w	r3, r2, #20
 800f282:	2b1e      	cmp	r3, #30
 800f284:	bfda      	itte	le
 800f286:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f28a:	40da      	lsrle	r2, r3
 800f28c:	2201      	movgt	r2, #1
 800f28e:	2300      	movs	r3, #0
 800f290:	4619      	mov	r1, r3
 800f292:	4610      	mov	r0, r2
 800f294:	ec41 0b10 	vmov	d0, r0, r1
 800f298:	b002      	add	sp, #8
 800f29a:	4770      	bx	lr
 800f29c:	7ff00000 	.word	0x7ff00000

0800f2a0 <__b2d>:
 800f2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a4:	6906      	ldr	r6, [r0, #16]
 800f2a6:	f100 0814 	add.w	r8, r0, #20
 800f2aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f2ae:	1f37      	subs	r7, r6, #4
 800f2b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f2b4:	4610      	mov	r0, r2
 800f2b6:	f7ff fd4b 	bl	800ed50 <__hi0bits>
 800f2ba:	f1c0 0320 	rsb	r3, r0, #32
 800f2be:	280a      	cmp	r0, #10
 800f2c0:	600b      	str	r3, [r1, #0]
 800f2c2:	491b      	ldr	r1, [pc, #108]	@ (800f330 <__b2d+0x90>)
 800f2c4:	dc15      	bgt.n	800f2f2 <__b2d+0x52>
 800f2c6:	f1c0 0c0b 	rsb	ip, r0, #11
 800f2ca:	fa22 f30c 	lsr.w	r3, r2, ip
 800f2ce:	45b8      	cmp	r8, r7
 800f2d0:	ea43 0501 	orr.w	r5, r3, r1
 800f2d4:	bf34      	ite	cc
 800f2d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f2da:	2300      	movcs	r3, #0
 800f2dc:	3015      	adds	r0, #21
 800f2de:	fa02 f000 	lsl.w	r0, r2, r0
 800f2e2:	fa23 f30c 	lsr.w	r3, r3, ip
 800f2e6:	4303      	orrs	r3, r0
 800f2e8:	461c      	mov	r4, r3
 800f2ea:	ec45 4b10 	vmov	d0, r4, r5
 800f2ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f2:	45b8      	cmp	r8, r7
 800f2f4:	bf3a      	itte	cc
 800f2f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f2fa:	f1a6 0708 	subcc.w	r7, r6, #8
 800f2fe:	2300      	movcs	r3, #0
 800f300:	380b      	subs	r0, #11
 800f302:	d012      	beq.n	800f32a <__b2d+0x8a>
 800f304:	f1c0 0120 	rsb	r1, r0, #32
 800f308:	fa23 f401 	lsr.w	r4, r3, r1
 800f30c:	4082      	lsls	r2, r0
 800f30e:	4322      	orrs	r2, r4
 800f310:	4547      	cmp	r7, r8
 800f312:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f316:	bf8c      	ite	hi
 800f318:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f31c:	2200      	movls	r2, #0
 800f31e:	4083      	lsls	r3, r0
 800f320:	40ca      	lsrs	r2, r1
 800f322:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f326:	4313      	orrs	r3, r2
 800f328:	e7de      	b.n	800f2e8 <__b2d+0x48>
 800f32a:	ea42 0501 	orr.w	r5, r2, r1
 800f32e:	e7db      	b.n	800f2e8 <__b2d+0x48>
 800f330:	3ff00000 	.word	0x3ff00000

0800f334 <__d2b>:
 800f334:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f338:	460f      	mov	r7, r1
 800f33a:	2101      	movs	r1, #1
 800f33c:	ec59 8b10 	vmov	r8, r9, d0
 800f340:	4616      	mov	r6, r2
 800f342:	f7ff fc13 	bl	800eb6c <_Balloc>
 800f346:	4604      	mov	r4, r0
 800f348:	b930      	cbnz	r0, 800f358 <__d2b+0x24>
 800f34a:	4602      	mov	r2, r0
 800f34c:	4b23      	ldr	r3, [pc, #140]	@ (800f3dc <__d2b+0xa8>)
 800f34e:	4824      	ldr	r0, [pc, #144]	@ (800f3e0 <__d2b+0xac>)
 800f350:	f240 310f 	movw	r1, #783	@ 0x30f
 800f354:	f7fd fad2 	bl	800c8fc <__assert_func>
 800f358:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f35c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f360:	b10d      	cbz	r5, 800f366 <__d2b+0x32>
 800f362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f366:	9301      	str	r3, [sp, #4]
 800f368:	f1b8 0300 	subs.w	r3, r8, #0
 800f36c:	d023      	beq.n	800f3b6 <__d2b+0x82>
 800f36e:	4668      	mov	r0, sp
 800f370:	9300      	str	r3, [sp, #0]
 800f372:	f7ff fd0c 	bl	800ed8e <__lo0bits>
 800f376:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f37a:	b1d0      	cbz	r0, 800f3b2 <__d2b+0x7e>
 800f37c:	f1c0 0320 	rsb	r3, r0, #32
 800f380:	fa02 f303 	lsl.w	r3, r2, r3
 800f384:	430b      	orrs	r3, r1
 800f386:	40c2      	lsrs	r2, r0
 800f388:	6163      	str	r3, [r4, #20]
 800f38a:	9201      	str	r2, [sp, #4]
 800f38c:	9b01      	ldr	r3, [sp, #4]
 800f38e:	61a3      	str	r3, [r4, #24]
 800f390:	2b00      	cmp	r3, #0
 800f392:	bf0c      	ite	eq
 800f394:	2201      	moveq	r2, #1
 800f396:	2202      	movne	r2, #2
 800f398:	6122      	str	r2, [r4, #16]
 800f39a:	b1a5      	cbz	r5, 800f3c6 <__d2b+0x92>
 800f39c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f3a0:	4405      	add	r5, r0
 800f3a2:	603d      	str	r5, [r7, #0]
 800f3a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f3a8:	6030      	str	r0, [r6, #0]
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	b003      	add	sp, #12
 800f3ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3b2:	6161      	str	r1, [r4, #20]
 800f3b4:	e7ea      	b.n	800f38c <__d2b+0x58>
 800f3b6:	a801      	add	r0, sp, #4
 800f3b8:	f7ff fce9 	bl	800ed8e <__lo0bits>
 800f3bc:	9b01      	ldr	r3, [sp, #4]
 800f3be:	6163      	str	r3, [r4, #20]
 800f3c0:	3020      	adds	r0, #32
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	e7e8      	b.n	800f398 <__d2b+0x64>
 800f3c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f3ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f3ce:	6038      	str	r0, [r7, #0]
 800f3d0:	6918      	ldr	r0, [r3, #16]
 800f3d2:	f7ff fcbd 	bl	800ed50 <__hi0bits>
 800f3d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f3da:	e7e5      	b.n	800f3a8 <__d2b+0x74>
 800f3dc:	08010216 	.word	0x08010216
 800f3e0:	08010287 	.word	0x08010287

0800f3e4 <__ratio>:
 800f3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e8:	b085      	sub	sp, #20
 800f3ea:	e9cd 1000 	strd	r1, r0, [sp]
 800f3ee:	a902      	add	r1, sp, #8
 800f3f0:	f7ff ff56 	bl	800f2a0 <__b2d>
 800f3f4:	9800      	ldr	r0, [sp, #0]
 800f3f6:	a903      	add	r1, sp, #12
 800f3f8:	ec55 4b10 	vmov	r4, r5, d0
 800f3fc:	f7ff ff50 	bl	800f2a0 <__b2d>
 800f400:	9b01      	ldr	r3, [sp, #4]
 800f402:	6919      	ldr	r1, [r3, #16]
 800f404:	9b00      	ldr	r3, [sp, #0]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	1ac9      	subs	r1, r1, r3
 800f40a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f40e:	1a9b      	subs	r3, r3, r2
 800f410:	ec5b ab10 	vmov	sl, fp, d0
 800f414:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f418:	2b00      	cmp	r3, #0
 800f41a:	bfce      	itee	gt
 800f41c:	462a      	movgt	r2, r5
 800f41e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f422:	465a      	movle	r2, fp
 800f424:	462f      	mov	r7, r5
 800f426:	46d9      	mov	r9, fp
 800f428:	bfcc      	ite	gt
 800f42a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f42e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f432:	464b      	mov	r3, r9
 800f434:	4652      	mov	r2, sl
 800f436:	4620      	mov	r0, r4
 800f438:	4639      	mov	r1, r7
 800f43a:	f7f1 fa17 	bl	800086c <__aeabi_ddiv>
 800f43e:	ec41 0b10 	vmov	d0, r0, r1
 800f442:	b005      	add	sp, #20
 800f444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f448 <__copybits>:
 800f448:	3901      	subs	r1, #1
 800f44a:	b570      	push	{r4, r5, r6, lr}
 800f44c:	1149      	asrs	r1, r1, #5
 800f44e:	6914      	ldr	r4, [r2, #16]
 800f450:	3101      	adds	r1, #1
 800f452:	f102 0314 	add.w	r3, r2, #20
 800f456:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f45a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f45e:	1f05      	subs	r5, r0, #4
 800f460:	42a3      	cmp	r3, r4
 800f462:	d30c      	bcc.n	800f47e <__copybits+0x36>
 800f464:	1aa3      	subs	r3, r4, r2
 800f466:	3b11      	subs	r3, #17
 800f468:	f023 0303 	bic.w	r3, r3, #3
 800f46c:	3211      	adds	r2, #17
 800f46e:	42a2      	cmp	r2, r4
 800f470:	bf88      	it	hi
 800f472:	2300      	movhi	r3, #0
 800f474:	4418      	add	r0, r3
 800f476:	2300      	movs	r3, #0
 800f478:	4288      	cmp	r0, r1
 800f47a:	d305      	bcc.n	800f488 <__copybits+0x40>
 800f47c:	bd70      	pop	{r4, r5, r6, pc}
 800f47e:	f853 6b04 	ldr.w	r6, [r3], #4
 800f482:	f845 6f04 	str.w	r6, [r5, #4]!
 800f486:	e7eb      	b.n	800f460 <__copybits+0x18>
 800f488:	f840 3b04 	str.w	r3, [r0], #4
 800f48c:	e7f4      	b.n	800f478 <__copybits+0x30>

0800f48e <__any_on>:
 800f48e:	f100 0214 	add.w	r2, r0, #20
 800f492:	6900      	ldr	r0, [r0, #16]
 800f494:	114b      	asrs	r3, r1, #5
 800f496:	4298      	cmp	r0, r3
 800f498:	b510      	push	{r4, lr}
 800f49a:	db11      	blt.n	800f4c0 <__any_on+0x32>
 800f49c:	dd0a      	ble.n	800f4b4 <__any_on+0x26>
 800f49e:	f011 011f 	ands.w	r1, r1, #31
 800f4a2:	d007      	beq.n	800f4b4 <__any_on+0x26>
 800f4a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f4a8:	fa24 f001 	lsr.w	r0, r4, r1
 800f4ac:	fa00 f101 	lsl.w	r1, r0, r1
 800f4b0:	428c      	cmp	r4, r1
 800f4b2:	d10b      	bne.n	800f4cc <__any_on+0x3e>
 800f4b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d803      	bhi.n	800f4c4 <__any_on+0x36>
 800f4bc:	2000      	movs	r0, #0
 800f4be:	bd10      	pop	{r4, pc}
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	e7f7      	b.n	800f4b4 <__any_on+0x26>
 800f4c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f4c8:	2900      	cmp	r1, #0
 800f4ca:	d0f5      	beq.n	800f4b8 <__any_on+0x2a>
 800f4cc:	2001      	movs	r0, #1
 800f4ce:	e7f6      	b.n	800f4be <__any_on+0x30>

0800f4d0 <_realloc_r>:
 800f4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d4:	4680      	mov	r8, r0
 800f4d6:	4615      	mov	r5, r2
 800f4d8:	460c      	mov	r4, r1
 800f4da:	b921      	cbnz	r1, 800f4e6 <_realloc_r+0x16>
 800f4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	f7fc bc2b 	b.w	800bd3c <_malloc_r>
 800f4e6:	b92a      	cbnz	r2, 800f4f4 <_realloc_r+0x24>
 800f4e8:	f7fd fa26 	bl	800c938 <_free_r>
 800f4ec:	2400      	movs	r4, #0
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f4:	f000 fa54 	bl	800f9a0 <_malloc_usable_size_r>
 800f4f8:	4285      	cmp	r5, r0
 800f4fa:	4606      	mov	r6, r0
 800f4fc:	d802      	bhi.n	800f504 <_realloc_r+0x34>
 800f4fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f502:	d8f4      	bhi.n	800f4ee <_realloc_r+0x1e>
 800f504:	4629      	mov	r1, r5
 800f506:	4640      	mov	r0, r8
 800f508:	f7fc fc18 	bl	800bd3c <_malloc_r>
 800f50c:	4607      	mov	r7, r0
 800f50e:	2800      	cmp	r0, #0
 800f510:	d0ec      	beq.n	800f4ec <_realloc_r+0x1c>
 800f512:	42b5      	cmp	r5, r6
 800f514:	462a      	mov	r2, r5
 800f516:	4621      	mov	r1, r4
 800f518:	bf28      	it	cs
 800f51a:	4632      	movcs	r2, r6
 800f51c:	f7fe ffbb 	bl	800e496 <memcpy>
 800f520:	4621      	mov	r1, r4
 800f522:	4640      	mov	r0, r8
 800f524:	f7fd fa08 	bl	800c938 <_free_r>
 800f528:	463c      	mov	r4, r7
 800f52a:	e7e0      	b.n	800f4ee <_realloc_r+0x1e>

0800f52c <__ascii_wctomb>:
 800f52c:	4603      	mov	r3, r0
 800f52e:	4608      	mov	r0, r1
 800f530:	b141      	cbz	r1, 800f544 <__ascii_wctomb+0x18>
 800f532:	2aff      	cmp	r2, #255	@ 0xff
 800f534:	d904      	bls.n	800f540 <__ascii_wctomb+0x14>
 800f536:	228a      	movs	r2, #138	@ 0x8a
 800f538:	601a      	str	r2, [r3, #0]
 800f53a:	f04f 30ff 	mov.w	r0, #4294967295
 800f53e:	4770      	bx	lr
 800f540:	700a      	strb	r2, [r1, #0]
 800f542:	2001      	movs	r0, #1
 800f544:	4770      	bx	lr

0800f546 <__sfputc_r>:
 800f546:	6893      	ldr	r3, [r2, #8]
 800f548:	3b01      	subs	r3, #1
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	b410      	push	{r4}
 800f54e:	6093      	str	r3, [r2, #8]
 800f550:	da08      	bge.n	800f564 <__sfputc_r+0x1e>
 800f552:	6994      	ldr	r4, [r2, #24]
 800f554:	42a3      	cmp	r3, r4
 800f556:	db01      	blt.n	800f55c <__sfputc_r+0x16>
 800f558:	290a      	cmp	r1, #10
 800f55a:	d103      	bne.n	800f564 <__sfputc_r+0x1e>
 800f55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f560:	f000 b932 	b.w	800f7c8 <__swbuf_r>
 800f564:	6813      	ldr	r3, [r2, #0]
 800f566:	1c58      	adds	r0, r3, #1
 800f568:	6010      	str	r0, [r2, #0]
 800f56a:	7019      	strb	r1, [r3, #0]
 800f56c:	4608      	mov	r0, r1
 800f56e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f572:	4770      	bx	lr

0800f574 <__sfputs_r>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	4606      	mov	r6, r0
 800f578:	460f      	mov	r7, r1
 800f57a:	4614      	mov	r4, r2
 800f57c:	18d5      	adds	r5, r2, r3
 800f57e:	42ac      	cmp	r4, r5
 800f580:	d101      	bne.n	800f586 <__sfputs_r+0x12>
 800f582:	2000      	movs	r0, #0
 800f584:	e007      	b.n	800f596 <__sfputs_r+0x22>
 800f586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f58a:	463a      	mov	r2, r7
 800f58c:	4630      	mov	r0, r6
 800f58e:	f7ff ffda 	bl	800f546 <__sfputc_r>
 800f592:	1c43      	adds	r3, r0, #1
 800f594:	d1f3      	bne.n	800f57e <__sfputs_r+0xa>
 800f596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f598 <_vfiprintf_r>:
 800f598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f59c:	460d      	mov	r5, r1
 800f59e:	b09d      	sub	sp, #116	@ 0x74
 800f5a0:	4614      	mov	r4, r2
 800f5a2:	4698      	mov	r8, r3
 800f5a4:	4606      	mov	r6, r0
 800f5a6:	b118      	cbz	r0, 800f5b0 <_vfiprintf_r+0x18>
 800f5a8:	6a03      	ldr	r3, [r0, #32]
 800f5aa:	b90b      	cbnz	r3, 800f5b0 <_vfiprintf_r+0x18>
 800f5ac:	f7fc fff2 	bl	800c594 <__sinit>
 800f5b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5b2:	07d9      	lsls	r1, r3, #31
 800f5b4:	d405      	bmi.n	800f5c2 <_vfiprintf_r+0x2a>
 800f5b6:	89ab      	ldrh	r3, [r5, #12]
 800f5b8:	059a      	lsls	r2, r3, #22
 800f5ba:	d402      	bmi.n	800f5c2 <_vfiprintf_r+0x2a>
 800f5bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5be:	f7fd f994 	bl	800c8ea <__retarget_lock_acquire_recursive>
 800f5c2:	89ab      	ldrh	r3, [r5, #12]
 800f5c4:	071b      	lsls	r3, r3, #28
 800f5c6:	d501      	bpl.n	800f5cc <_vfiprintf_r+0x34>
 800f5c8:	692b      	ldr	r3, [r5, #16]
 800f5ca:	b99b      	cbnz	r3, 800f5f4 <_vfiprintf_r+0x5c>
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	f000 f938 	bl	800f844 <__swsetup_r>
 800f5d4:	b170      	cbz	r0, 800f5f4 <_vfiprintf_r+0x5c>
 800f5d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5d8:	07dc      	lsls	r4, r3, #31
 800f5da:	d504      	bpl.n	800f5e6 <_vfiprintf_r+0x4e>
 800f5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5e0:	b01d      	add	sp, #116	@ 0x74
 800f5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e6:	89ab      	ldrh	r3, [r5, #12]
 800f5e8:	0598      	lsls	r0, r3, #22
 800f5ea:	d4f7      	bmi.n	800f5dc <_vfiprintf_r+0x44>
 800f5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5ee:	f7fd f97d 	bl	800c8ec <__retarget_lock_release_recursive>
 800f5f2:	e7f3      	b.n	800f5dc <_vfiprintf_r+0x44>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5f8:	2320      	movs	r3, #32
 800f5fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800f602:	2330      	movs	r3, #48	@ 0x30
 800f604:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f7b4 <_vfiprintf_r+0x21c>
 800f608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f60c:	f04f 0901 	mov.w	r9, #1
 800f610:	4623      	mov	r3, r4
 800f612:	469a      	mov	sl, r3
 800f614:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f618:	b10a      	cbz	r2, 800f61e <_vfiprintf_r+0x86>
 800f61a:	2a25      	cmp	r2, #37	@ 0x25
 800f61c:	d1f9      	bne.n	800f612 <_vfiprintf_r+0x7a>
 800f61e:	ebba 0b04 	subs.w	fp, sl, r4
 800f622:	d00b      	beq.n	800f63c <_vfiprintf_r+0xa4>
 800f624:	465b      	mov	r3, fp
 800f626:	4622      	mov	r2, r4
 800f628:	4629      	mov	r1, r5
 800f62a:	4630      	mov	r0, r6
 800f62c:	f7ff ffa2 	bl	800f574 <__sfputs_r>
 800f630:	3001      	adds	r0, #1
 800f632:	f000 80a7 	beq.w	800f784 <_vfiprintf_r+0x1ec>
 800f636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f638:	445a      	add	r2, fp
 800f63a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f63c:	f89a 3000 	ldrb.w	r3, [sl]
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 809f 	beq.w	800f784 <_vfiprintf_r+0x1ec>
 800f646:	2300      	movs	r3, #0
 800f648:	f04f 32ff 	mov.w	r2, #4294967295
 800f64c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f650:	f10a 0a01 	add.w	sl, sl, #1
 800f654:	9304      	str	r3, [sp, #16]
 800f656:	9307      	str	r3, [sp, #28]
 800f658:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f65c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f65e:	4654      	mov	r4, sl
 800f660:	2205      	movs	r2, #5
 800f662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f666:	4853      	ldr	r0, [pc, #332]	@ (800f7b4 <_vfiprintf_r+0x21c>)
 800f668:	f7f0 fdca 	bl	8000200 <memchr>
 800f66c:	9a04      	ldr	r2, [sp, #16]
 800f66e:	b9d8      	cbnz	r0, 800f6a8 <_vfiprintf_r+0x110>
 800f670:	06d1      	lsls	r1, r2, #27
 800f672:	bf44      	itt	mi
 800f674:	2320      	movmi	r3, #32
 800f676:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f67a:	0713      	lsls	r3, r2, #28
 800f67c:	bf44      	itt	mi
 800f67e:	232b      	movmi	r3, #43	@ 0x2b
 800f680:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f684:	f89a 3000 	ldrb.w	r3, [sl]
 800f688:	2b2a      	cmp	r3, #42	@ 0x2a
 800f68a:	d015      	beq.n	800f6b8 <_vfiprintf_r+0x120>
 800f68c:	9a07      	ldr	r2, [sp, #28]
 800f68e:	4654      	mov	r4, sl
 800f690:	2000      	movs	r0, #0
 800f692:	f04f 0c0a 	mov.w	ip, #10
 800f696:	4621      	mov	r1, r4
 800f698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f69c:	3b30      	subs	r3, #48	@ 0x30
 800f69e:	2b09      	cmp	r3, #9
 800f6a0:	d94b      	bls.n	800f73a <_vfiprintf_r+0x1a2>
 800f6a2:	b1b0      	cbz	r0, 800f6d2 <_vfiprintf_r+0x13a>
 800f6a4:	9207      	str	r2, [sp, #28]
 800f6a6:	e014      	b.n	800f6d2 <_vfiprintf_r+0x13a>
 800f6a8:	eba0 0308 	sub.w	r3, r0, r8
 800f6ac:	fa09 f303 	lsl.w	r3, r9, r3
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	9304      	str	r3, [sp, #16]
 800f6b4:	46a2      	mov	sl, r4
 800f6b6:	e7d2      	b.n	800f65e <_vfiprintf_r+0xc6>
 800f6b8:	9b03      	ldr	r3, [sp, #12]
 800f6ba:	1d19      	adds	r1, r3, #4
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	9103      	str	r1, [sp, #12]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	bfbb      	ittet	lt
 800f6c4:	425b      	neglt	r3, r3
 800f6c6:	f042 0202 	orrlt.w	r2, r2, #2
 800f6ca:	9307      	strge	r3, [sp, #28]
 800f6cc:	9307      	strlt	r3, [sp, #28]
 800f6ce:	bfb8      	it	lt
 800f6d0:	9204      	strlt	r2, [sp, #16]
 800f6d2:	7823      	ldrb	r3, [r4, #0]
 800f6d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6d6:	d10a      	bne.n	800f6ee <_vfiprintf_r+0x156>
 800f6d8:	7863      	ldrb	r3, [r4, #1]
 800f6da:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6dc:	d132      	bne.n	800f744 <_vfiprintf_r+0x1ac>
 800f6de:	9b03      	ldr	r3, [sp, #12]
 800f6e0:	1d1a      	adds	r2, r3, #4
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	9203      	str	r2, [sp, #12]
 800f6e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f6ea:	3402      	adds	r4, #2
 800f6ec:	9305      	str	r3, [sp, #20]
 800f6ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f7c4 <_vfiprintf_r+0x22c>
 800f6f2:	7821      	ldrb	r1, [r4, #0]
 800f6f4:	2203      	movs	r2, #3
 800f6f6:	4650      	mov	r0, sl
 800f6f8:	f7f0 fd82 	bl	8000200 <memchr>
 800f6fc:	b138      	cbz	r0, 800f70e <_vfiprintf_r+0x176>
 800f6fe:	9b04      	ldr	r3, [sp, #16]
 800f700:	eba0 000a 	sub.w	r0, r0, sl
 800f704:	2240      	movs	r2, #64	@ 0x40
 800f706:	4082      	lsls	r2, r0
 800f708:	4313      	orrs	r3, r2
 800f70a:	3401      	adds	r4, #1
 800f70c:	9304      	str	r3, [sp, #16]
 800f70e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f712:	4829      	ldr	r0, [pc, #164]	@ (800f7b8 <_vfiprintf_r+0x220>)
 800f714:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f718:	2206      	movs	r2, #6
 800f71a:	f7f0 fd71 	bl	8000200 <memchr>
 800f71e:	2800      	cmp	r0, #0
 800f720:	d03f      	beq.n	800f7a2 <_vfiprintf_r+0x20a>
 800f722:	4b26      	ldr	r3, [pc, #152]	@ (800f7bc <_vfiprintf_r+0x224>)
 800f724:	bb1b      	cbnz	r3, 800f76e <_vfiprintf_r+0x1d6>
 800f726:	9b03      	ldr	r3, [sp, #12]
 800f728:	3307      	adds	r3, #7
 800f72a:	f023 0307 	bic.w	r3, r3, #7
 800f72e:	3308      	adds	r3, #8
 800f730:	9303      	str	r3, [sp, #12]
 800f732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f734:	443b      	add	r3, r7
 800f736:	9309      	str	r3, [sp, #36]	@ 0x24
 800f738:	e76a      	b.n	800f610 <_vfiprintf_r+0x78>
 800f73a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f73e:	460c      	mov	r4, r1
 800f740:	2001      	movs	r0, #1
 800f742:	e7a8      	b.n	800f696 <_vfiprintf_r+0xfe>
 800f744:	2300      	movs	r3, #0
 800f746:	3401      	adds	r4, #1
 800f748:	9305      	str	r3, [sp, #20]
 800f74a:	4619      	mov	r1, r3
 800f74c:	f04f 0c0a 	mov.w	ip, #10
 800f750:	4620      	mov	r0, r4
 800f752:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f756:	3a30      	subs	r2, #48	@ 0x30
 800f758:	2a09      	cmp	r2, #9
 800f75a:	d903      	bls.n	800f764 <_vfiprintf_r+0x1cc>
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d0c6      	beq.n	800f6ee <_vfiprintf_r+0x156>
 800f760:	9105      	str	r1, [sp, #20]
 800f762:	e7c4      	b.n	800f6ee <_vfiprintf_r+0x156>
 800f764:	fb0c 2101 	mla	r1, ip, r1, r2
 800f768:	4604      	mov	r4, r0
 800f76a:	2301      	movs	r3, #1
 800f76c:	e7f0      	b.n	800f750 <_vfiprintf_r+0x1b8>
 800f76e:	ab03      	add	r3, sp, #12
 800f770:	9300      	str	r3, [sp, #0]
 800f772:	462a      	mov	r2, r5
 800f774:	4b12      	ldr	r3, [pc, #72]	@ (800f7c0 <_vfiprintf_r+0x228>)
 800f776:	a904      	add	r1, sp, #16
 800f778:	4630      	mov	r0, r6
 800f77a:	f3af 8000 	nop.w
 800f77e:	4607      	mov	r7, r0
 800f780:	1c78      	adds	r0, r7, #1
 800f782:	d1d6      	bne.n	800f732 <_vfiprintf_r+0x19a>
 800f784:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f786:	07d9      	lsls	r1, r3, #31
 800f788:	d405      	bmi.n	800f796 <_vfiprintf_r+0x1fe>
 800f78a:	89ab      	ldrh	r3, [r5, #12]
 800f78c:	059a      	lsls	r2, r3, #22
 800f78e:	d402      	bmi.n	800f796 <_vfiprintf_r+0x1fe>
 800f790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f792:	f7fd f8ab 	bl	800c8ec <__retarget_lock_release_recursive>
 800f796:	89ab      	ldrh	r3, [r5, #12]
 800f798:	065b      	lsls	r3, r3, #25
 800f79a:	f53f af1f 	bmi.w	800f5dc <_vfiprintf_r+0x44>
 800f79e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7a0:	e71e      	b.n	800f5e0 <_vfiprintf_r+0x48>
 800f7a2:	ab03      	add	r3, sp, #12
 800f7a4:	9300      	str	r3, [sp, #0]
 800f7a6:	462a      	mov	r2, r5
 800f7a8:	4b05      	ldr	r3, [pc, #20]	@ (800f7c0 <_vfiprintf_r+0x228>)
 800f7aa:	a904      	add	r1, sp, #16
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f7fe faa7 	bl	800dd00 <_printf_i>
 800f7b2:	e7e4      	b.n	800f77e <_vfiprintf_r+0x1e6>
 800f7b4:	080101c0 	.word	0x080101c0
 800f7b8:	080101ca 	.word	0x080101ca
 800f7bc:	00000000 	.word	0x00000000
 800f7c0:	0800f575 	.word	0x0800f575
 800f7c4:	080101c6 	.word	0x080101c6

0800f7c8 <__swbuf_r>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	460e      	mov	r6, r1
 800f7cc:	4614      	mov	r4, r2
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	b118      	cbz	r0, 800f7da <__swbuf_r+0x12>
 800f7d2:	6a03      	ldr	r3, [r0, #32]
 800f7d4:	b90b      	cbnz	r3, 800f7da <__swbuf_r+0x12>
 800f7d6:	f7fc fedd 	bl	800c594 <__sinit>
 800f7da:	69a3      	ldr	r3, [r4, #24]
 800f7dc:	60a3      	str	r3, [r4, #8]
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	071a      	lsls	r2, r3, #28
 800f7e2:	d501      	bpl.n	800f7e8 <__swbuf_r+0x20>
 800f7e4:	6923      	ldr	r3, [r4, #16]
 800f7e6:	b943      	cbnz	r3, 800f7fa <__swbuf_r+0x32>
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	f000 f82a 	bl	800f844 <__swsetup_r>
 800f7f0:	b118      	cbz	r0, 800f7fa <__swbuf_r+0x32>
 800f7f2:	f04f 37ff 	mov.w	r7, #4294967295
 800f7f6:	4638      	mov	r0, r7
 800f7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	6922      	ldr	r2, [r4, #16]
 800f7fe:	1a98      	subs	r0, r3, r2
 800f800:	6963      	ldr	r3, [r4, #20]
 800f802:	b2f6      	uxtb	r6, r6
 800f804:	4283      	cmp	r3, r0
 800f806:	4637      	mov	r7, r6
 800f808:	dc05      	bgt.n	800f816 <__swbuf_r+0x4e>
 800f80a:	4621      	mov	r1, r4
 800f80c:	4628      	mov	r0, r5
 800f80e:	f7fe fd69 	bl	800e2e4 <_fflush_r>
 800f812:	2800      	cmp	r0, #0
 800f814:	d1ed      	bne.n	800f7f2 <__swbuf_r+0x2a>
 800f816:	68a3      	ldr	r3, [r4, #8]
 800f818:	3b01      	subs	r3, #1
 800f81a:	60a3      	str	r3, [r4, #8]
 800f81c:	6823      	ldr	r3, [r4, #0]
 800f81e:	1c5a      	adds	r2, r3, #1
 800f820:	6022      	str	r2, [r4, #0]
 800f822:	701e      	strb	r6, [r3, #0]
 800f824:	6962      	ldr	r2, [r4, #20]
 800f826:	1c43      	adds	r3, r0, #1
 800f828:	429a      	cmp	r2, r3
 800f82a:	d004      	beq.n	800f836 <__swbuf_r+0x6e>
 800f82c:	89a3      	ldrh	r3, [r4, #12]
 800f82e:	07db      	lsls	r3, r3, #31
 800f830:	d5e1      	bpl.n	800f7f6 <__swbuf_r+0x2e>
 800f832:	2e0a      	cmp	r6, #10
 800f834:	d1df      	bne.n	800f7f6 <__swbuf_r+0x2e>
 800f836:	4621      	mov	r1, r4
 800f838:	4628      	mov	r0, r5
 800f83a:	f7fe fd53 	bl	800e2e4 <_fflush_r>
 800f83e:	2800      	cmp	r0, #0
 800f840:	d0d9      	beq.n	800f7f6 <__swbuf_r+0x2e>
 800f842:	e7d6      	b.n	800f7f2 <__swbuf_r+0x2a>

0800f844 <__swsetup_r>:
 800f844:	b538      	push	{r3, r4, r5, lr}
 800f846:	4b29      	ldr	r3, [pc, #164]	@ (800f8ec <__swsetup_r+0xa8>)
 800f848:	4605      	mov	r5, r0
 800f84a:	6818      	ldr	r0, [r3, #0]
 800f84c:	460c      	mov	r4, r1
 800f84e:	b118      	cbz	r0, 800f858 <__swsetup_r+0x14>
 800f850:	6a03      	ldr	r3, [r0, #32]
 800f852:	b90b      	cbnz	r3, 800f858 <__swsetup_r+0x14>
 800f854:	f7fc fe9e 	bl	800c594 <__sinit>
 800f858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f85c:	0719      	lsls	r1, r3, #28
 800f85e:	d422      	bmi.n	800f8a6 <__swsetup_r+0x62>
 800f860:	06da      	lsls	r2, r3, #27
 800f862:	d407      	bmi.n	800f874 <__swsetup_r+0x30>
 800f864:	2209      	movs	r2, #9
 800f866:	602a      	str	r2, [r5, #0]
 800f868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f86c:	81a3      	strh	r3, [r4, #12]
 800f86e:	f04f 30ff 	mov.w	r0, #4294967295
 800f872:	e033      	b.n	800f8dc <__swsetup_r+0x98>
 800f874:	0758      	lsls	r0, r3, #29
 800f876:	d512      	bpl.n	800f89e <__swsetup_r+0x5a>
 800f878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f87a:	b141      	cbz	r1, 800f88e <__swsetup_r+0x4a>
 800f87c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f880:	4299      	cmp	r1, r3
 800f882:	d002      	beq.n	800f88a <__swsetup_r+0x46>
 800f884:	4628      	mov	r0, r5
 800f886:	f7fd f857 	bl	800c938 <_free_r>
 800f88a:	2300      	movs	r3, #0
 800f88c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f88e:	89a3      	ldrh	r3, [r4, #12]
 800f890:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f894:	81a3      	strh	r3, [r4, #12]
 800f896:	2300      	movs	r3, #0
 800f898:	6063      	str	r3, [r4, #4]
 800f89a:	6923      	ldr	r3, [r4, #16]
 800f89c:	6023      	str	r3, [r4, #0]
 800f89e:	89a3      	ldrh	r3, [r4, #12]
 800f8a0:	f043 0308 	orr.w	r3, r3, #8
 800f8a4:	81a3      	strh	r3, [r4, #12]
 800f8a6:	6923      	ldr	r3, [r4, #16]
 800f8a8:	b94b      	cbnz	r3, 800f8be <__swsetup_r+0x7a>
 800f8aa:	89a3      	ldrh	r3, [r4, #12]
 800f8ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f8b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8b4:	d003      	beq.n	800f8be <__swsetup_r+0x7a>
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	f000 f89f 	bl	800f9fc <__smakebuf_r>
 800f8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8c2:	f013 0201 	ands.w	r2, r3, #1
 800f8c6:	d00a      	beq.n	800f8de <__swsetup_r+0x9a>
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	60a2      	str	r2, [r4, #8]
 800f8cc:	6962      	ldr	r2, [r4, #20]
 800f8ce:	4252      	negs	r2, r2
 800f8d0:	61a2      	str	r2, [r4, #24]
 800f8d2:	6922      	ldr	r2, [r4, #16]
 800f8d4:	b942      	cbnz	r2, 800f8e8 <__swsetup_r+0xa4>
 800f8d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f8da:	d1c5      	bne.n	800f868 <__swsetup_r+0x24>
 800f8dc:	bd38      	pop	{r3, r4, r5, pc}
 800f8de:	0799      	lsls	r1, r3, #30
 800f8e0:	bf58      	it	pl
 800f8e2:	6962      	ldrpl	r2, [r4, #20]
 800f8e4:	60a2      	str	r2, [r4, #8]
 800f8e6:	e7f4      	b.n	800f8d2 <__swsetup_r+0x8e>
 800f8e8:	2000      	movs	r0, #0
 800f8ea:	e7f7      	b.n	800f8dc <__swsetup_r+0x98>
 800f8ec:	2000016c 	.word	0x2000016c

0800f8f0 <_raise_r>:
 800f8f0:	291f      	cmp	r1, #31
 800f8f2:	b538      	push	{r3, r4, r5, lr}
 800f8f4:	4605      	mov	r5, r0
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	d904      	bls.n	800f904 <_raise_r+0x14>
 800f8fa:	2316      	movs	r3, #22
 800f8fc:	6003      	str	r3, [r0, #0]
 800f8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800f902:	bd38      	pop	{r3, r4, r5, pc}
 800f904:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f906:	b112      	cbz	r2, 800f90e <_raise_r+0x1e>
 800f908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f90c:	b94b      	cbnz	r3, 800f922 <_raise_r+0x32>
 800f90e:	4628      	mov	r0, r5
 800f910:	f000 f830 	bl	800f974 <_getpid_r>
 800f914:	4622      	mov	r2, r4
 800f916:	4601      	mov	r1, r0
 800f918:	4628      	mov	r0, r5
 800f91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f91e:	f000 b817 	b.w	800f950 <_kill_r>
 800f922:	2b01      	cmp	r3, #1
 800f924:	d00a      	beq.n	800f93c <_raise_r+0x4c>
 800f926:	1c59      	adds	r1, r3, #1
 800f928:	d103      	bne.n	800f932 <_raise_r+0x42>
 800f92a:	2316      	movs	r3, #22
 800f92c:	6003      	str	r3, [r0, #0]
 800f92e:	2001      	movs	r0, #1
 800f930:	e7e7      	b.n	800f902 <_raise_r+0x12>
 800f932:	2100      	movs	r1, #0
 800f934:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f938:	4620      	mov	r0, r4
 800f93a:	4798      	blx	r3
 800f93c:	2000      	movs	r0, #0
 800f93e:	e7e0      	b.n	800f902 <_raise_r+0x12>

0800f940 <raise>:
 800f940:	4b02      	ldr	r3, [pc, #8]	@ (800f94c <raise+0xc>)
 800f942:	4601      	mov	r1, r0
 800f944:	6818      	ldr	r0, [r3, #0]
 800f946:	f7ff bfd3 	b.w	800f8f0 <_raise_r>
 800f94a:	bf00      	nop
 800f94c:	2000016c 	.word	0x2000016c

0800f950 <_kill_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4d07      	ldr	r5, [pc, #28]	@ (800f970 <_kill_r+0x20>)
 800f954:	2300      	movs	r3, #0
 800f956:	4604      	mov	r4, r0
 800f958:	4608      	mov	r0, r1
 800f95a:	4611      	mov	r1, r2
 800f95c:	602b      	str	r3, [r5, #0]
 800f95e:	f7f3 fd09 	bl	8003374 <_kill>
 800f962:	1c43      	adds	r3, r0, #1
 800f964:	d102      	bne.n	800f96c <_kill_r+0x1c>
 800f966:	682b      	ldr	r3, [r5, #0]
 800f968:	b103      	cbz	r3, 800f96c <_kill_r+0x1c>
 800f96a:	6023      	str	r3, [r4, #0]
 800f96c:	bd38      	pop	{r3, r4, r5, pc}
 800f96e:	bf00      	nop
 800f970:	20003168 	.word	0x20003168

0800f974 <_getpid_r>:
 800f974:	f7f3 bcf6 	b.w	8003364 <_getpid>

0800f978 <_calloc_r>:
 800f978:	b570      	push	{r4, r5, r6, lr}
 800f97a:	fba1 5402 	umull	r5, r4, r1, r2
 800f97e:	b93c      	cbnz	r4, 800f990 <_calloc_r+0x18>
 800f980:	4629      	mov	r1, r5
 800f982:	f7fc f9db 	bl	800bd3c <_malloc_r>
 800f986:	4606      	mov	r6, r0
 800f988:	b928      	cbnz	r0, 800f996 <_calloc_r+0x1e>
 800f98a:	2600      	movs	r6, #0
 800f98c:	4630      	mov	r0, r6
 800f98e:	bd70      	pop	{r4, r5, r6, pc}
 800f990:	220c      	movs	r2, #12
 800f992:	6002      	str	r2, [r0, #0]
 800f994:	e7f9      	b.n	800f98a <_calloc_r+0x12>
 800f996:	462a      	mov	r2, r5
 800f998:	4621      	mov	r1, r4
 800f99a:	f7fc fec0 	bl	800c71e <memset>
 800f99e:	e7f5      	b.n	800f98c <_calloc_r+0x14>

0800f9a0 <_malloc_usable_size_r>:
 800f9a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9a4:	1f18      	subs	r0, r3, #4
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	bfbc      	itt	lt
 800f9aa:	580b      	ldrlt	r3, [r1, r0]
 800f9ac:	18c0      	addlt	r0, r0, r3
 800f9ae:	4770      	bx	lr

0800f9b0 <__swhatbuf_r>:
 800f9b0:	b570      	push	{r4, r5, r6, lr}
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9b8:	2900      	cmp	r1, #0
 800f9ba:	b096      	sub	sp, #88	@ 0x58
 800f9bc:	4615      	mov	r5, r2
 800f9be:	461e      	mov	r6, r3
 800f9c0:	da0d      	bge.n	800f9de <__swhatbuf_r+0x2e>
 800f9c2:	89a3      	ldrh	r3, [r4, #12]
 800f9c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f9c8:	f04f 0100 	mov.w	r1, #0
 800f9cc:	bf14      	ite	ne
 800f9ce:	2340      	movne	r3, #64	@ 0x40
 800f9d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	6031      	str	r1, [r6, #0]
 800f9d8:	602b      	str	r3, [r5, #0]
 800f9da:	b016      	add	sp, #88	@ 0x58
 800f9dc:	bd70      	pop	{r4, r5, r6, pc}
 800f9de:	466a      	mov	r2, sp
 800f9e0:	f000 f848 	bl	800fa74 <_fstat_r>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	dbec      	blt.n	800f9c2 <__swhatbuf_r+0x12>
 800f9e8:	9901      	ldr	r1, [sp, #4]
 800f9ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f9ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f9f2:	4259      	negs	r1, r3
 800f9f4:	4159      	adcs	r1, r3
 800f9f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9fa:	e7eb      	b.n	800f9d4 <__swhatbuf_r+0x24>

0800f9fc <__smakebuf_r>:
 800f9fc:	898b      	ldrh	r3, [r1, #12]
 800f9fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa00:	079d      	lsls	r5, r3, #30
 800fa02:	4606      	mov	r6, r0
 800fa04:	460c      	mov	r4, r1
 800fa06:	d507      	bpl.n	800fa18 <__smakebuf_r+0x1c>
 800fa08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fa0c:	6023      	str	r3, [r4, #0]
 800fa0e:	6123      	str	r3, [r4, #16]
 800fa10:	2301      	movs	r3, #1
 800fa12:	6163      	str	r3, [r4, #20]
 800fa14:	b003      	add	sp, #12
 800fa16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa18:	ab01      	add	r3, sp, #4
 800fa1a:	466a      	mov	r2, sp
 800fa1c:	f7ff ffc8 	bl	800f9b0 <__swhatbuf_r>
 800fa20:	9f00      	ldr	r7, [sp, #0]
 800fa22:	4605      	mov	r5, r0
 800fa24:	4639      	mov	r1, r7
 800fa26:	4630      	mov	r0, r6
 800fa28:	f7fc f988 	bl	800bd3c <_malloc_r>
 800fa2c:	b948      	cbnz	r0, 800fa42 <__smakebuf_r+0x46>
 800fa2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa32:	059a      	lsls	r2, r3, #22
 800fa34:	d4ee      	bmi.n	800fa14 <__smakebuf_r+0x18>
 800fa36:	f023 0303 	bic.w	r3, r3, #3
 800fa3a:	f043 0302 	orr.w	r3, r3, #2
 800fa3e:	81a3      	strh	r3, [r4, #12]
 800fa40:	e7e2      	b.n	800fa08 <__smakebuf_r+0xc>
 800fa42:	89a3      	ldrh	r3, [r4, #12]
 800fa44:	6020      	str	r0, [r4, #0]
 800fa46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa4a:	81a3      	strh	r3, [r4, #12]
 800fa4c:	9b01      	ldr	r3, [sp, #4]
 800fa4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fa52:	b15b      	cbz	r3, 800fa6c <__smakebuf_r+0x70>
 800fa54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa58:	4630      	mov	r0, r6
 800fa5a:	f000 f81d 	bl	800fa98 <_isatty_r>
 800fa5e:	b128      	cbz	r0, 800fa6c <__smakebuf_r+0x70>
 800fa60:	89a3      	ldrh	r3, [r4, #12]
 800fa62:	f023 0303 	bic.w	r3, r3, #3
 800fa66:	f043 0301 	orr.w	r3, r3, #1
 800fa6a:	81a3      	strh	r3, [r4, #12]
 800fa6c:	89a3      	ldrh	r3, [r4, #12]
 800fa6e:	431d      	orrs	r5, r3
 800fa70:	81a5      	strh	r5, [r4, #12]
 800fa72:	e7cf      	b.n	800fa14 <__smakebuf_r+0x18>

0800fa74 <_fstat_r>:
 800fa74:	b538      	push	{r3, r4, r5, lr}
 800fa76:	4d07      	ldr	r5, [pc, #28]	@ (800fa94 <_fstat_r+0x20>)
 800fa78:	2300      	movs	r3, #0
 800fa7a:	4604      	mov	r4, r0
 800fa7c:	4608      	mov	r0, r1
 800fa7e:	4611      	mov	r1, r2
 800fa80:	602b      	str	r3, [r5, #0]
 800fa82:	f7f3 fcd7 	bl	8003434 <_fstat>
 800fa86:	1c43      	adds	r3, r0, #1
 800fa88:	d102      	bne.n	800fa90 <_fstat_r+0x1c>
 800fa8a:	682b      	ldr	r3, [r5, #0]
 800fa8c:	b103      	cbz	r3, 800fa90 <_fstat_r+0x1c>
 800fa8e:	6023      	str	r3, [r4, #0]
 800fa90:	bd38      	pop	{r3, r4, r5, pc}
 800fa92:	bf00      	nop
 800fa94:	20003168 	.word	0x20003168

0800fa98 <_isatty_r>:
 800fa98:	b538      	push	{r3, r4, r5, lr}
 800fa9a:	4d06      	ldr	r5, [pc, #24]	@ (800fab4 <_isatty_r+0x1c>)
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	4604      	mov	r4, r0
 800faa0:	4608      	mov	r0, r1
 800faa2:	602b      	str	r3, [r5, #0]
 800faa4:	f7f3 fcd6 	bl	8003454 <_isatty>
 800faa8:	1c43      	adds	r3, r0, #1
 800faaa:	d102      	bne.n	800fab2 <_isatty_r+0x1a>
 800faac:	682b      	ldr	r3, [r5, #0]
 800faae:	b103      	cbz	r3, 800fab2 <_isatty_r+0x1a>
 800fab0:	6023      	str	r3, [r4, #0]
 800fab2:	bd38      	pop	{r3, r4, r5, pc}
 800fab4:	20003168 	.word	0x20003168

0800fab8 <_init>:
 800fab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faba:	bf00      	nop
 800fabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fabe:	bc08      	pop	{r3}
 800fac0:	469e      	mov	lr, r3
 800fac2:	4770      	bx	lr

0800fac4 <_fini>:
 800fac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fac6:	bf00      	nop
 800fac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faca:	bc08      	pop	{r3}
 800facc:	469e      	mov	lr, r3
 800face:	4770      	bx	lr
